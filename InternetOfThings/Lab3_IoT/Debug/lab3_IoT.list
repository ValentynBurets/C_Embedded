
lab3_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007200  08007200  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007208  08007208  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acc0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c0e  00000000  00000000  0003ad80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  0003e990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  0003fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024112  00000000  00000000  00040b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a74  00000000  00000000  00064c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb949  00000000  00000000  0007c6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147fff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a3c  00000000  00000000  00148054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007190 	.word	0x08007190

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007190 	.word	0x08007190

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <lcdSend>:
#include "display.h"

void lcdSend(uint8_t isCommand, uint8_t data) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
	RS(isCommand==0);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4852      	ldr	r0, [pc, #328]	; (800062c <lcdSend+0x16c>)
 80004e2:	f001 f935 	bl	8001750 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fe60 	bl	80011ac <HAL_Delay>
	DH7(((data >> 7) & 1)==1);
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	09db      	lsrs	r3, r3, #7
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf14      	ite	ne
 80004fa:	2301      	movne	r3, #1
 80004fc:	2300      	moveq	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	461a      	mov	r2, r3
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	4849      	ldr	r0, [pc, #292]	; (800062c <lcdSend+0x16c>)
 8000508:	f001 f922 	bl	8001750 <HAL_GPIO_WritePin>
	DH6(((data >> 6) & 1)==1);
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	099b      	lsrs	r3, r3, #6
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	4841      	ldr	r0, [pc, #260]	; (800062c <lcdSend+0x16c>)
 8000528:	f001 f912 	bl	8001750 <HAL_GPIO_WritePin>
	DH5(((data >> 5) & 1)==1);
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4839      	ldr	r0, [pc, #228]	; (800062c <lcdSend+0x16c>)
 8000548:	f001 f902 	bl	8001750 <HAL_GPIO_WritePin>
	DH4(((data >> 4) & 1)==1);
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	091b      	lsrs	r3, r3, #4
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	4831      	ldr	r0, [pc, #196]	; (800062c <lcdSend+0x16c>)
 8000568:	f001 f8f2 	bl	8001750 <HAL_GPIO_WritePin>
	EN(1);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000572:	482e      	ldr	r0, [pc, #184]	; (800062c <lcdSend+0x16c>)
 8000574:	f001 f8ec 	bl	8001750 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fe17 	bl	80011ac <HAL_Delay>
	EN(0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <lcdSend+0x16c>)
 8000586:	f001 f8e3 	bl	8001750 <HAL_GPIO_WritePin>
	DH7(((data >> 3) & 1)==1);
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4821      	ldr	r0, [pc, #132]	; (800062c <lcdSend+0x16c>)
 80005a6:	f001 f8d3 	bl	8001750 <HAL_GPIO_WritePin>
	DH6(((data >> 2) & 1)==1);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	089b      	lsrs	r3, r3, #2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	4819      	ldr	r0, [pc, #100]	; (800062c <lcdSend+0x16c>)
 80005c6:	f001 f8c3 	bl	8001750 <HAL_GPIO_WritePin>
	DH5(((data >> 1) & 1)==1);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <lcdSend+0x16c>)
 80005e6:	f001 f8b3 	bl	8001750 <HAL_GPIO_WritePin>
	DH4((data & 1)==1);
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <lcdSend+0x16c>)
 8000602:	f001 f8a5 	bl	8001750 <HAL_GPIO_WritePin>
	EN(1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <lcdSend+0x16c>)
 800060e:	f001 f89f 	bl	8001750 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fdca 	bl	80011ac <HAL_Delay>
	EN(0);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <lcdSend+0x16c>)
 8000620:	f001 f896 	bl	8001750 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <lcdCommand>:
void lcdCommand(uint8_t cmd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 lcdSend(1, cmd);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4619      	mov	r1, r3
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff ff3e 	bl	80004c0 <lcdSend>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcdChar>:
void lcdChar(const char chr) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 lcdSend(0, (uint8_t)chr);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4619      	mov	r1, r3
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff30 	bl	80004c0 <lcdSend>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <setCursor>:

void setCursor(uint8_t col, uint8_t row)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
 lcdSend(1,0x80 | (col | row*0x40));
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	b2db      	uxtb	r3, r3
 800067e:	b25a      	sxtb	r2, r3
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	4313      	orrs	r3, r2
 8000686:	b25b      	sxtb	r3, r3
 8000688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800068c:	b25b      	sxtb	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff ff14 	bl	80004c0 <lcdSend>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <parametrsToggle>:
void parametrsToggle(uint8_t display,uint8_t cursor,uint8_t blink){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	460b      	mov	r3, r1
 80006ac:	71bb      	strb	r3, [r7, #6]
 80006ae:	4613      	mov	r3, r2
 80006b0:	717b      	strb	r3, [r7, #5]
 uint8_t comm = 0x08;
 80006b2:	2308      	movs	r3, #8
 80006b4:	73fb      	strb	r3, [r7, #15]
 if(display)comm|=0x04;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <parametrsToggle+0x24>
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	73fb      	strb	r3, [r7, #15]
 if(cursor)comm|=0x02;
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <parametrsToggle+0x32>
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	73fb      	strb	r3, [r7, #15]
 if(blink)comm|=0x01;
 80006d2:	797b      	ldrb	r3, [r7, #5]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <parametrsToggle+0x40>
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 lcdCommand(comm);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffa4 	bl	8000630 <lcdCommand>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <shiftToggle>:
void shiftToggle(uint8_t rightShift,uint8_t scrollInc){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
 uint8_t comm = 0x04;
 8000700:	2304      	movs	r3, #4
 8000702:	73fb      	strb	r3, [r7, #15]
 if(rightShift)comm|=0x02;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <shiftToggle+0x22>
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	73fb      	strb	r3, [r7, #15]
 if(scrollInc)comm|=0x01;
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <shiftToggle+0x30>
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 lcdCommand(comm);
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff84 	bl	8000630 <lcdCommand>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <scrollRight>:
void scrollRight(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
 lcdCommand(0x10|0x08|0x00);
 8000734:	2018      	movs	r0, #24
 8000736:	f7ff ff7b 	bl	8000630 <lcdCommand>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}

0800073e <clear>:
void scrollLeft(void){
 lcdCommand(0x10|0x08|0x04);
}
void clear(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
 lcdCommand(0x01);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff74 	bl	8000630 <lcdCommand>
 HAL_Delay(2);
 8000748:	2002      	movs	r0, #2
 800074a:	f000 fd2f 	bl	80011ac <HAL_Delay>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <initLCD>:
void home(void)
{
 lcdCommand(0x02);
 HAL_Delay(2);
}
void initLCD(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
 RW(0);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <initLCD+0x5c>)
 8000760:	f000 fff6 	bl	8001750 <HAL_GPIO_WritePin>
 HAL_Delay(40);
 8000764:	2028      	movs	r0, #40	; 0x28
 8000766:	f000 fd21 	bl	80011ac <HAL_Delay>
 lcdCommand(0x02);
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff60 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fd1b 	bl	80011ac <HAL_Delay>
 lcdCommand(0x28);
 8000776:	2028      	movs	r0, #40	; 0x28
 8000778:	f7ff ff5a 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 fd15 	bl	80011ac <HAL_Delay>
 lcdCommand(0x28);
 8000782:	2028      	movs	r0, #40	; 0x28
 8000784:	f7ff ff54 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fd0f 	bl	80011ac <HAL_Delay>
 parametrsToggle(1,0,0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff ff84 	bl	80006a0 <parametrsToggle>
 HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fd07 	bl	80011ac <HAL_Delay>
 clear();
 800079e:	f7ff ffce 	bl	800073e <clear>
 shiftToggle(1,0);
 80007a2:	2100      	movs	r1, #0
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff ffa3 	bl	80006f0 <shiftToggle>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <lcdString>:

void lcdString(char* str){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 int isSet = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 for(uint8_t i=0;str[i]!='\0'; i++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	72fb      	strb	r3, [r7, #11]
 80007c4:	e015      	b.n	80007f2 <lcdString+0x3e>
	 lcdChar(str[i]);
 80007c6:	7afb      	ldrb	r3, [r7, #11]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff3c 	bl	800064c <lcdChar>
	 if(i > 16 && !isSet){
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d908      	bls.n	80007ec <lcdString+0x38>
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d105      	bne.n	80007ec <lcdString+0x38>
		 setCursor(0,1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ff40 	bl	8000668 <setCursor>
		 isSet = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 for(uint8_t i=0;str[i]!='\0'; i++){
 80007ec:	7afb      	ldrb	r3, [r7, #11]
 80007ee:	3301      	adds	r3, #1
 80007f0:	72fb      	strb	r3, [r7, #11]
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1e3      	bne.n	80007c6 <lcdString+0x12>
	 }
 }
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <printTextScrollable>:

void printTextScrollable(char* text){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	setCursor(15,0);
 8000810:	2100      	movs	r1, #0
 8000812:	200f      	movs	r0, #15
 8000814:	f7ff ff28 	bl	8000668 <setCursor>
	for(int i=0; text[i]!= '\0'; ++i) {
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e016      	b.n	800084c <printTextScrollable+0x44>
		lcdChar(text[i]);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff10 	bl	800064c <lcdChar>
		HAL_Delay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000830:	f000 fcbc 	bl	80011ac <HAL_Delay>
		scrollRight();
 8000834:	f7ff ff7c 	bl	8000730 <scrollRight>
		if(i == 25){
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b19      	cmp	r3, #25
 800083c:	d103      	bne.n	8000846 <printTextScrollable+0x3e>
			setCursor(15,0);
 800083e:	2100      	movs	r1, #0
 8000840:	200f      	movs	r0, #15
 8000842:	f7ff ff11 	bl	8000668 <setCursor>
	for(int i=0; text[i]!= '\0'; ++i) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1e2      	bne.n	800081e <printTextScrollable+0x16>
		}
	}
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b090      	sub	sp, #64	; 0x40
 8000868:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fc2d 	bl	80010c8 <HAL_Init>
  SystemClock_Config();
 800086e:	f000 f849 	bl	8000904 <SystemClock_Config>
  MX_GPIO_Init();
 8000872:	f000 f945 	bl	8000b00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000876:	f000 f8af 	bl	80009d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800087a:	f000 f8db 	bl	8000a34 <MX_I2S3_Init>
  MX_SPI1_Init();
 800087e:	f000 f909 	bl	8000a94 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000882:	f006 f8cb 	bl	8006a1c <MX_USB_HOST_Init>

  initLCD();
 8000886:	f7ff ff65 	bl	8000754 <initLCD>
  char PIP[] = "Burets Valentyn Vasylovych";
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <main+0x98>)
 800088c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000890:	461d      	mov	r5, r3
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	c403      	stmia	r4!, {r0, r1}
 800089c:	8022      	strh	r2, [r4, #0]
 800089e:	3402      	adds	r4, #2
 80008a0:	0c13      	lsrs	r3, r2, #16
 80008a2:	7023      	strb	r3, [r4, #0]
  char text[] = "illumination red and green LED";
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <main+0x9c>)
 80008a6:	1d3c      	adds	r4, r7, #4
 80008a8:	461d      	mov	r5, r3
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008b2:	c407      	stmia	r4!, {r0, r1, r2}
 80008b4:	8023      	strh	r3, [r4, #0]
 80008b6:	3402      	adds	r4, #2
 80008b8:	0c1b      	lsrs	r3, r3, #16
 80008ba:	7023      	strb	r3, [r4, #0]

  while (1)
  {
	  /* USER CODE END WHILE */
	  //MX_USB_HOST_Process();
	  lcdString(PIP);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff77 	bl	80007b4 <lcdString>

	  HAL_Delay(2000);
 80008c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ca:	f000 fc6f 	bl	80011ac <HAL_Delay>

	  lcdString(text);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff6f 	bl	80007b4 <lcdString>

	  HAL_Delay(2000);
 80008d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008da:	f000 fc67 	bl	80011ac <HAL_Delay>

	  clear();
 80008de:	f7ff ff2e 	bl	800073e <clear>
	  setCursor(0,0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff febf 	bl	8000668 <setCursor>

	  /* USER CODE BEGIN 3 */

	  printTextScrollable(text);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff8b 	bl	8000808 <printTextScrollable>

	  HAL_Delay(2000);
 80008f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f6:	f000 fc59 	bl	80011ac <HAL_Delay>
	  lcdString(PIP);
 80008fa:	e7df      	b.n	80008bc <main+0x58>
 80008fc:	080071a8 	.word	0x080071a8
 8000900:	080071c4 	.word	0x080071c4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	; 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f006 fb6c 	bl	8006ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0xcc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <SystemClock_Config+0xcc>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	; 0x40
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <SystemClock_Config+0xcc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <SystemClock_Config+0xd0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SystemClock_Config+0xd0>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000978:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800097c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000982:	2307      	movs	r3, #7
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fa32 	bl	8003df4 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000996:	f000 f9b3 	bl	8000d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	230f      	movs	r3, #15
 800099c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099e:	2302      	movs	r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2105      	movs	r1, #5
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fc93 	bl	80042e4 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009c4:	f000 f99c 	bl	8000d00 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_I2C1_Init+0x54>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_I2C1_Init+0x58>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_I2C1_Init+0x50>)
 8000a16:	f002 fc09 	bl	800322c <HAL_I2C_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a20:	f000 f96e 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200000bc 	.word	0x200000bc
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	000186a0 	.word	0x000186a0

08000a34 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  hi2s3.Instance = SPI3;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <MX_I2S3_Init+0x58>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a44:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a58:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <MX_I2S3_Init+0x5c>)
 8000a5e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2S3_Init+0x54>)
 8000a74:	f002 fd1e 	bl	80034b4 <HAL_I2S_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a7e:	f000 f93f 	bl	8000d00 <Error_Handler>
  }

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	40003c00 	.word	0x40003c00
 8000a90:	00017700 	.word	0x00017700

08000a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_SPI1_Init+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_SPI1_Init+0x64>)
 8000ae6:	f003 ff25 	bl	8004934 <HAL_SPI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af0:	f000 f906 	bl	8000d00 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000110 	.word	0x20000110
 8000afc:	40013000 	.word	0x40013000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b73      	ldr	r3, [pc, #460]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a72      	ldr	r2, [pc, #456]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a6b      	ldr	r2, [pc, #428]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b65      	ldr	r3, [pc, #404]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a64      	ldr	r2, [pc, #400]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b62      	ldr	r3, [pc, #392]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5d      	ldr	r2, [pc, #372]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4f      	ldr	r2, [pc, #316]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <MX_GPIO_Init+0x1e8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8000bc4:	4849      	ldr	r0, [pc, #292]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000bc6:	f000 fdc3 	bl	8001750 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4848      	ldr	r0, [pc, #288]	; (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000bd0:	f000 fdbe 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bda:	4846      	ldr	r0, [pc, #280]	; (8000cf4 <MX_GPIO_Init+0x1f4>)
 8000bdc:	f000 fdb8 	bl	8001750 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000be0:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8000be4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483c      	ldr	r0, [pc, #240]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000bfa:	f000 fc0d 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4836      	ldr	r0, [pc, #216]	; (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000c16:	f000 fbff 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <MX_GPIO_Init+0x1f0>)
 8000c36:	f000 fbef 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	482a      	ldr	r0, [pc, #168]	; (8000cf8 <MX_GPIO_Init+0x1f8>)
 8000c50:	f000 fbe2 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c54:	2304      	movs	r3, #4
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4825      	ldr	r0, [pc, #148]	; (8000cfc <MX_GPIO_Init+0x1fc>)
 8000c68:	f000 fbd6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <MX_GPIO_Init+0x1fc>)
 8000c8a:	f000 fbc5 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c8e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_GPIO_Init+0x1f4>)
 8000ca8:	f000 fbb6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cac:	2320      	movs	r3, #32
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_GPIO_Init+0x1f4>)
 8000cc0:	f000 fbaa 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_GPIO_Init+0x1ec>)
 8000cda:	f000 fb9d 	bl	8001418 <HAL_GPIO_Init>

}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	; 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f000 fb22 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_I2C_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12c      	bne.n	8000dd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dac:	2304      	movs	r3, #4
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <HAL_I2C_MspInit+0x8c>)
 8000db8:	f000 fb2e 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400

08000dec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_I2S_MspInit+0xf0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d15a      	bne.n	8000ed2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e20:	23c0      	movs	r3, #192	; 0xc0
 8000e22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fc41 	bl	80046b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e38:	f7ff ff62 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e90:	2310      	movs	r3, #16
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <HAL_I2S_MspInit+0xf8>)
 8000eac:	f000 fab4 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eb0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <HAL_I2S_MspInit+0xfc>)
 8000ece:	f000 faa3 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3738      	adds	r7, #56	; 0x38
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40003c00 	.word	0x40003c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f46:	23e0      	movs	r3, #224	; 0xe0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fa59 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f8d0 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <OTG_FS_IRQHandler+0x10>)
 8000fd6:	f000 fe3f 	bl	8001c58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000058c 	.word	0x2000058c

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f005 ffb2 	bl	8006f7c <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20020000 	.word	0x20020000
 8001044:	00000400 	.word	0x00000400
 8001048:	200000ac 	.word	0x200000ac
 800104c:	200008a0 	.word	0x200008a0

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800109e:	f7ff ffd7 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f005 ff71 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fbdd 	bl	8000864 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010b8:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 80010bc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010c0:	200008a0 	.word	0x200008a0

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94f 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fe06 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f967 	bl	80013fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92f 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	200001b0 	.word	0x200001b0

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200001b0 	.word	0x200001b0

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e16b      	b.n	800170c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 815a 	bne.w	8001706 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80b4 	beq.w	8001706 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b60      	ldr	r3, [pc, #384]	; (8001724 <HAL_GPIO_Init+0x30c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a5f      	ldr	r2, [pc, #380]	; (8001724 <HAL_GPIO_Init+0x30c>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <HAL_GPIO_Init+0x30c>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a5b      	ldr	r2, [pc, #364]	; (8001728 <HAL_GPIO_Init+0x310>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_GPIO_Init+0x314>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02b      	beq.n	800163e <HAL_GPIO_Init+0x226>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_GPIO_Init+0x318>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d025      	beq.n	800163a <HAL_GPIO_Init+0x222>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_GPIO_Init+0x31c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01f      	beq.n	8001636 <HAL_GPIO_Init+0x21e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_GPIO_Init+0x320>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d019      	beq.n	8001632 <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	; (800173c <HAL_GPIO_Init+0x324>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x328>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	; (8001744 <HAL_GPIO_Init+0x32c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <HAL_GPIO_Init+0x330>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x20a>
 800161e:	2307      	movs	r3, #7
 8001620:	e00e      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001622:	2308      	movs	r3, #8
 8001624:	e00c      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001626:	2306      	movs	r3, #6
 8001628:	e00a      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162a:	2305      	movs	r3, #5
 800162c:	e008      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800162e:	2304      	movs	r3, #4
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001632:	2303      	movs	r3, #3
 8001634:	e004      	b.n	8001640 <HAL_GPIO_Init+0x228>
 8001636:	2302      	movs	r3, #2
 8001638:	e002      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_GPIO_Init+0x228>
 800163e:	2300      	movs	r3, #0
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	f002 0203 	and.w	r2, r2, #3
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	4093      	lsls	r3, r2
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001650:	4935      	ldr	r1, [pc, #212]	; (8001728 <HAL_GPIO_Init+0x310>)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	3302      	adds	r3, #2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_GPIO_Init+0x334>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001682:	4a32      	ldr	r2, [pc, #200]	; (800174c <HAL_GPIO_Init+0x334>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_GPIO_Init+0x334>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ac:	4a27      	ldr	r2, [pc, #156]	; (800174c <HAL_GPIO_Init+0x334>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b26      	ldr	r3, [pc, #152]	; (800174c <HAL_GPIO_Init+0x334>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_GPIO_Init+0x334>)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_GPIO_Init+0x334>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <HAL_GPIO_Init+0x334>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	2b0f      	cmp	r3, #15
 8001710:	f67f ae90 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40013800 	.word	0x40013800
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40021000 	.word	0x40021000
 8001740:	40021400 	.word	0x40021400
 8001744:	40021800 	.word	0x40021800
 8001748:	40021c00 	.word	0x40021c00
 800174c:	40013c00 	.word	0x40013c00

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001784:	b08f      	sub	sp, #60	; 0x3c
 8001786:	af0a      	add	r7, sp, #40	; 0x28
 8001788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e054      	b.n	800183e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f005 f988 	bl	8006ac4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2203      	movs	r2, #3
 80017b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f9a9 	bl	8004b2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	687e      	ldr	r6, [r7, #4]
 80017e0:	466d      	mov	r5, sp
 80017e2:	f106 0410 	add.w	r4, r6, #16
 80017e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f6:	1d33      	adds	r3, r6, #4
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f003 f923 	bl	8004a46 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f9a0 	bl	8004b4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	687e      	ldr	r6, [r7, #4]
 8001814:	466d      	mov	r5, sp
 8001816:	f106 0410 	add.w	r4, r6, #16
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001826:	e885 0003 	stmia.w	r5, {r0, r1}
 800182a:	1d33      	adds	r3, r6, #4
 800182c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f003 fb06 	bl	8004e40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001846 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001846:	b590      	push	{r4, r7, lr}
 8001848:	b089      	sub	sp, #36	; 0x24
 800184a:	af04      	add	r7, sp, #16
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	461a      	mov	r2, r3
 8001854:	4603      	mov	r3, r0
 8001856:	70fb      	strb	r3, [r7, #3]
 8001858:	460b      	mov	r3, r1
 800185a:	70bb      	strb	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_HCD_HC_Init+0x28>
 800186a:	2302      	movs	r3, #2
 800186c:	e076      	b.n	800195c <HAL_HCD_HC_Init+0x116>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333d      	adds	r3, #61	; 0x3d
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3338      	adds	r3, #56	; 0x38
 8001896:	787a      	ldrb	r2, [r7, #1]
 8001898:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3340      	adds	r3, #64	; 0x40
 80018a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3339      	adds	r3, #57	; 0x39
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	333f      	adds	r3, #63	; 0x3f
 80018cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	78ba      	ldrb	r2, [r7, #2]
 80018d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018da:	b2d0      	uxtb	r0, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	333a      	adds	r3, #58	; 0x3a
 80018e8:	4602      	mov	r2, r0
 80018ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da09      	bge.n	8001908 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	333b      	adds	r3, #59	; 0x3b
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e008      	b.n	800191a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	333b      	adds	r3, #59	; 0x3b
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	333c      	adds	r3, #60	; 0x3c
 8001928:	f897 2020 	ldrb.w	r2, [r7, #32]
 800192c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	787c      	ldrb	r4, [r7, #1]
 8001934:	78ba      	ldrb	r2, [r7, #2]
 8001936:	78f9      	ldrb	r1, [r7, #3]
 8001938:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4623      	mov	r3, r4
 800194a:	f003 fbc9 	bl	80050e0 <USB_HC_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}

08001964 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_HCD_HC_Halt+0x1e>
 800197e:	2302      	movs	r3, #2
 8001980:	e00f      	b.n	80019a2 <HAL_HCD_HC_Halt+0x3e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fe05 	bl	80055a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	460b      	mov	r3, r1
 80019c0:	70bb      	strb	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	333b      	adds	r3, #59	; 0x3b
 80019d4:	78ba      	ldrb	r2, [r7, #2]
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	333f      	adds	r3, #63	; 0x3f
 80019e6:	787a      	ldrb	r2, [r7, #1]
 80019e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019ea:	7c3b      	ldrb	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3342      	adds	r3, #66	; 0x42
 80019fe:	2203      	movs	r2, #3
 8001a00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333d      	adds	r3, #61	; 0x3d
 8001a10:	7f3a      	ldrb	r2, [r7, #28]
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e008      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3342      	adds	r3, #66	; 0x42
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	f200 80c6 	bhi.w	8001bbc <HAL_HCD_HC_SubmitRequest+0x210>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001ba9 	.word	0x08001ba9
 8001a40:	08001aad 	.word	0x08001aad
 8001a44:	08001b2b 	.word	0x08001b2b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a48:	7c3b      	ldrb	r3, [r7, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80b8 	bne.w	8001bc0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 80b4 	bne.w	8001bc0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a58:	8b3b      	ldrh	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d108      	bne.n	8001a70 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3355      	adds	r3, #85	; 0x55
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3355      	adds	r3, #85	; 0x55
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3342      	adds	r3, #66	; 0x42
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a96:	e093      	b.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3342      	adds	r3, #66	; 0x42
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
      break;
 8001aaa:	e089      	b.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001aac:	78bb      	ldrb	r3, [r7, #2]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11d      	bne.n	8001aee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3355      	adds	r3, #85	; 0x55
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ad8:	e073      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212c      	movs	r1, #44	; 0x2c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3342      	adds	r3, #66	; 0x42
 8001ae8:	2202      	movs	r2, #2
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e069      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	3354      	adds	r3, #84	; 0x54
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3342      	adds	r3, #66	; 0x42
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
      break;
 8001b14:	e055      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	212c      	movs	r1, #44	; 0x2c
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	3342      	adds	r3, #66	; 0x42
 8001b24:	2202      	movs	r2, #2
 8001b26:	701a      	strb	r2, [r3, #0]
      break;
 8001b28:	e04b      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11d      	bne.n	8001b6c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3355      	adds	r3, #85	; 0x55
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3342      	adds	r3, #66	; 0x42
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b56:	e034      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3342      	adds	r3, #66	; 0x42
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
      break;
 8001b6a:	e02a      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3354      	adds	r3, #84	; 0x54
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3342      	adds	r3, #66	; 0x42
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	e016      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3342      	adds	r3, #66	; 0x42
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	701a      	strb	r2, [r3, #0]
      break;
 8001ba6:	e00c      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3342      	adds	r3, #66	; 0x42
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bbc:	bf00      	nop
 8001bbe:	e000      	b.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bc0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3344      	adds	r3, #68	; 0x44
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	8b3a      	ldrh	r2, [r7, #24]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	202c      	movs	r0, #44	; 0x2c
 8001bdc:	fb00 f303 	mul.w	r3, r0, r3
 8001be0:	440b      	add	r3, r1
 8001be2:	334c      	adds	r3, #76	; 0x4c
 8001be4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3360      	adds	r3, #96	; 0x60
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3350      	adds	r3, #80	; 0x50
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	3339      	adds	r3, #57	; 0x39
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3361      	adds	r3, #97	; 0x61
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	222c      	movs	r2, #44	; 0x2c
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	3338      	adds	r3, #56	; 0x38
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	18d1      	adds	r1, r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	f003 fb58 	bl	80052fc <USB_HC_StartXfer>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop

08001c58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f8a5 	bl	8004dbe <USB_GetMode>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	f040 80f6 	bne.w	8001e68 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 f889 	bl	8004d98 <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80ec 	beq.w	8001e66 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f880 	bl	8004d98 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ca2:	d104      	bne.n	8001cae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f870 	bl	8004d98 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cc2:	d104      	bne.n	8001cce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f860 	bl	8004d98 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ce2:	d104      	bne.n	8001cee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f850 	bl	8004d98 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d103      	bne.n	8001d0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f842 	bl	8004d98 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d1e:	d11c      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	6938      	ldr	r0, [r7, #16]
 8001d3e:	f002 ff51 	bl	8004be4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d42:	6938      	ldr	r0, [r7, #16]
 8001d44:	f002 ff72 	bl	8004c2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 f92a 	bl	8004fa8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f004 ff33 	bl	8006bc0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 f81a 	bl	8004d98 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d6e:	d102      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f001 f9e7 	bl	8003144 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 f80c 	bl	8004d98 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d106      	bne.n	8001d98 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f004 fefc 	bl	8006b88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2208      	movs	r2, #8
 8001d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fffb 	bl	8004d98 <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d101      	bne.n	8001db0 <HAL_HCD_IRQHandler+0x158>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_HCD_IRQHandler+0x15a>
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d012      	beq.n	8001ddc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0210 	bic.w	r2, r2, #16
 8001dc4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f001 f8ea 	bl	8002fa0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0210 	orr.w	r2, r2, #16
 8001dda:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 ffd9 	bl	8004d98 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df0:	d13a      	bne.n	8001e68 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fbc2 	bl	8005580 <USB_HC_ReadInterrupt>
 8001dfc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e025      	b.n	8001e50 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d018      	beq.n	8001e4a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2e:	d106      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f88f 	bl	8001f5a <HCD_HC_IN_IRQHandler>
 8001e3c:	e005      	b.n	8001e4a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fcaa 	bl	800279e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3d4      	bcc.n	8001e04 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	e000      	b.n	8001e68 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e66:	bf00      	nop
    }
  }
}
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_HCD_Start+0x16>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e013      	b.n	8001eac <HAL_HCD_Start+0x3e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f8c2 	bl	800501c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fe33 	bl	8004b08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_HCD_Stop+0x16>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e00d      	b.n	8001ee6 <HAL_HCD_Stop+0x32>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fcbc 	bl	8005854 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3360      	adds	r3, #96	; 0x60
 8001f08:	781b      	ldrb	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3350      	adds	r3, #80	; 0x50
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 f8b6 	bl	80050bc <USB_GetCurrentFrame>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d119      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	461a      	mov	r2, r3
 8001f98:	2304      	movs	r3, #4
 8001f9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	60d3      	str	r3, [r2, #12]
 8001fbc:	e101      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d12b      	bne.n	800202e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3361      	adds	r3, #97	; 0x61
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	0151      	lsls	r1, r2, #5
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	440a      	add	r2, r1
 8002012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fabb 	bl	80055a2 <USB_HC_Halt>
 800202c:	e0c9      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d109      	bne.n	8002058 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2320      	movs	r3, #32
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e0b4      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d133      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	0151      	lsls	r1, r2, #5
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	440a      	add	r2, r1
 8002084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3361      	adds	r3, #97	; 0x61
 800209c:	2205      	movs	r2, #5
 800209e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	461a      	mov	r2, r3
 80020ae:	2310      	movs	r3, #16
 80020b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2308      	movs	r3, #8
 80020c2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fa67 	bl	80055a2 <USB_HC_Halt>
 80020d4:	e075      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d134      	bne.n	8002158 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	0151      	lsls	r1, r2, #5
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	440a      	add	r2, r1
 8002104:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3361      	adds	r3, #97	; 0x61
 800211c:	2208      	movs	r2, #8
 800211e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	461a      	mov	r2, r3
 800212e:	2310      	movs	r3, #16
 8002130:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002144:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fa26 	bl	80055a2 <USB_HC_Halt>
 8002156:	e034      	b.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d129      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	0151      	lsls	r1, r2, #5
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	440a      	add	r2, r1
 8002184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3361      	adds	r3, #97	; 0x61
 800219c:	2206      	movs	r2, #6
 800219e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 f9f9 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d8:	d122      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	0151      	lsls	r1, r2, #5
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	440a      	add	r2, r1
 80021f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f9cc 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800221e:	e2ba      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	f040 811b 	bne.w	800246e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d019      	beq.n	8002274 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3348      	adds	r3, #72	; 0x48
 800224e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	0159      	lsls	r1, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	440b      	add	r3, r1
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002262:	1ad2      	subs	r2, r2, r3
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	202c      	movs	r0, #44	; 0x2c
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	440b      	add	r3, r1
 8002270:	3350      	adds	r3, #80	; 0x50
 8002272:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3361      	adds	r3, #97	; 0x61
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	212c      	movs	r1, #44	; 0x2c
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	335c      	adds	r3, #92	; 0x5c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	2301      	movs	r3, #1
 80022a8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	333f      	adds	r3, #63	; 0x3f
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d121      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f950 	bl	80055a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2310      	movs	r3, #16
 8002312:	6093      	str	r3, [r2, #8]
 8002314:	e066      	b.n	80023e4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	333f      	adds	r3, #63	; 0x3f
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d127      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002348:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	202c      	movs	r0, #44	; 0x2c
 8002366:	fb00 f303 	mul.w	r3, r0, r3
 800236a:	4413      	add	r3, r2
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f004 fc32 	bl	8006bdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002378:	e034      	b.n	80023e4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d12a      	bne.n	80023e4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3354      	adds	r3, #84	; 0x54
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2d8      	uxtb	r0, r3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	3354      	adds	r3, #84	; 0x54
 80023c4:	4602      	mov	r2, r0
 80023c6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	202c      	movs	r0, #44	; 0x2c
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3360      	adds	r3, #96	; 0x60
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f004 fbfc 	bl	8006bdc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d12b      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3348      	adds	r3, #72	; 0x48
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	202c      	movs	r0, #44	; 0x2c
 8002402:	fb00 f202 	mul.w	r2, r0, r2
 8002406:	440a      	add	r2, r1
 8002408:	3240      	adds	r2, #64	; 0x40
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 81be 	beq.w	8002796 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3354      	adds	r3, #84	; 0x54
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f083 0301 	eor.w	r3, r3, #1
 800242e:	b2d8      	uxtb	r0, r3
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3354      	adds	r3, #84	; 0x54
 800243e:	4602      	mov	r2, r0
 8002440:	701a      	strb	r2, [r3, #0]
}
 8002442:	e1a8      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3354      	adds	r3, #84	; 0x54
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2d8      	uxtb	r0, r3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3354      	adds	r3, #84	; 0x54
 8002468:	4602      	mov	r2, r0
 800246a:	701a      	strb	r2, [r3, #0]
}
 800246c:	e193      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b02      	cmp	r3, #2
 8002482:	f040 8106 	bne.w	8002692 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	440a      	add	r2, r1
 800249c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a0:	f023 0302 	bic.w	r3, r3, #2
 80024a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d109      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3360      	adds	r3, #96	; 0x60
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e0c9      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d109      	bne.n	80024f6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3360      	adds	r3, #96	; 0x60
 80024f0:	2205      	movs	r2, #5
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e0b5      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3361      	adds	r3, #97	; 0x61
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d009      	beq.n	800251e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3361      	adds	r3, #97	; 0x61
 8002518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800251a:	2b08      	cmp	r3, #8
 800251c:	d150      	bne.n	80025c0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	335c      	adds	r3, #92	; 0x5c
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	202c      	movs	r0, #44	; 0x2c
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	440b      	add	r3, r1
 800253c:	335c      	adds	r3, #92	; 0x5c
 800253e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d912      	bls.n	800257a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	335c      	adds	r3, #92	; 0x5c
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3360      	adds	r3, #96	; 0x60
 8002574:	2204      	movs	r2, #4
 8002576:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002578:	e073      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3360      	adds	r3, #96	; 0x60
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025be:	e050      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d122      	bne.n	800261a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3360      	adds	r3, #96	; 0x60
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025fc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002604:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e023      	b.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3361      	adds	r3, #97	; 0x61
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b07      	cmp	r3, #7
 800262c:	d119      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	335c      	adds	r3, #92	; 0x5c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	202c      	movs	r0, #44	; 0x2c
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	440b      	add	r3, r1
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3360      	adds	r3, #96	; 0x60
 800265e:	2204      	movs	r2, #4
 8002660:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	2302      	movs	r3, #2
 8002672:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	b2d9      	uxtb	r1, r3
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	202c      	movs	r0, #44	; 0x2c
 800267e:	fb00 f303 	mul.w	r3, r0, r3
 8002682:	4413      	add	r3, r2
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f004 faa6 	bl	8006bdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002690:	e081      	b.n	8002796 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d176      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	333f      	adds	r3, #63	; 0x3f
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d121      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	335c      	adds	r3, #92	; 0x5c
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	0151      	lsls	r1, r2, #5
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	440a      	add	r2, r1
 80026e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 ff52 	bl	80055a2 <USB_HC_Halt>
 80026fe:	e041      	b.n	8002784 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	333f      	adds	r3, #63	; 0x3f
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	333f      	adds	r3, #63	; 0x3f
 8002722:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002724:	2b02      	cmp	r3, #2
 8002726:	d12d      	bne.n	8002784 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	335c      	adds	r3, #92	; 0x5c
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d120      	bne.n	8002784 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3361      	adds	r3, #97	; 0x61
 8002750:	2203      	movs	r2, #3
 8002752:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4413      	add	r3, r2
 800275c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	440a      	add	r2, r1
 800276a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f002 ff0f 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	2310      	movs	r3, #16
 8002794:	6093      	str	r3, [r2, #8]
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b088      	sub	sp, #32
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d119      	bne.n	8002802 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	2304      	movs	r3, #4
 80027de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002800:	e3ca      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d13e      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2320      	movs	r3, #32
 8002828:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333d      	adds	r3, #61	; 0x3d
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	f040 83ac 	bne.w	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	333d      	adds	r3, #61	; 0x3d
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	440a      	add	r2, r1
 800287a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fe87 	bl	80055a2 <USB_HC_Halt>
}
 8002894:	e380      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ac:	d122      	bne.n	80028f4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	0151      	lsls	r1, r2, #5
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	440a      	add	r2, r1
 80028c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fe62 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f0:	6093      	str	r3, [r2, #8]
}
 80028f2:	e351      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d150      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d111      	bne.n	8002956 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	333d      	adds	r3, #61	; 0x3d
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f002 fe0e 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2301      	movs	r3, #1
 8002996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3361      	adds	r3, #97	; 0x61
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
}
 80029aa:	e2f5      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d13c      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3361      	adds	r3, #97	; 0x61
 80029d0:	2204      	movs	r2, #4
 80029d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333d      	adds	r3, #61	; 0x3d
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fdbd 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2340      	movs	r3, #64	; 0x40
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e2ad      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d12a      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2308      	movs	r3, #8
 8002a62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fd87 	bl	80055a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3361      	adds	r3, #97	; 0x61
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	701a      	strb	r2, [r3, #0]
}
 8002aa6:	e277      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d150      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	333d      	adds	r3, #61	; 0x3d
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d112      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d108      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	333d      	adds	r3, #61	; 0x3d
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fd2b 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
}
 8002b5e:	e21b      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b80      	cmp	r3, #128	; 0x80
 8002b74:	d174      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3361      	adds	r3, #97	; 0x61
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	0151      	lsls	r1, r2, #5
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	440a      	add	r2, r1
 8002ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fcf1 	bl	80055a2 <USB_HC_Halt>
 8002bc0:	e044      	b.n	8002c4c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	202c      	movs	r0, #44	; 0x2c
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	440b      	add	r3, r1
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	335c      	adds	r3, #92	; 0x5c
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d920      	bls.n	8002c3a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3360      	adds	r3, #96	; 0x60
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	b2d9      	uxtb	r1, r3
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	fb00 f303 	mul.w	r3, r0, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f003 ffd2 	bl	8006bdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c38:	e008      	b.n	8002c4c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	6093      	str	r3, [r2, #8]
}
 8002c5e:	e19b      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d134      	bne.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fc7d 	bl	80055a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ccc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2208      	movs	r2, #8
 8002cde:	701a      	strb	r2, [r3, #0]
}
 8002ce0:	e15a      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	f040 814f 	bne.w	8002f98 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	0151      	lsls	r1, r2, #5
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	440a      	add	r2, r1
 8002d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d14:	f023 0302 	bic.w	r3, r3, #2
 8002d18:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3361      	adds	r3, #97	; 0x61
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d17d      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	333f      	adds	r3, #63	; 0x3f
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d00a      	beq.n	8002d6a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	333f      	adds	r3, #63	; 0x3f
 8002d62:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	f040 8100 	bne.w	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d113      	bne.n	8002d9a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3355      	adds	r3, #85	; 0x55
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3355      	adds	r3, #85	; 0x55
 8002d96:	4602      	mov	r2, r0
 8002d98:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	f040 80e3 	bne.w	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	334c      	adds	r3, #76	; 0x4c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80d8 	beq.w	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	334c      	adds	r3, #76	; 0x4c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	202c      	movs	r0, #44	; 0x2c
 8002dd0:	fb00 f202 	mul.w	r2, r0, r2
 8002dd4:	440a      	add	r2, r1
 8002dd6:	3240      	adds	r2, #64	; 0x40
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	202c      	movs	r0, #44	; 0x2c
 8002de4:	fb00 f202 	mul.w	r2, r0, r2
 8002de8:	440a      	add	r2, r1
 8002dea:	3240      	adds	r2, #64	; 0x40
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80b5 	beq.w	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3355      	adds	r3, #85	; 0x55
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2d8      	uxtb	r0, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3355      	adds	r3, #85	; 0x55
 8002e24:	4602      	mov	r2, r0
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e09f      	b.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3361      	adds	r3, #97	; 0x61
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d109      	bne.n	8002e52 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3360      	adds	r3, #96	; 0x60
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e08b      	b.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3361      	adds	r3, #97	; 0x61
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d109      	bne.n	8002e7a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3360      	adds	r3, #96	; 0x60
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e077      	b.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3361      	adds	r3, #97	; 0x61
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d109      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e063      	b.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d009      	beq.n	8002eca <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3361      	adds	r3, #97	; 0x61
 8002ec4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d14f      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	335c      	adds	r3, #92	; 0x5c
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	202c      	movs	r0, #44	; 0x2c
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	335c      	adds	r3, #92	; 0x5c
 8002eea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	335c      	adds	r3, #92	; 0x5c
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d912      	bls.n	8002f26 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	335c      	adds	r3, #92	; 0x5c
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3360      	adds	r3, #96	; 0x60
 8002f20:	2204      	movs	r2, #4
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e021      	b.n	8002f6a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f4e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f56:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	461a      	mov	r2, r3
 8002f78:	2302      	movs	r3, #2
 8002f7a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	b2d9      	uxtb	r1, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	202c      	movs	r0, #44	; 0x2c
 8002f86:	fb00 f303 	mul.w	r3, r0, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f003 fe22 	bl	8006bdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f98:	bf00      	nop
 8002f9a:	3720      	adds	r7, #32
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	0c5b      	lsrs	r3, r3, #17
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d004      	beq.n	8002fe6 <HCD_RXQLVL_IRQHandler+0x46>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	f000 80a9 	beq.w	8003136 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fe4:	e0aa      	b.n	800313c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a6 	beq.w	800313a <HCD_RXQLVL_IRQHandler+0x19a>
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3344      	adds	r3, #68	; 0x44
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 809b 	beq.w	800313a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3350      	adds	r3, #80	; 0x50
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	441a      	add	r2, r3
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	202c      	movs	r0, #44	; 0x2c
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	440b      	add	r3, r1
 8003024:	334c      	adds	r3, #76	; 0x4c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d87a      	bhi.n	8003122 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3344      	adds	r3, #68	; 0x44
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	b292      	uxth	r2, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f001 fe4f 	bl	8004ce8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3344      	adds	r3, #68	; 0x44
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	441a      	add	r2, r3
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	202c      	movs	r0, #44	; 0x2c
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	440b      	add	r3, r1
 800306a:	3344      	adds	r3, #68	; 0x44
 800306c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3350      	adds	r3, #80	; 0x50
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	441a      	add	r2, r3
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	202c      	movs	r0, #44	; 0x2c
 8003088:	fb00 f303 	mul.w	r3, r0, r3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	0cdb      	lsrs	r3, r3, #19
 80030a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3340      	adds	r3, #64	; 0x40
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4293      	cmp	r3, r2
 80030be:	d13c      	bne.n	800313a <HCD_RXQLVL_IRQHandler+0x19a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d039      	beq.n	800313a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030dc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030e4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3354      	adds	r3, #84	; 0x54
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	f083 0301 	eor.w	r3, r3, #1
 800310c:	b2d8      	uxtb	r0, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3354      	adds	r3, #84	; 0x54
 800311c:	4602      	mov	r2, r0
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e00b      	b.n	800313a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3360      	adds	r3, #96	; 0x60
 8003130:	2204      	movs	r2, #4
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e001      	b.n	800313a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800313a:	bf00      	nop
  }
}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	; 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003170:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d10b      	bne.n	8003194 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f003 fd0c 	bl	8006ba4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b08      	cmp	r3, #8
 800319c:	d132      	bne.n	8003204 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d126      	bne.n	80031fe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d113      	bne.n	80031e0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031c2:	d106      	bne.n	80031d2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2102      	movs	r1, #2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 feec 	bl	8004fa8 <USB_InitFSLSPClkSel>
 80031d0:	e011      	b.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fee5 	bl	8004fa8 <USB_InitFSLSPClkSel>
 80031de:	e00a      	b.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ee:	461a      	mov	r2, r3
 80031f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031f4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f003 fcfe 	bl	8006bf8 <HAL_HCD_PortEnabled_Callback>
 80031fc:	e002      	b.n	8003204 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f003 fd08 	bl	8006c14 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d103      	bne.n	8003216 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e12b      	b.n	8003496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fd82 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003290:	f001 f9fc 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a81      	ldr	r2, [pc, #516]	; (80034a0 <HAL_I2C_Init+0x274>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d807      	bhi.n	80032b0 <HAL_I2C_Init+0x84>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a80      	ldr	r2, [pc, #512]	; (80034a4 <HAL_I2C_Init+0x278>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e006      	b.n	80032be <HAL_I2C_Init+0x92>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a7d      	ldr	r2, [pc, #500]	; (80034a8 <HAL_I2C_Init+0x27c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e7      	b.n	8003496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a78      	ldr	r2, [pc, #480]	; (80034ac <HAL_I2C_Init+0x280>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_I2C_Init+0x274>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d802      	bhi.n	8003300 <HAL_I2C_Init+0xd4>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3301      	adds	r3, #1
 80032fe:	e009      	b.n	8003314 <HAL_I2C_Init+0xe8>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_I2C_Init+0x284>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	3301      	adds	r3, #1
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	495c      	ldr	r1, [pc, #368]	; (80034a0 <HAL_I2C_Init+0x274>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d819      	bhi.n	8003368 <HAL_I2C_Init+0x13c>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e59      	subs	r1, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003348:	400b      	ands	r3, r1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_I2C_Init+0x138>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e59      	subs	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	fbb1 f3f3 	udiv	r3, r1, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003362:	e051      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003364:	2304      	movs	r3, #4
 8003366:	e04f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_I2C_Init+0x168>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e012      	b.n	80033ba <HAL_I2C_Init+0x18e>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x196>
 80033be:	2301      	movs	r3, #1
 80033c0:	e022      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10e      	bne.n	80033e8 <HAL_I2C_Init+0x1bc>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e58      	subs	r0, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	440b      	add	r3, r1
 80033d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	e00f      	b.n	8003408 <HAL_I2C_Init+0x1dc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	0099      	lsls	r1, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69da      	ldr	r2, [r3, #28]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6911      	ldr	r1, [r2, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	000186a0 	.word	0x000186a0
 80034a4:	001e847f 	.word	0x001e847f
 80034a8:	003d08ff 	.word	0x003d08ff
 80034ac:	431bde83 	.word	0x431bde83
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e128      	b.n	8003718 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a90      	ldr	r2, [pc, #576]	; (8003720 <HAL_I2S_Init+0x26c>)
 80034de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7fd fc83 	bl	8000dec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034fc:	f023 030f 	bic.w	r3, r3, #15
 8003500:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2202      	movs	r2, #2
 8003508:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d060      	beq.n	80035d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800351a:	2310      	movs	r3, #16
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e001      	b.n	8003524 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b20      	cmp	r3, #32
 800352a:	d802      	bhi.n	8003532 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003532:	2001      	movs	r0, #1
 8003534:	f001 f9a0 	bl	8004878 <HAL_RCCEx_GetPeriphCLKFreq>
 8003538:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d125      	bne.n	8003590 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fbb2 f2f3 	udiv	r2, r2, r3
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	3305      	adds	r3, #5
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	e01f      	b.n	80035ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	fbb2 f2f3 	udiv	r2, r2, r3
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	3305      	adds	r3, #5
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e00e      	b.n	80035ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fbb2 f2f3 	udiv	r2, r2, r3
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	461a      	mov	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	3305      	adds	r3, #5
 80035ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4a5c      	ldr	r2, [pc, #368]	; (8003724 <HAL_I2S_Init+0x270>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e003      	b.n	80035dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035d4:	2302      	movs	r3, #2
 80035d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d902      	bls.n	80035e8 <HAL_I2S_Init+0x134>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2bff      	cmp	r3, #255	; 0xff
 80035e6:	d907      	bls.n	80035f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f043 0210 	orr.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e08f      	b.n	8003718 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	ea42 0103 	orr.w	r1, r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	430a      	orrs	r2, r1
 800360a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003616:	f023 030f 	bic.w	r3, r3, #15
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6851      	ldr	r1, [r2, #4]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6892      	ldr	r2, [r2, #8]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68d2      	ldr	r2, [r2, #12]
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6992      	ldr	r2, [r2, #24]
 800362e:	430a      	orrs	r2, r1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d161      	bne.n	8003708 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a38      	ldr	r2, [pc, #224]	; (8003728 <HAL_I2S_Init+0x274>)
 8003648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <HAL_I2S_Init+0x278>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_I2S_Init+0x1a4>
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_I2S_Init+0x27c>)
 8003656:	e001      	b.n	800365c <HAL_I2S_Init+0x1a8>
 8003658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	4932      	ldr	r1, [pc, #200]	; (800372c <HAL_I2S_Init+0x278>)
 8003664:	428a      	cmp	r2, r1
 8003666:	d101      	bne.n	800366c <HAL_I2S_Init+0x1b8>
 8003668:	4a31      	ldr	r2, [pc, #196]	; (8003730 <HAL_I2S_Init+0x27c>)
 800366a:	e001      	b.n	8003670 <HAL_I2S_Init+0x1bc>
 800366c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003670:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003674:	f023 030f 	bic.w	r3, r3, #15
 8003678:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_I2S_Init+0x278>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_I2S_Init+0x1d4>
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_I2S_Init+0x27c>)
 8003686:	e001      	b.n	800368c <HAL_I2S_Init+0x1d8>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	2202      	movs	r2, #2
 800368e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a25      	ldr	r2, [pc, #148]	; (800372c <HAL_I2S_Init+0x278>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_I2S_Init+0x1ea>
 800369a:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_I2S_Init+0x27c>)
 800369c:	e001      	b.n	80036a2 <HAL_I2S_Init+0x1ee>
 800369e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ae:	d003      	beq.n	80036b8 <HAL_I2S_Init+0x204>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e001      	b.n	80036c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036d8:	4313      	orrs	r3, r2
 80036da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a0d      	ldr	r2, [pc, #52]	; (800372c <HAL_I2S_Init+0x278>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_I2S_Init+0x24c>
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_I2S_Init+0x27c>)
 80036fe:	e001      	b.n	8003704 <HAL_I2S_Init+0x250>
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	897a      	ldrh	r2, [r7, #10]
 8003706:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	0800382b 	.word	0x0800382b
 8003724:	cccccccd 	.word	0xcccccccd
 8003728:	08003941 	.word	0x08003941
 800372c:	40003800 	.word	0x40003800
 8003730:	40003400 	.word	0x40003400

08003734 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10e      	bne.n	80037c4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ffb8 	bl	8003734 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	b292      	uxth	r2, r2
 80037e0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10e      	bne.n	8003822 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff93 	bl	8003748 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b04      	cmp	r3, #4
 8003844:	d13a      	bne.n	80038bc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d109      	bne.n	8003864 <I2S_IRQHandler+0x3a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d102      	bne.n	8003864 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffb4 	bl	80037cc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d126      	bne.n	80038bc <I2S_IRQHandler+0x92>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d11f      	bne.n	80038bc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f043 0202 	orr.w	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff50 	bl	800375c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d136      	bne.n	8003936 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d109      	bne.n	80038e6 <I2S_IRQHandler+0xbc>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d102      	bne.n	80038e6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff45 	bl	8003770 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d122      	bne.n	8003936 <I2S_IRQHandler+0x10c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d11b      	bne.n	8003936 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800390c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f043 0204 	orr.w	r2, r3, #4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff13 	bl	800375c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4aa2      	ldr	r2, [pc, #648]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800395a:	4ba2      	ldr	r3, [pc, #648]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800395c:	e001      	b.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800395e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a9b      	ldr	r2, [pc, #620]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003978:	4b9a      	ldr	r3, [pc, #616]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800397a:	e001      	b.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800398c:	d004      	beq.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 8099 	bne.w	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f925 	bl	8003bfc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9c8 	bl	8003d5c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d13a      	bne.n	8003a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d035      	beq.n	8003a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7e      	ldr	r2, [pc, #504]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039ea:	4b7e      	ldr	r3, [pc, #504]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ec:	e001      	b.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4979      	ldr	r1, [pc, #484]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d101      	bne.n	8003a02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039fe:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a00:	e001      	b.n	8003a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fe88 	bl	800375c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	f040 80be 	bne.w	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80b8 	beq.w	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a59      	ldr	r2, [pc, #356]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a7e:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a80:	e001      	b.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4954      	ldr	r1, [pc, #336]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a8e:	428b      	cmp	r3, r1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a92:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a94:	e001      	b.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fe4a 	bl	800375c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac8:	e084      	b.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d107      	bne.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8be 	bl	8003c60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d107      	bne.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8fd 	bl	8003cf8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d12f      	bne.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d02a      	beq.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2e      	ldr	r2, [pc, #184]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b2e:	e001      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4929      	ldr	r1, [pc, #164]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b42:	e001      	b.n	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f043 0202 	orr.w	r2, r3, #2
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fdfa 	bl	800375c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d131      	bne.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02c      	beq.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b88:	e001      	b.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4912      	ldr	r1, [pc, #72]	; (8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b96:	428b      	cmp	r3, r1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b9c:	e001      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fdc5 	bl	800375c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bd4:	bf00      	nop
}
 8003bd6:	bf00      	nop
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40003800 	.word	0x40003800
 8003be4:	40003400 	.word	0x40003400

08003be8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c99      	adds	r1, r3, #2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ffc9 	bl	8003be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c99      	adds	r1, r3, #2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6251      	str	r1, [r2, #36]	; 0x24
 8003c72:	8819      	ldrh	r1, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <I2SEx_TxISR_I2SExt+0x22>
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c80:	e001      	b.n	8003c86 <I2SEx_TxISR_I2SExt+0x26>
 8003c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c86:	460a      	mov	r2, r1
 8003c88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d121      	bne.n	8003ce6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <I2SEx_TxISR_I2SExt+0x50>
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003cae:	e001      	b.n	8003cb4 <I2SEx_TxISR_I2SExt+0x54>
 8003cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <I2SEx_TxISR_I2SExt+0x90>)
 8003cbc:	428b      	cmp	r3, r1
 8003cbe:	d101      	bne.n	8003cc4 <I2SEx_TxISR_I2SExt+0x64>
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <I2SEx_TxISR_I2SExt+0x94>)
 8003cc2:	e001      	b.n	8003cc8 <I2SEx_TxISR_I2SExt+0x68>
 8003cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ccc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff81 	bl	8003be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40003800 	.word	0x40003800
 8003cf4:	40003400 	.word	0x40003400

08003cf8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68d8      	ldr	r0, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	1c99      	adds	r1, r3, #2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d10:	b282      	uxth	r2, r0
 8003d12:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ff4a 	bl	8003be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <I2SEx_RxISR_I2SExt+0x90>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <I2SEx_RxISR_I2SExt+0x16>
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d70:	e001      	b.n	8003d76 <I2SEx_RxISR_I2SExt+0x1a>
 8003d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d76:	68d8      	ldr	r0, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	1c99      	adds	r1, r3, #2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d82:	b282      	uxth	r2, r0
 8003d84:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d121      	bne.n	8003de2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <I2SEx_RxISR_I2SExt+0x90>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <I2SEx_RxISR_I2SExt+0x50>
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <I2SEx_RxISR_I2SExt+0x94>)
 8003daa:	e001      	b.n	8003db0 <I2SEx_RxISR_I2SExt+0x54>
 8003dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	490d      	ldr	r1, [pc, #52]	; (8003dec <I2SEx_RxISR_I2SExt+0x90>)
 8003db8:	428b      	cmp	r3, r1
 8003dba:	d101      	bne.n	8003dc0 <I2SEx_RxISR_I2SExt+0x64>
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <I2SEx_RxISR_I2SExt+0x94>)
 8003dbe:	e001      	b.n	8003dc4 <I2SEx_RxISR_I2SExt+0x68>
 8003dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dc8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff03 	bl	8003be8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40003800 	.word	0x40003800
 8003df0:	40003400 	.word	0x40003400

08003df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e264      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d075      	beq.n	8003efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e12:	4ba3      	ldr	r3, [pc, #652]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d00c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1e:	4ba0      	ldr	r3, [pc, #640]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d112      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b9d      	ldr	r3, [pc, #628]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	4b99      	ldr	r3, [pc, #612]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05b      	beq.n	8003efc <HAL_RCC_OscConfig+0x108>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d157      	bne.n	8003efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e23f      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e58:	d106      	bne.n	8003e68 <HAL_RCC_OscConfig+0x74>
 8003e5a:	4b91      	ldr	r3, [pc, #580]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a90      	ldr	r2, [pc, #576]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e01d      	b.n	8003ea4 <HAL_RCC_OscConfig+0xb0>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x98>
 8003e72:	4b8b      	ldr	r3, [pc, #556]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a8a      	ldr	r2, [pc, #552]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a87      	ldr	r2, [pc, #540]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCC_OscConfig+0xb0>
 8003e8c:	4b84      	ldr	r3, [pc, #528]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a83      	ldr	r2, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a80      	ldr	r2, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fd f972 	bl	8001194 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fd f96e 	bl	8001194 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e204      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xc0>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f95e 	bl	8001194 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fd f95a 	bl	8001194 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e1f0      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0xe8>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d063      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0a:	4b65      	ldr	r3, [pc, #404]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b62      	ldr	r3, [pc, #392]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d11c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d116      	bne.n	8003f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_RCC_OscConfig+0x152>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e1c4      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4b56      	ldr	r3, [pc, #344]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4952      	ldr	r1, [pc, #328]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	e03a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f64:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <HAL_RCC_OscConfig+0x2b0>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6a:	f7fd f913 	bl	8001194 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fd f90f 	bl	8001194 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e1a5      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	4b46      	ldr	r3, [pc, #280]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4940      	ldr	r1, [pc, #256]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x2b0>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd f8f2 	bl	8001194 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb4:	f7fd f8ee 	bl	8001194 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e184      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d030      	beq.n	8004040 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_RCC_OscConfig+0x2b4>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd f8d2 	bl	8001194 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd f8ce 	bl	8001194 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e164      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x200>
 8004012:	e015      	b.n	8004040 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_OscConfig+0x2b4>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401a:	f7fd f8bb 	bl	8001194 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004022:	f7fd f8b7 	bl	8001194 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e14d      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80a0 	beq.w	800418e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	; 0x40
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_OscConfig+0x2b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d121      	bne.n	80040ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_OscConfig+0x2b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_RCC_OscConfig+0x2b8>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd f87d 	bl	8001194 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e011      	b.n	80040c2 <HAL_RCC_OscConfig+0x2ce>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	42470000 	.word	0x42470000
 80040a8:	42470e80 	.word	0x42470e80
 80040ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b0:	f7fd f870 	bl	8001194 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e106      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_OscConfig+0x4e4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
 80040d6:	4b81      	ldr	r3, [pc, #516]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a80      	ldr	r2, [pc, #512]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	e01c      	b.n	800411e <HAL_RCC_OscConfig+0x32a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0x312>
 80040ec:	4b7b      	ldr	r3, [pc, #492]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	4a7a      	ldr	r2, [pc, #488]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70
 80040f8:	4b78      	ldr	r3, [pc, #480]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a77      	ldr	r2, [pc, #476]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
 8004104:	e00b      	b.n	800411e <HAL_RCC_OscConfig+0x32a>
 8004106:	4b75      	ldr	r3, [pc, #468]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a74      	ldr	r2, [pc, #464]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
 8004112:	4b72      	ldr	r3, [pc, #456]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a71      	ldr	r2, [pc, #452]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d015      	beq.n	8004152 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd f835 	bl	8001194 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd f831 	bl	8001194 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0c5      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	4b65      	ldr	r3, [pc, #404]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <HAL_RCC_OscConfig+0x33a>
 8004150:	e014      	b.n	800417c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fd f81f 	bl	8001194 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fd f81b 	bl	8001194 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0af      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004170:	4b5a      	ldr	r3, [pc, #360]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a55      	ldr	r2, [pc, #340]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 809b 	beq.w	80042ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d05c      	beq.n	800425e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d141      	bne.n	8004230 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <HAL_RCC_OscConfig+0x4ec>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fc ffef 	bl	8001194 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ba:	f7fc ffeb 	bl	8001194 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e081      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041cc:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	019b      	lsls	r3, r3, #6
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	3b01      	subs	r3, #1
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	4937      	ldr	r1, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCC_OscConfig+0x4ec>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fc ffc4 	bl	8001194 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004210:	f7fc ffc0 	bl	8001194 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e056      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x41c>
 800422e:	e04e      	b.n	80042ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x4ec>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fc ffad 	bl	8001194 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423e:	f7fc ffa9 	bl	8001194 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e03f      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004250:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x44a>
 800425c:	e037      	b.n	80042ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e032      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_RCC_OscConfig+0x4e8>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d028      	beq.n	80042ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d121      	bne.n	80042ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d11a      	bne.n	80042ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d111      	bne.n	80042ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	3b01      	subs	r3, #1
 80042b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40007000 	.word	0x40007000
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470060 	.word	0x42470060

080042e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0cc      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f8:	4b68      	ldr	r3, [pc, #416]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d90c      	bls.n	8004320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b65      	ldr	r3, [pc, #404]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b63      	ldr	r3, [pc, #396]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0b8      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d020      	beq.n	800436e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004338:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4a58      	ldr	r2, [pc, #352]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004350:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a52      	ldr	r2, [pc, #328]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800435a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800435c:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	494d      	ldr	r1, [pc, #308]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d044      	beq.n	8004404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d107      	bne.n	8004392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d119      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e07f      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d003      	beq.n	80043a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a2:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e06f      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b2:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e067      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 0203 	bic.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4934      	ldr	r1, [pc, #208]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d4:	f7fc fede 	bl	8001194 <HAL_GetTick>
 80043d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	e00a      	b.n	80043f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043dc:	f7fc feda 	bl	8001194 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e04f      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 020c 	and.w	r2, r3, #12
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	429a      	cmp	r2, r3
 8004402:	d1eb      	bne.n	80043dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d20c      	bcs.n	800442c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b22      	ldr	r3, [pc, #136]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e032      	b.n	8004492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4916      	ldr	r1, [pc, #88]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	490e      	ldr	r1, [pc, #56]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800446a:	f000 f821 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 800446e:	4602      	mov	r2, r0
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	490a      	ldr	r1, [pc, #40]	; (80044a4 <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	5ccb      	ldrb	r3, [r1, r3]
 800447e:	fa22 f303 	lsr.w	r3, r2, r3
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fe3e 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023c00 	.word	0x40023c00
 80044a0:	40023800 	.word	0x40023800
 80044a4:	080071e8 	.word	0x080071e8
 80044a8:	20000000 	.word	0x20000000
 80044ac:	20000004 	.word	0x20000004

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	2300      	movs	r3, #0
 80044c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c8:	4b67      	ldr	r3, [pc, #412]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d00d      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x40>
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	f200 80bd 	bhi.w	8004654 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x34>
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x3a>
 80044e2:	e0b7      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e4:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044e6:	60bb      	str	r3, [r7, #8]
       break;
 80044e8:	e0b7      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ea:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044ec:	60bb      	str	r3, [r7, #8]
      break;
 80044ee:	e0b4      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f0:	4b5d      	ldr	r3, [pc, #372]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044fa:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d04d      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004506:	4b58      	ldr	r3, [pc, #352]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	461a      	mov	r2, r3
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	ea02 0800 	and.w	r8, r2, r0
 800451e:	ea03 0901 	and.w	r9, r3, r1
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	014b      	lsls	r3, r1, #5
 8004530:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004534:	0142      	lsls	r2, r0, #5
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	ebb0 0008 	subs.w	r0, r0, r8
 800453e:	eb61 0109 	sbc.w	r1, r1, r9
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	018b      	lsls	r3, r1, #6
 800454c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004550:	0182      	lsls	r2, r0, #6
 8004552:	1a12      	subs	r2, r2, r0
 8004554:	eb63 0301 	sbc.w	r3, r3, r1
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	00d9      	lsls	r1, r3, #3
 8004562:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004566:	00d0      	lsls	r0, r2, #3
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	eb12 0208 	adds.w	r2, r2, r8
 8004570:	eb43 0309 	adc.w	r3, r3, r9
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0259      	lsls	r1, r3, #9
 800457e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004582:	0250      	lsls	r0, r2, #9
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	f7fb fe18 	bl	80001c8 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4613      	mov	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e04a      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	461a      	mov	r2, r3
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	ea02 0400 	and.w	r4, r2, r0
 80045ba:	ea03 0501 	and.w	r5, r3, r1
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	014b      	lsls	r3, r1, #5
 80045cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045d0:	0142      	lsls	r2, r0, #5
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	1b00      	subs	r0, r0, r4
 80045d8:	eb61 0105 	sbc.w	r1, r1, r5
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	018b      	lsls	r3, r1, #6
 80045e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045ea:	0182      	lsls	r2, r0, #6
 80045ec:	1a12      	subs	r2, r2, r0
 80045ee:	eb63 0301 	sbc.w	r3, r3, r1
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	00d9      	lsls	r1, r3, #3
 80045fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004600:	00d0      	lsls	r0, r2, #3
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	1912      	adds	r2, r2, r4
 8004608:	eb45 0303 	adc.w	r3, r5, r3
 800460c:	f04f 0000 	mov.w	r0, #0
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	0299      	lsls	r1, r3, #10
 8004616:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800461a:	0290      	lsls	r0, r2, #10
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	461a      	mov	r2, r3
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f7fb fdcc 	bl	80001c8 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4613      	mov	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	3301      	adds	r3, #1
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	60bb      	str	r3, [r7, #8]
      break;
 8004652:	e002      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004656:	60bb      	str	r3, [r7, #8]
      break;
 8004658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465a:	68bb      	ldr	r3, [r7, #8]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004666:	bf00      	nop
 8004668:	40023800 	.word	0x40023800
 800466c:	00f42400 	.word	0x00f42400
 8004670:	007a1200 	.word	0x007a1200

08004674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCC_GetHCLKFreq+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000000 	.word	0x20000000

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004690:	f7ff fff0 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	0a9b      	lsrs	r3, r3, #10
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	4903      	ldr	r1, [pc, #12]	; (80046b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a2:	5ccb      	ldrb	r3, [r1, r3]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	080071f8 	.word	0x080071f8

080046b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d035      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046dc:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fc fd57 	bl	8001194 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ea:	f7fc fd53 	bl	8001194 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e0b0      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	4b5b      	ldr	r3, [pc, #364]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	019a      	lsls	r2, r3, #6
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	071b      	lsls	r3, r3, #28
 8004714:	4955      	ldr	r1, [pc, #340]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800471c:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004722:	f7fc fd37 	bl	8001194 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800472a:	f7fc fd33 	bl	8001194 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e090      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800473c:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8083 	beq.w	800485c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b44      	ldr	r3, [pc, #272]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a43      	ldr	r2, [pc, #268]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a3e      	ldr	r2, [pc, #248]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800477e:	f7fc fd09 	bl	8001194 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004786:	f7fc fd05 	bl	8001194 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e062      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02f      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d028      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047d2:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047d8:	4a24      	ldr	r2, [pc, #144]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047de:	4b23      	ldr	r3, [pc, #140]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d114      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fc fcd3 	bl	8001194 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	e00a      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f7fc fccf 	bl	8001194 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e02a      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ee      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004820:	d10d      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	490d      	ldr	r1, [pc, #52]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]
 800483c:	e005      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004844:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004848:	6093      	str	r3, [r2, #8]
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	4905      	ldr	r1, [pc, #20]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	4313      	orrs	r3, r2
 800485a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	42470068 	.word	0x42470068
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000
 8004874:	42470e40 	.word	0x42470e40

08004878 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d13e      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d12f      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048ac:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048ae:	617b      	str	r3, [r7, #20]
          break;
 80048b0:	e02f      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048be:	d108      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e007      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048da:	4a15      	ldr	r2, [pc, #84]	; (8004930 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	0f1b      	lsrs	r3, r3, #28
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
          break;
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
          break;
 8004910:	bf00      	nop
        }
      }
      break;
 8004912:	bf00      	nop
    }
  }
  return frequency;
 8004914:	697b      	ldr	r3, [r7, #20]
}
 8004916:	4618      	mov	r0, r3
 8004918:	371c      	adds	r7, #28
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	00bb8000 	.word	0x00bb8000
 800492c:	007a1200 	.word	0x007a1200
 8004930:	00f42400 	.word	0x00f42400

08004934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07b      	b.n	8004a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004956:	d009      	beq.n	800496c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
 800495e:	e005      	b.n	800496c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fab0 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	ea42 0103 	orr.w	r1, r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0104 	and.w	r1, r3, #4
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0210 	and.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a46:	b084      	sub	sp, #16
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	f107 001c 	add.w	r0, r7, #28
 8004a54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d122      	bne.n	8004aa4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f99f 	bl	8004ddc <USB_CoreReset>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e01a      	b.n	8004ada <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f993 	bl	8004ddc <USB_CoreReset>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
 8004acc:	e005      	b.n	8004ada <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d10b      	bne.n	8004af8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f043 0206 	orr.w	r2, r3, #6
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b04:	b004      	add	sp, #16
 8004b06:	4770      	bx	lr

08004b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d115      	bne.n	8004b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	f7fc fb16 	bl	80011ac <HAL_Delay>
      ms++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f919 	bl	8004dbe <USB_GetMode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d01e      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b31      	cmp	r3, #49	; 0x31
 8004b96:	d9f0      	bls.n	8004b7a <USB_SetCurrentMode+0x2e>
 8004b98:	e01a      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d115      	bne.n	8004bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f7fc fafd 	bl	80011ac <HAL_Delay>
      ms++;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f900 	bl	8004dbe <USB_GetMode>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <USB_SetCurrentMode+0x84>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b31      	cmp	r3, #49	; 0x31
 8004bc8:	d9f0      	bls.n	8004bac <USB_SetCurrentMode+0x60>
 8004bca:	e001      	b.n	8004bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e005      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b32      	cmp	r3, #50	; 0x32
 8004bd4:	d101      	bne.n	8004bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushTxFifo+0x44>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d0f1      	beq.n	8004bfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <USB_FlushRxFifo+0x3c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e006      	b.n	8004c5c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d0f1      	beq.n	8004c3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	00030d40 	.word	0x00030d40

08004c6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	71fb      	strb	r3, [r7, #7]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d123      	bne.n	8004cda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c92:	88bb      	ldrh	r3, [r7, #4]
 8004c94:	3303      	adds	r3, #3
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e018      	b.n	8004cd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	031a      	lsls	r2, r3, #12
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	461a      	mov	r2, r3
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d3e2      	bcc.n	8004ca0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3724      	adds	r7, #36	; 0x24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b08b      	sub	sp, #44	; 0x2c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	089b      	lsrs	r3, r3, #2
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	e014      	b.n	8004d3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	3301      	adds	r3, #1
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	3301      	adds	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	3301      	adds	r3, #1
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	3301      	adds	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d3e6      	bcc.n	8004d14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d46:	8bfb      	ldrh	r3, [r7, #30]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01e      	beq.n	8004d8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d56:	461a      	mov	r2, r3
 8004d58:	f107 0310 	add.w	r3, r7, #16
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	701a      	strb	r2, [r3, #0]
      i++;
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	3301      	adds	r3, #1
 8004d76:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d7e:	8bfb      	ldrh	r3, [r7, #30]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d84:	8bfb      	ldrh	r3, [r7, #30]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1ea      	bne.n	8004d60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	372c      	adds	r7, #44	; 0x2c
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004db0:	68fb      	ldr	r3, [r7, #12]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0301 	and.w	r3, r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <USB_CoreReset+0x60>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e01a      	b.n	8004e2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	daf3      	bge.n	8004de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <USB_CoreReset+0x60>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d0f1      	beq.n	8004e10 <USB_CoreReset+0x34>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	00030d40 	.word	0x00030d40

08004e40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e40:	b084      	sub	sp, #16
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	f107 001c 	add.w	r0, r7, #28
 8004e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10a      	bne.n	8004eae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e014      	b.n	8004ed8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e009      	b.n	8004ed8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed2:	f023 0304 	bic.w	r3, r3, #4
 8004ed6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ed8:	2110      	movs	r1, #16
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe82 	bl	8004be4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fea3 	bl	8004c2c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e015      	b.n	8004f18 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3e5      	bcc.n	8004eec <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <USB_HostInit+0x154>)
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <USB_HostInit+0x158>)
 8004f4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f50:	e009      	b.n	8004f66 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <USB_HostInit+0x15c>)
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <USB_HostInit+0x160>)
 8004f62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f043 0210 	orr.w	r2, r3, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <USB_HostInit+0x164>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f90:	b004      	add	sp, #16
 8004f92:	4770      	bx	lr
 8004f94:	01000200 	.word	0x01000200
 8004f98:	00e00300 	.word	0x00e00300
 8004f9c:	00600080 	.word	0x00600080
 8004fa0:	004000e0 	.word	0x004000e0
 8004fa4:	a3200008 	.word	0xa3200008

08004fa8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ff6:	6053      	str	r3, [r2, #4]
 8004ff8:	e009      	b.n	800500e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d106      	bne.n	800500e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005006:	461a      	mov	r2, r3
 8005008:	f241 7370 	movw	r3, #6000	; 0x1770
 800500c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005040:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <USB_DriveVbus+0x44>
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800505a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800505e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d109      	bne.n	8005080 <USB_DriveVbus+0x64>
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800507a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800507e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800508e:	b480      	push	{r7}
 8005090:	b085      	sub	sp, #20
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	0c5b      	lsrs	r3, r3, #17
 80050ac:	f003 0303 	and.w	r3, r3, #3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	b29b      	uxth	r3, r3
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	70fb      	strb	r3, [r7, #3]
 80050f2:	460b      	mov	r3, r1
 80050f4:	70bb      	strb	r3, [r7, #2]
 80050f6:	4613      	mov	r3, r2
 80050f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005116:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800511a:	2b03      	cmp	r3, #3
 800511c:	d87e      	bhi.n	800521c <USB_HC_Init+0x13c>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <USB_HC_Init+0x44>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005135 	.word	0x08005135
 8005128:	080051df 	.word	0x080051df
 800512c:	08005135 	.word	0x08005135
 8005130:	080051a1 	.word	0x080051a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	f240 439d 	movw	r3, #1181	; 0x49d
 8005146:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005148:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800514c:	2b00      	cmp	r3, #0
 800514e:	da10      	bge.n	8005172 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	440a      	add	r2, r1
 8005166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005170:	e057      	b.n	8005222 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d051      	beq.n	8005222 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005198:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800519c:	60d3      	str	r3, [r2, #12]
      break;
 800519e:	e040      	b.n	8005222 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	461a      	mov	r2, r3
 80051ae:	f240 639d 	movw	r3, #1693	; 0x69d
 80051b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da34      	bge.n	8005226 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80051dc:	e023      	b.n	8005226 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	461a      	mov	r2, r3
 80051ec:	f240 2325 	movw	r3, #549	; 0x225
 80051f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	da17      	bge.n	800522a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005218:	60d3      	str	r3, [r2, #12]
      }
      break;
 800521a:	e006      	b.n	800522a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	77fb      	strb	r3, [r7, #31]
      break;
 8005220:	e004      	b.n	800522c <USB_HC_Init+0x14c>
      break;
 8005222:	bf00      	nop
 8005224:	e002      	b.n	800522c <USB_HC_Init+0x14c>
      break;
 8005226:	bf00      	nop
 8005228:	e000      	b.n	800522c <USB_HC_Init+0x14c>
      break;
 800522a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	6939      	ldr	r1, [r7, #16]
 8005242:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005246:	4313      	orrs	r3, r2
 8005248:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005256:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800525a:	2b00      	cmp	r3, #0
 800525c:	da03      	bge.n	8005266 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800525e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e001      	b.n	800526a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ff0f 	bl	800508e <USB_GetHostSpeed>
 8005270:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005272:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005276:	2b02      	cmp	r3, #2
 8005278:	d106      	bne.n	8005288 <USB_HC_Init+0x1a8>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d003      	beq.n	8005288 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e001      	b.n	800528c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800528c:	787b      	ldrb	r3, [r7, #1]
 800528e:	059b      	lsls	r3, r3, #22
 8005290:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005294:	78bb      	ldrb	r3, [r7, #2]
 8005296:	02db      	lsls	r3, r3, #11
 8005298:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800529c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800529e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052a2:	049b      	lsls	r3, r3, #18
 80052a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	440b      	add	r3, r1
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052c8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80052ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d10f      	bne.n	80052f2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08c      	sub	sp, #48	; 0x30
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005318:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d02d      	beq.n	8005382 <USB_HC_StartXfer+0x86>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	791b      	ldrb	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d129      	bne.n	8005382 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d117      	bne.n	8005364 <USB_HC_StartXfer+0x68>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	79db      	ldrb	r3, [r3, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <USB_HC_StartXfer+0x48>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	79db      	ldrb	r3, [r3, #7]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d10f      	bne.n	8005364 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <USB_HC_StartXfer+0x86>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	795b      	ldrb	r3, [r3, #5]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fa2f 	bl	80057dc <USB_DoPing>
      return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e0f8      	b.n	8005574 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	8912      	ldrh	r2, [r2, #8]
 8005392:	4413      	add	r3, r2
 8005394:	3b01      	subs	r3, #1
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	8912      	ldrh	r2, [r2, #8]
 800539a:	fbb3 f3f2 	udiv	r3, r3, r2
 800539e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80053a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053a2:	8b7b      	ldrh	r3, [r7, #26]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d90b      	bls.n	80053c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80053a8:	8b7b      	ldrh	r3, [r7, #26]
 80053aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	8912      	ldrh	r2, [r2, #8]
 80053b2:	fb02 f203 	mul.w	r2, r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	611a      	str	r2, [r3, #16]
 80053ba:	e001      	b.n	80053c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80053bc:	2301      	movs	r3, #1
 80053be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	8912      	ldrh	r2, [r2, #8]
 80053ce:	fb02 f203 	mul.w	r2, r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	611a      	str	r2, [r3, #16]
 80053d6:	e003      	b.n	80053e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ea:	04d9      	lsls	r1, r3, #19
 80053ec:	4b63      	ldr	r3, [pc, #396]	; (800557c <USB_HC_StartXfer+0x280>)
 80053ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	7a9b      	ldrb	r3, [r3, #10]
 80053f6:	075b      	lsls	r3, r3, #29
 80053f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	0148      	lsls	r0, r1, #5
 8005400:	6a39      	ldr	r1, [r7, #32]
 8005402:	4401      	add	r1, r0
 8005404:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005408:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800540a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68d9      	ldr	r1, [r3, #12]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	460a      	mov	r2, r1
 8005424:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	440a      	add	r2, r1
 8005454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005458:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800545c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	7e7b      	ldrb	r3, [r7, #25]
 800546e:	075b      	lsls	r3, r3, #29
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	0148      	lsls	r0, r1, #5
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	4401      	add	r1, r0
 8005478:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005496:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e003      	b.n	80054b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	461a      	mov	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e04e      	b.n	8005574 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	78db      	ldrb	r3, [r3, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d149      	bne.n	8005572 <USB_HC_StartXfer+0x276>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d045      	beq.n	8005572 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	79db      	ldrb	r3, [r3, #7]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d830      	bhi.n	8005550 <USB_HC_StartXfer+0x254>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <USB_HC_StartXfer+0x1f8>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005505 	.word	0x08005505
 80054f8:	08005529 	.word	0x08005529
 80054fc:	08005505 	.word	0x08005505
 8005500:	08005529 	.word	0x08005529
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	3303      	adds	r3, #3
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800550e:	8afa      	ldrh	r2, [r7, #22]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	b29b      	uxth	r3, r3
 8005516:	429a      	cmp	r2, r3
 8005518:	d91c      	bls.n	8005554 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]
        }
        break;
 8005526:	e015      	b.n	8005554 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	3303      	adds	r3, #3
 800552e:	089b      	lsrs	r3, r3, #2
 8005530:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005532:	8afa      	ldrh	r2, [r7, #22]
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	b29b      	uxth	r3, r3
 800553e:	429a      	cmp	r2, r3
 8005540:	d90a      	bls.n	8005558 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	619a      	str	r2, [r3, #24]
        }
        break;
 800554e:	e003      	b.n	8005558 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005550:	bf00      	nop
 8005552:	e002      	b.n	800555a <USB_HC_StartXfer+0x25e>
        break;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <USB_HC_StartXfer+0x25e>
        break;
 8005558:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	785a      	ldrb	r2, [r3, #1]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	b29b      	uxth	r3, r3
 8005568:	2000      	movs	r0, #0
 800556a:	9000      	str	r0, [sp, #0]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff fb7d 	bl	8004c6c <USB_WritePacket>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	1ff80000 	.word	0x1ff80000

08005580 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	b29b      	uxth	r3, r3
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b089      	sub	sp, #36	; 0x24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	0c9b      	lsrs	r3, r3, #18
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	0fdb      	lsrs	r3, r3, #31
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d104      	bne.n	80055fc <USB_HC_Halt+0x5a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e0e8      	b.n	80057ce <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <USB_HC_Halt+0x66>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d173      	bne.n	80056f0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	440a      	add	r2, r1
 800561e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005626:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 80cb 	bne.w	80057cc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d143      	bne.n	80056ca <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005660:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	440a      	add	r2, r1
 8005678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005680:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	440a      	add	r2, r1
 8005698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056a0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3301      	adds	r3, #1
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ae:	d81d      	bhi.n	80056ec <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c6:	d0ec      	beq.n	80056a2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056c8:	e080      	b.n	80057cc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056ea:	e06f      	b.n	80057cc <USB_HC_Halt+0x22a>
            break;
 80056ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056ee:	e06d      	b.n	80057cc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	440a      	add	r2, r1
 8005706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800570a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800570e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d143      	bne.n	80057a8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	440a      	add	r2, r1
 8005736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800573e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800575e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	440a      	add	r2, r1
 8005776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800577e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800578c:	d81d      	bhi.n	80057ca <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a4:	d0ec      	beq.n	8005780 <USB_HC_Halt+0x1de>
 80057a6:	e011      	b.n	80057cc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e000      	b.n	80057cc <USB_HC_Halt+0x22a>
          break;
 80057ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	04da      	lsls	r2, r3, #19
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <USB_DoPing+0x74>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	440a      	add	r2, r1
 8005804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800580c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005824:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800582c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	1ff80000 	.word	0x1ff80000

08005854 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff f960 	bl	8004b2a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800586a:	2110      	movs	r1, #16
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff f9b9 	bl	8004be4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f9da 	bl	8004c2c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
 800587c:	e01f      	b.n	80058be <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005894:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800589c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	461a      	mov	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3301      	adds	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b0f      	cmp	r3, #15
 80058c2:	d9dc      	bls.n	800587e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e034      	b.n	8005934 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	461a      	mov	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3301      	adds	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005910:	d80c      	bhi.n	800592c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005928:	d0ec      	beq.n	8005904 <USB_StopHost+0xb0>
 800592a:	e000      	b.n	800592e <USB_StopHost+0xda>
        break;
 800592c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d9c7      	bls.n	80058ca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005940:	461a      	mov	r2, r3
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff f8d9 	bl	8004b08 <USB_EnableGlobalInt>

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af04      	add	r7, sp, #16
 8005966:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005968:	2301      	movs	r3, #1
 800596a:	2202      	movs	r2, #2
 800596c:	2102      	movs	r1, #2
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fc66 	bl	8006240 <USBH_FindInterface>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2bff      	cmp	r3, #255	; 0xff
 800597c:	d002      	beq.n	8005984 <USBH_CDC_InterfaceInit+0x24>
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d901      	bls.n	8005988 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005984:	2302      	movs	r3, #2
 8005986:	e13d      	b.n	8005c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fc3b 	bl	8006208 <USBH_SelectInterface>
 8005992:	4603      	mov	r3, r0
 8005994:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800599c:	2302      	movs	r3, #2
 800599e:	e131      	b.n	8005c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80059a6:	2050      	movs	r0, #80	; 0x50
 80059a8:	f001 fb12 	bl	8006fd0 <malloc>
 80059ac:	4603      	mov	r3, r0
 80059ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e11f      	b.n	8005c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80059c4:	2250      	movs	r2, #80	; 0x50
 80059c6:	2100      	movs	r1, #0
 80059c8:	68b8      	ldr	r0, [r7, #8]
 80059ca:	f001 fb11 	bl	8006ff0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	211a      	movs	r1, #26
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	4413      	add	r3, r2
 80059da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da15      	bge.n	8005a12 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	211a      	movs	r1, #26
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	211a      	movs	r1, #26
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 ff9c 	bl	8006956 <USBH_AllocPipe>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	7819      	ldrb	r1, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	7858      	ldrb	r0, [r3, #1]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	8952      	ldrh	r2, [r2, #10]
 8005a3e:	9202      	str	r2, [sp, #8]
 8005a40:	2203      	movs	r2, #3
 8005a42:	9201      	str	r2, [sp, #4]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	4623      	mov	r3, r4
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 ff54 	bl	80068f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fa17 	bl	8006e8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	210a      	movs	r1, #10
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fbeb 	bl	8006240 <USBH_FindInterface>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2bff      	cmp	r3, #255	; 0xff
 8005a72:	d002      	beq.n	8005a7a <USBH_CDC_InterfaceInit+0x11a>
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d901      	bls.n	8005a7e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0c2      	b.n	8005c04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	211a      	movs	r1, #26
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	da16      	bge.n	8005ac4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	211a      	movs	r1, #26
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	211a      	movs	r1, #26
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005abc:	881a      	ldrh	r2, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	835a      	strh	r2, [r3, #26]
 8005ac2:	e015      	b.n	8005af0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	211a      	movs	r1, #26
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	211a      	movs	r1, #26
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	211a      	movs	r1, #26
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	b25b      	sxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da16      	bge.n	8005b36 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	211a      	movs	r1, #26
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	211a      	movs	r1, #26
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	835a      	strh	r2, [r3, #26]
 8005b34:	e015      	b.n	8005b62 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	211a      	movs	r1, #26
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	211a      	movs	r1, #26
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	7b9b      	ldrb	r3, [r3, #14]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fef4 	bl	8006956 <USBH_AllocPipe>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	7bdb      	ldrb	r3, [r3, #15]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 feea 	bl	8006956 <USBH_AllocPipe>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	7b59      	ldrb	r1, [r3, #13]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	7b98      	ldrb	r0, [r3, #14]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	8b12      	ldrh	r2, [r2, #24]
 8005ba2:	9202      	str	r2, [sp, #8]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	9201      	str	r2, [sp, #4]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4623      	mov	r3, r4
 8005bac:	4602      	mov	r2, r0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fea2 	bl	80068f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	7b19      	ldrb	r1, [r3, #12]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	7bd8      	ldrb	r0, [r3, #15]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	8b52      	ldrh	r2, [r2, #26]
 8005bcc:	9202      	str	r2, [sp, #8]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	9201      	str	r2, [sp, #4]
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fe8d 	bl	80068f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	7b5b      	ldrb	r3, [r3, #13]
 8005bea:	2200      	movs	r2, #0
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 f94c 	bl	8006e8c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	7b1b      	ldrb	r3, [r3, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f945 	bl	8006e8c <USBH_LL_SetToggle>

  return USBH_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fe82 	bl	8006936 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fead 	bl	8006998 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	7b1b      	ldrb	r3, [r3, #12]
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fe6f 	bl	8006936 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	7b1b      	ldrb	r3, [r3, #12]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fe9a 	bl	8006998 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	7b5b      	ldrb	r3, [r3, #13]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00e      	beq.n	8005c90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	7b5b      	ldrb	r3, [r3, #13]
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fe5c 	bl	8006936 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	7b5b      	ldrb	r3, [r3, #13]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fe87 	bl	8006998 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f99b 	bl	8006fe0 <free>
    phost->pActiveClass->pData = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3340      	adds	r3, #64	; 0x40
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8b1 	bl	8005e3e <GetLineCoding>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005cec:	2102      	movs	r1, #2
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d877      	bhi.n	8005e10 <USBH_CDC_Process+0x114>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <USBH_CDC_Process+0x2c>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d3d 	.word	0x08005d3d
 8005d2c:	08005d43 	.word	0x08005d43
 8005d30:	08005d73 	.word	0x08005d73
 8005d34:	08005de7 	.word	0x08005de7
 8005d38:	08005df5 	.word	0x08005df5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e06d      	b.n	8005e1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f897 	bl	8005e7c <SetLineCoding>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d60:	e058      	b.n	8005e14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d055      	beq.n	8005e14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d70:	e050      	b.n	8005e14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3340      	adds	r3, #64	; 0x40
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f860 	bl	8005e3e <GetLineCoding>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d126      	bne.n	8005dd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d13b      	bne.n	8005e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005daa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d133      	bne.n	8005e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d12b      	bne.n	8005e18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d124      	bne.n	8005e18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f958 	bl	8006084 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005dd4:	e020      	b.n	8005e18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005dd6:	7bbb      	ldrb	r3, [r7, #14]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d01d      	beq.n	8005e18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005de4:	e018      	b.n	8005e18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f867 	bl	8005eba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8da 	bl	8005fa6 <CDC_ProcessReception>
      break;
 8005df2:	e014      	b.n	8005e1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005df4:	2100      	movs	r1, #0
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fb08 	bl	800640c <USBH_ClrFeature>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005e0e:	e005      	b.n	8005e1c <USBH_CDC_Process+0x120>

    default:
      break;
 8005e10:	bf00      	nop
 8005e12:	e004      	b.n	8005e1e <USBH_CDC_Process+0x122>
      break;
 8005e14:	bf00      	nop
 8005e16:	e002      	b.n	8005e1e <USBH_CDC_Process+0x122>
      break;
 8005e18:	bf00      	nop
 8005e1a:	e000      	b.n	8005e1e <USBH_CDC_Process+0x122>
      break;
 8005e1c:	bf00      	nop

  }

  return status;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	22a1      	movs	r2, #161	; 0xa1
 8005e4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2221      	movs	r2, #33	; 0x21
 8005e52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2207      	movs	r2, #7
 8005e64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2207      	movs	r2, #7
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 faf1 	bl	8006454 <USBH_CtlReq>
 8005e72:	4603      	mov	r3, r0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2221      	movs	r2, #33	; 0x21
 8005e8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2207      	movs	r2, #7
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fad2 	bl	8006454 <USBH_CtlReq>
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b086      	sub	sp, #24
 8005ebe:	af02      	add	r7, sp, #8
 8005ec0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d002      	beq.n	8005ee0 <CDC_ProcessTransmission+0x26>
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d023      	beq.n	8005f26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005ede:	e05e      	b.n	8005f9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	8b12      	ldrh	r2, [r2, #24]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d90b      	bls.n	8005f04 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8b1a      	ldrh	r2, [r3, #24]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	7b5b      	ldrb	r3, [r3, #13]
 8005ef8:	2001      	movs	r0, #1
 8005efa:	9000      	str	r0, [sp, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fcb8 	bl	8006872 <USBH_BulkSendData>
 8005f02:	e00b      	b.n	8005f1c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	7b5b      	ldrb	r3, [r3, #13]
 8005f12:	2001      	movs	r0, #1
 8005f14:	9000      	str	r0, [sp, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fcab 	bl	8006872 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f24:	e03b      	b.n	8005f9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	7b5b      	ldrb	r3, [r3, #13]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 ff83 	bl	8006e38 <USBH_LL_GetURBState>
 8005f32:	4603      	mov	r3, r0
 8005f34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d128      	bne.n	8005f8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	8b12      	ldrh	r2, [r2, #24]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d90e      	bls.n	8005f66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	8b12      	ldrh	r2, [r2, #24]
 8005f50:	1a9a      	subs	r2, r3, r2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	8b12      	ldrh	r2, [r2, #24]
 8005f5e:	441a      	add	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	61da      	str	r2, [r3, #28]
 8005f64:	e002      	b.n	8005f6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f7c:	e00e      	b.n	8005f9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f868 	bl	800605c <USBH_CDC_TransmitCallback>
      break;
 8005f8c:	e006      	b.n	8005f9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d103      	bne.n	8005f9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f9c:	bf00      	nop
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b086      	sub	sp, #24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d002      	beq.n	8005fcc <CDC_ProcessReception+0x26>
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d00e      	beq.n	8005fe8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005fca:	e043      	b.n	8006054 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	6a19      	ldr	r1, [r3, #32]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	8b5a      	ldrh	r2, [r3, #26]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	7b1b      	ldrb	r3, [r3, #12]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc6f 	bl	80068bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005fe6:	e035      	b.n	8006054 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	7b1b      	ldrb	r3, [r3, #12]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 ff22 	bl	8006e38 <USBH_LL_GetURBState>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d129      	bne.n	8006052 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	7b1b      	ldrb	r3, [r3, #12]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fe85 	bl	8006d14 <USBH_LL_GetLastXferSize>
 800600a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	429a      	cmp	r2, r3
 8006014:	d016      	beq.n	8006044 <CDC_ProcessReception+0x9e>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	8b5b      	ldrh	r3, [r3, #26]
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4293      	cmp	r3, r2
 8006020:	d910      	bls.n	8006044 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad2      	subs	r2, r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	441a      	add	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006042:	e006      	b.n	8006052 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f80f 	bl	8006070 <USBH_CDC_ReceiveCallback>
      break;
 8006052:	bf00      	nop
  }
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e029      	b.n	8006104 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	79fa      	ldrb	r2, [r7, #7]
 80060b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f81f 	bl	800610c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 fd97 	bl	8006c30 <USBH_LL_Init>

  return USBH_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e009      	b.n	8006132 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	33e0      	adds	r3, #224	; 0xe0
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	2200      	movs	r2, #0
 800612a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b0e      	cmp	r3, #14
 8006136:	d9f2      	bls.n	800611e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e009      	b.n	8006152 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d3f1      	bcc.n	800613e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2240      	movs	r2, #64	; 0x40
 800617e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d016      	beq.n	80061f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	33de      	adds	r3, #222	; 0xde
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
 80061ee:	e004      	b.n	80061fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80061f0:	2302      	movs	r3, #2
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e001      	b.n	80061fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80061f6:	2302      	movs	r3, #2
 80061f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	429a      	cmp	r2, r3
 8006222:	d204      	bcs.n	800622e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800622c:	e001      	b.n	8006232 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800622e:	2302      	movs	r3, #2
 8006230:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	461a      	mov	r2, r3
 800624e:	4603      	mov	r3, r0
 8006250:	70fb      	strb	r3, [r7, #3]
 8006252:	460b      	mov	r3, r1
 8006254:	70bb      	strb	r3, [r7, #2]
 8006256:	4613      	mov	r3, r2
 8006258:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006268:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800626a:	e025      	b.n	80062b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	221a      	movs	r2, #26
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	3308      	adds	r3, #8
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	3302      	adds	r3, #2
 800627c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	795b      	ldrb	r3, [r3, #5]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	429a      	cmp	r2, r3
 8006286:	d002      	beq.n	800628e <USBH_FindInterface+0x4e>
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	2bff      	cmp	r3, #255	; 0xff
 800628c:	d111      	bne.n	80062b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006292:	78ba      	ldrb	r2, [r7, #2]
 8006294:	429a      	cmp	r2, r3
 8006296:	d002      	beq.n	800629e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006298:	78bb      	ldrb	r3, [r7, #2]
 800629a:	2bff      	cmp	r3, #255	; 0xff
 800629c:	d109      	bne.n	80062b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062a2:	787a      	ldrb	r2, [r7, #1]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d002      	beq.n	80062ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062a8:	787b      	ldrb	r3, [r7, #1]
 80062aa:	2bff      	cmp	r3, #255	; 0xff
 80062ac:	d101      	bne.n	80062b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	e006      	b.n	80062c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	3301      	adds	r3, #1
 80062b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d9d6      	bls.n	800626c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80062be:	23ff      	movs	r3, #255	; 0xff
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fce7 	bl	8006ca8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fdbe 	bl	8006e5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f804 	bl	800632e <USBH_HandleSof>
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b0b      	cmp	r3, #11
 800633e:	d10a      	bne.n	8006356 <USBH_HandleSof+0x28>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
  }
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800636e:	bf00      	nop
}
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800638a:	bf00      	nop
}
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fc7a 	bl	8006cde <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	791b      	ldrb	r3, [r3, #4]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fad1 	bl	8006998 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 facb 	bl	8006998 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	789b      	ldrb	r3, [r3, #2]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10f      	bne.n	8006440 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006440:	2200      	movs	r2, #0
 8006442:	2100      	movs	r1, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f805 	bl	8006454 <USBH_CtlReq>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	789b      	ldrb	r3, [r3, #2]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d002      	beq.n	8006474 <USBH_CtlReq+0x20>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d00f      	beq.n	8006492 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006472:	e027      	b.n	80064c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2202      	movs	r2, #2
 800648a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800648c:	2301      	movs	r3, #1
 800648e:	75fb      	strb	r3, [r7, #23]
      break;
 8006490:	e018      	b.n	80064c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f81c 	bl	80064d0 <USBH_HandleControl>
 8006498:	4603      	mov	r3, r0
 800649a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <USBH_CtlReq+0x54>
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d106      	bne.n	80064b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2201      	movs	r2, #1
 80064ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	761a      	strb	r2, [r3, #24]
      break;
 80064b4:	e005      	b.n	80064c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d102      	bne.n	80064c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	709a      	strb	r2, [r3, #2]
      break;
 80064c2:	bf00      	nop
  }
  return status;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7e1b      	ldrb	r3, [r3, #24]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	2b0a      	cmp	r3, #10
 80064e8:	f200 8156 	bhi.w	8006798 <USBH_HandleControl+0x2c8>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <USBH_HandleControl+0x24>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006521 	.word	0x08006521
 80064f8:	0800653b 	.word	0x0800653b
 80064fc:	080065a5 	.word	0x080065a5
 8006500:	080065cb 	.word	0x080065cb
 8006504:	08006603 	.word	0x08006603
 8006508:	0800662d 	.word	0x0800662d
 800650c:	0800667f 	.word	0x0800667f
 8006510:	080066a1 	.word	0x080066a1
 8006514:	080066dd 	.word	0x080066dd
 8006518:	08006703 	.word	0x08006703
 800651c:	08006741 	.word	0x08006741
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f103 0110 	add.w	r1, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	795b      	ldrb	r3, [r3, #5]
 800652a:	461a      	mov	r2, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f943 	bl	80067b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	761a      	strb	r2, [r3, #24]
      break;
 8006538:	e139      	b.n	80067ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	795b      	ldrb	r3, [r3, #5]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fc79 	bl	8006e38 <USBH_LL_GetURBState>
 8006546:	4603      	mov	r3, r0
 8006548:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d11e      	bne.n	800658e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7c1b      	ldrb	r3, [r3, #16]
 8006554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006558:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8adb      	ldrh	r3, [r3, #22]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006562:	7b7b      	ldrb	r3, [r7, #13]
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d103      	bne.n	8006570 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2203      	movs	r2, #3
 800656c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800656e:	e115      	b.n	800679c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2205      	movs	r2, #5
 8006574:	761a      	strb	r2, [r3, #24]
      break;
 8006576:	e111      	b.n	800679c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006578:	7b7b      	ldrb	r3, [r7, #13]
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d103      	bne.n	8006586 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2209      	movs	r2, #9
 8006582:	761a      	strb	r2, [r3, #24]
      break;
 8006584:	e10a      	b.n	800679c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2207      	movs	r2, #7
 800658a:	761a      	strb	r2, [r3, #24]
      break;
 800658c:	e106      	b.n	800679c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800658e:	7bbb      	ldrb	r3, [r7, #14]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d003      	beq.n	800659c <USBH_HandleControl+0xcc>
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b02      	cmp	r3, #2
 8006598:	f040 8100 	bne.w	800679c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	220b      	movs	r2, #11
 80065a0:	761a      	strb	r2, [r3, #24]
      break;
 80065a2:	e0fb      	b.n	800679c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6899      	ldr	r1, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	899a      	ldrh	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	791b      	ldrb	r3, [r3, #4]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f93a 	bl	8006836 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2204      	movs	r2, #4
 80065c6:	761a      	strb	r2, [r3, #24]
      break;
 80065c8:	e0f1      	b.n	80067ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	791b      	ldrb	r3, [r3, #4]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fc31 	bl	8006e38 <USBH_LL_GetURBState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2209      	movs	r2, #9
 80065e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d102      	bne.n	80065f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80065ec:	2303      	movs	r3, #3
 80065ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80065f0:	e0d6      	b.n	80067a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	f040 80d3 	bne.w	80067a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	220b      	movs	r2, #11
 80065fe:	761a      	strb	r2, [r3, #24]
      break;
 8006600:	e0ce      	b.n	80067a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	899a      	ldrh	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	795b      	ldrb	r3, [r3, #5]
 800660e:	2001      	movs	r0, #1
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8ea 	bl	80067ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2206      	movs	r2, #6
 8006628:	761a      	strb	r2, [r3, #24]
      break;
 800662a:	e0c0      	b.n	80067ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	795b      	ldrb	r3, [r3, #5]
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc00 	bl	8006e38 <USBH_LL_GetURBState>
 8006638:	4603      	mov	r3, r0
 800663a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d103      	bne.n	800664a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2207      	movs	r2, #7
 8006646:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006648:	e0ac      	b.n	80067a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b05      	cmp	r3, #5
 800664e:	d105      	bne.n	800665c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	220c      	movs	r2, #12
 8006654:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006656:	2303      	movs	r3, #3
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e0a3      	b.n	80067a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2205      	movs	r2, #5
 8006666:	761a      	strb	r2, [r3, #24]
      break;
 8006668:	e09c      	b.n	80067a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b04      	cmp	r3, #4
 800666e:	f040 8099 	bne.w	80067a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	220b      	movs	r2, #11
 8006676:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	73fb      	strb	r3, [r7, #15]
      break;
 800667c:	e092      	b.n	80067a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	2100      	movs	r1, #0
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8d5 	bl	8006836 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2208      	movs	r2, #8
 800669c:	761a      	strb	r2, [r3, #24]

      break;
 800669e:	e086      	b.n	80067ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	791b      	ldrb	r3, [r3, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fbc6 	bl	8006e38 <USBH_LL_GetURBState>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d105      	bne.n	80066c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	220d      	movs	r2, #13
 80066ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80066c0:	e072      	b.n	80067a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d103      	bne.n	80066d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	220b      	movs	r2, #11
 80066cc:	761a      	strb	r2, [r3, #24]
      break;
 80066ce:	e06b      	b.n	80067a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d168      	bne.n	80067a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80066d6:	2303      	movs	r3, #3
 80066d8:	73fb      	strb	r3, [r7, #15]
      break;
 80066da:	e065      	b.n	80067a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	795b      	ldrb	r3, [r3, #5]
 80066e0:	2201      	movs	r2, #1
 80066e2:	9200      	str	r2, [sp, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f87f 	bl	80067ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	220a      	movs	r2, #10
 80066fe:	761a      	strb	r2, [r3, #24]
      break;
 8006700:	e055      	b.n	80067ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	795b      	ldrb	r3, [r3, #5]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb95 	bl	8006e38 <USBH_LL_GetURBState>
 800670e:	4603      	mov	r3, r0
 8006710:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d105      	bne.n	8006724 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	220d      	movs	r2, #13
 8006720:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006722:	e043      	b.n	80067ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d103      	bne.n	8006732 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2209      	movs	r2, #9
 800672e:	761a      	strb	r2, [r3, #24]
      break;
 8006730:	e03c      	b.n	80067ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d139      	bne.n	80067ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	220b      	movs	r2, #11
 800673c:	761a      	strb	r2, [r3, #24]
      break;
 800673e:	e035      	b.n	80067ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7e5b      	ldrb	r3, [r3, #25]
 8006744:	3301      	adds	r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	765a      	strb	r2, [r3, #25]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	7e5b      	ldrb	r3, [r3, #25]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d806      	bhi.n	8006762 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006760:	e025      	b.n	80067ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006768:	2106      	movs	r1, #6
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	795b      	ldrb	r3, [r3, #5]
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f90c 	bl	8006998 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f906 	bl	8006998 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006792:	2302      	movs	r3, #2
 8006794:	73fb      	strb	r3, [r7, #15]
      break;
 8006796:	e00a      	b.n	80067ae <USBH_HandleControl+0x2de>

    default:
      break;
 8006798:	bf00      	nop
 800679a:	e008      	b.n	80067ae <USBH_HandleControl+0x2de>
      break;
 800679c:	bf00      	nop
 800679e:	e006      	b.n	80067ae <USBH_HandleControl+0x2de>
      break;
 80067a0:	bf00      	nop
 80067a2:	e004      	b.n	80067ae <USBH_HandleControl+0x2de>
      break;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <USBH_HandleControl+0x2de>
      break;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <USBH_HandleControl+0x2de>
      break;
 80067ac:	bf00      	nop
  }

  return status;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af04      	add	r7, sp, #16
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80067c6:	79f9      	ldrb	r1, [r7, #7]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9303      	str	r3, [sp, #12]
 80067cc:	2308      	movs	r3, #8
 80067ce:	9302      	str	r3, [sp, #8]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	2300      	movs	r3, #0
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fafa 	bl	8006dd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af04      	add	r7, sp, #16
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4611      	mov	r1, r2
 80067f8:	461a      	mov	r2, r3
 80067fa:	460b      	mov	r3, r1
 80067fc:	80fb      	strh	r3, [r7, #6]
 80067fe:	4613      	mov	r3, r2
 8006800:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006810:	7979      	ldrb	r1, [r7, #5]
 8006812:	7e3b      	ldrb	r3, [r7, #24]
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	2301      	movs	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	2200      	movs	r2, #0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fad5 	bl	8006dd6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b088      	sub	sp, #32
 800683a:	af04      	add	r7, sp, #16
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	4611      	mov	r1, r2
 8006842:	461a      	mov	r2, r3
 8006844:	460b      	mov	r3, r1
 8006846:	80fb      	strh	r3, [r7, #6]
 8006848:	4613      	mov	r3, r2
 800684a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800684c:	7979      	ldrb	r1, [r7, #5]
 800684e:	2300      	movs	r3, #0
 8006850:	9303      	str	r3, [sp, #12]
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	9302      	str	r3, [sp, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2301      	movs	r3, #1
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2201      	movs	r2, #1
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fab7 	bl	8006dd6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006868:	2300      	movs	r3, #0

}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af04      	add	r7, sp, #16
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	4611      	mov	r1, r2
 800687e:	461a      	mov	r2, r3
 8006880:	460b      	mov	r3, r1
 8006882:	80fb      	strh	r3, [r7, #6]
 8006884:	4613      	mov	r3, r2
 8006886:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006896:	7979      	ldrb	r1, [r7, #5]
 8006898:	7e3b      	ldrb	r3, [r7, #24]
 800689a:	9303      	str	r3, [sp, #12]
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	9302      	str	r3, [sp, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	2301      	movs	r3, #1
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2302      	movs	r3, #2
 80068aa:	2200      	movs	r2, #0
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa92 	bl	8006dd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af04      	add	r7, sp, #16
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4611      	mov	r1, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	460b      	mov	r3, r1
 80068cc:	80fb      	strh	r3, [r7, #6]
 80068ce:	4613      	mov	r3, r2
 80068d0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80068d2:	7979      	ldrb	r1, [r7, #5]
 80068d4:	2300      	movs	r3, #0
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	88fb      	ldrh	r3, [r7, #6]
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2302      	movs	r3, #2
 80068e6:	2201      	movs	r2, #1
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fa74 	bl	8006dd6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af04      	add	r7, sp, #16
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4603      	mov	r3, r0
 8006908:	70fb      	strb	r3, [r7, #3]
 800690a:	460b      	mov	r3, r1
 800690c:	70bb      	strb	r3, [r7, #2]
 800690e:	4613      	mov	r3, r2
 8006910:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006912:	7878      	ldrb	r0, [r7, #1]
 8006914:	78ba      	ldrb	r2, [r7, #2]
 8006916:	78f9      	ldrb	r1, [r7, #3]
 8006918:	8b3b      	ldrh	r3, [r7, #24]
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	7d3b      	ldrb	r3, [r7, #20]
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	7c3b      	ldrb	r3, [r7, #16]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4603      	mov	r3, r0
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa07 	bl	8006d3a <USBH_LL_OpenPipe>

  return USBH_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa26 	bl	8006d98 <USBH_LL_ClosePipe>

  return USBH_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	460b      	mov	r3, r1
 8006960:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f836 	bl	80069d4 <USBH_GetFreePipe>
 8006968:	4603      	mov	r3, r0
 800696a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800696c:	89fb      	ldrh	r3, [r7, #14]
 800696e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006972:	4293      	cmp	r3, r2
 8006974:	d00a      	beq.n	800698c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	33e0      	adds	r3, #224	; 0xe0
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800698c:	89fb      	ldrh	r3, [r7, #14]
 800698e:	b2db      	uxtb	r3, r3
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	2b0a      	cmp	r3, #10
 80069a8:	d80d      	bhi.n	80069c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	33e0      	adds	r3, #224	; 0xe0
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	33e0      	adds	r3, #224	; 0xe0
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e00f      	b.n	8006a06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	33e0      	adds	r3, #224	; 0xe0
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	e007      	b.n	8006a10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	3301      	adds	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b0a      	cmp	r3, #10
 8006a0a:	d9ec      	bls.n	80069e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006a20:	2201      	movs	r2, #1
 8006a22:	490e      	ldr	r1, [pc, #56]	; (8006a5c <MX_USB_HOST_Init+0x40>)
 8006a24:	480e      	ldr	r0, [pc, #56]	; (8006a60 <MX_USB_HOST_Init+0x44>)
 8006a26:	f7ff fb37 	bl	8006098 <USBH_Init>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006a30:	f7fa f966 	bl	8000d00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006a34:	490b      	ldr	r1, [pc, #44]	; (8006a64 <MX_USB_HOST_Init+0x48>)
 8006a36:	480a      	ldr	r0, [pc, #40]	; (8006a60 <MX_USB_HOST_Init+0x44>)
 8006a38:	f7ff fbbc 	bl	80061b4 <USBH_RegisterClass>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006a42:	f7fa f95d 	bl	8000d00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006a46:	4806      	ldr	r0, [pc, #24]	; (8006a60 <MX_USB_HOST_Init+0x44>)
 8006a48:	f7ff fc40 	bl	80062cc <USBH_Start>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006a52:	f7fa f955 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08006a69 	.word	0x08006a69
 8006a60:	200001b4 	.word	0x200001b4
 8006a64:	2000000c 	.word	0x2000000c

08006a68 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d819      	bhi.n	8006ab0 <USBH_UserProcess+0x48>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBH_UserProcess+0x1c>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006aa9 	.word	0x08006aa9
 8006a94:	08006a99 	.word	0x08006a99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006a98:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <USBH_UserProcess+0x58>)
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	701a      	strb	r2, [r3, #0]
  break;
 8006a9e:	e008      	b.n	8006ab2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <USBH_UserProcess+0x58>)
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	701a      	strb	r2, [r3, #0]
  break;
 8006aa6:	e004      	b.n	8006ab2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <USBH_UserProcess+0x58>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
  break;
 8006aae:	e000      	b.n	8006ab2 <USBH_UserProcess+0x4a>

  default:
  break;
 8006ab0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	200000b0 	.word	0x200000b0

08006ac4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae4:	d147      	bne.n	8006b76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	4a24      	ldr	r2, [pc, #144]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	6313      	str	r3, [r2, #48]	; 0x30
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006b10:	f107 0314 	add.w	r3, r7, #20
 8006b14:	4619      	mov	r1, r3
 8006b16:	481b      	ldr	r0, [pc, #108]	; (8006b84 <HAL_HCD_MspInit+0xc0>)
 8006b18:	f7fa fc7e 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006b1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b22:	2302      	movs	r3, #2
 8006b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b2e:	230a      	movs	r3, #10
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	4619      	mov	r1, r3
 8006b38:	4812      	ldr	r0, [pc, #72]	; (8006b84 <HAL_HCD_MspInit+0xc0>)
 8006b3a:	f7fa fc6d 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b3e:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	4a0f      	ldr	r2, [pc, #60]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b48:	6353      	str	r3, [r2, #52]	; 0x34
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b58:	6453      	str	r3, [r2, #68]	; 0x44
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <HAL_HCD_MspInit+0xbc>)
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b66:	2200      	movs	r2, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	2043      	movs	r0, #67	; 0x43
 8006b6c:	f7fa fc1d 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b70:	2043      	movs	r0, #67	; 0x43
 8006b72:	f7fa fc36 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b76:	bf00      	nop
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40020000 	.word	0x40020000

08006b88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fbb7 	bl	800630a <USBH_LL_IncTimer>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fbef 	bl	8006396 <USBH_LL_Connect>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fbf8 	bl	80063c4 <USBH_LL_Disconnect>
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
 8006be8:	4613      	mov	r3, r2
 8006bea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fba9 	bl	800635e <USBH_LL_PortEnabled>
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fba9 	bl	800637a <USBH_LL_PortDisabled>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d12a      	bne.n	8006c98 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006c42:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c4e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c58:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006c5a:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c66:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c6e:	2202      	movs	r2, #2
 8006c70:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006c78:	480a      	ldr	r0, [pc, #40]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c7a:	f7fa fd82 	bl	8001782 <HAL_HCD_Init>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006c84:	f7fa f83c 	bl	8000d00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006c88:	4806      	ldr	r0, [pc, #24]	; (8006ca4 <USBH_LL_Init+0x74>)
 8006c8a:	f7fb f958 	bl	8001f3e <HAL_HCD_GetCurrentFrame>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fb2a 	bl	80062ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	2000058c 	.word	0x2000058c

08006ca8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fb f8d5 	bl	8001e6e <HAL_HCD_Start>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f90e 	bl	8006eec <USBH_Get_USB_Status>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fb f8dd 	bl	8001eb4 <HAL_HCD_Stop>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f8f3 	bl	8006eec <USBH_Get_USB_Status>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fb f8f3 	bl	8001f16 <HAL_HCD_HC_GetXferCount>
 8006d30:	4603      	mov	r3, r0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006d3a:	b590      	push	{r4, r7, lr}
 8006d3c:	b089      	sub	sp, #36	; 0x24
 8006d3e:	af04      	add	r7, sp, #16
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	4608      	mov	r0, r1
 8006d44:	4611      	mov	r1, r2
 8006d46:	461a      	mov	r2, r3
 8006d48:	4603      	mov	r3, r0
 8006d4a:	70fb      	strb	r3, [r7, #3]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70bb      	strb	r3, [r7, #2]
 8006d50:	4613      	mov	r3, r2
 8006d52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006d62:	787c      	ldrb	r4, [r7, #1]
 8006d64:	78ba      	ldrb	r2, [r7, #2]
 8006d66:	78f9      	ldrb	r1, [r7, #3]
 8006d68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d6a:	9302      	str	r3, [sp, #8]
 8006d6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4623      	mov	r3, r4
 8006d7a:	f7fa fd64 	bl	8001846 <HAL_HCD_HC_Init>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 f8b1 	bl	8006eec <USBH_Get_USB_Status>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd90      	pop	{r4, r7, pc}

08006d98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fa fdd4 	bl	8001964 <HAL_HCD_HC_Halt>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f892 	bl	8006eec <USBH_Get_USB_Status>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006dd6:	b590      	push	{r4, r7, lr}
 8006dd8:	b089      	sub	sp, #36	; 0x24
 8006dda:	af04      	add	r7, sp, #16
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	461a      	mov	r2, r3
 8006de4:	4603      	mov	r3, r0
 8006de6:	70fb      	strb	r3, [r7, #3]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70bb      	strb	r3, [r7, #2]
 8006dec:	4613      	mov	r3, r2
 8006dee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006dfe:	787c      	ldrb	r4, [r7, #1]
 8006e00:	78ba      	ldrb	r2, [r7, #2]
 8006e02:	78f9      	ldrb	r1, [r7, #3]
 8006e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e08:	9303      	str	r3, [sp, #12]
 8006e0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e0c:	9302      	str	r3, [sp, #8]
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4623      	mov	r3, r4
 8006e1a:	f7fa fdc7 	bl	80019ac <HAL_HCD_HC_SubmitRequest>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 f861 	bl	8006eec <USBH_Get_USB_Status>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e4a:	78fa      	ldrb	r2, [r7, #3]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fb f84d 	bl	8001eee <HAL_HCD_HC_GetURBState>
 8006e54:	4603      	mov	r3, r0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d103      	bne.n	8006e7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 f864 	bl	8006f44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006e7c:	20c8      	movs	r0, #200	; 0xc8
 8006e7e:	f7fa f995 	bl	80011ac <HAL_Delay>
  return USBH_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ea2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	212c      	movs	r1, #44	; 0x2c
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	333b      	adds	r3, #59	; 0x3b
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	212c      	movs	r1, #44	; 0x2c
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3354      	adds	r3, #84	; 0x54
 8006ec6:	78ba      	ldrb	r2, [r7, #2]
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	e008      	b.n	8006ede <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	212c      	movs	r1, #44	; 0x2c
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3355      	adds	r3, #85	; 0x55
 8006eda:	78ba      	ldrb	r2, [r7, #2]
 8006edc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d817      	bhi.n	8006f30 <USBH_Get_USB_Status+0x44>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBH_Get_USB_Status+0x1c>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f1f 	.word	0x08006f1f
 8006f10:	08006f25 	.word	0x08006f25
 8006f14:	08006f2b 	.word	0x08006f2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f1c:	e00b      	b.n	8006f36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	73fb      	strb	r3, [r7, #15]
    break;
 8006f22:	e008      	b.n	8006f36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
    break;
 8006f28:	e005      	b.n	8006f36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2e:	e002      	b.n	8006f36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006f30:	2302      	movs	r3, #2
 8006f32:	73fb      	strb	r3, [r7, #15]
    break;
 8006f34:	bf00      	nop
  }
  return usb_status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	73fb      	strb	r3, [r7, #15]
 8006f5c:	e001      	b.n	8006f62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	461a      	mov	r2, r3
 8006f66:	2101      	movs	r1, #1
 8006f68:	4803      	ldr	r0, [pc, #12]	; (8006f78 <MX_DriverVbusFS+0x34>)
 8006f6a:	f7fa fbf1 	bl	8001750 <HAL_GPIO_WritePin>
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40020800 	.word	0x40020800

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	; (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000002c 	.word	0x2000002c

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	; (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	; (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	; (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	; (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 f8f8 	bl	8007190 <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	08007208 	.word	0x08007208
 8006fc4:	08007208 	.word	0x08007208
 8006fc8:	08007208 	.word	0x08007208
 8006fcc:	0800720c 	.word	0x0800720c

08006fd0 <malloc>:
 8006fd0:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <malloc+0xc>)
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	f000 b863 	b.w	80070a0 <_malloc_r>
 8006fda:	bf00      	nop
 8006fdc:	2000002c 	.word	0x2000002c

08006fe0 <free>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <free+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f000 b80b 	b.w	8007000 <_free_r>
 8006fea:	bf00      	nop
 8006fec:	2000002c 	.word	0x2000002c

08006ff0 <memset>:
 8006ff0:	4402      	add	r2, r0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d100      	bne.n	8006ffa <memset+0xa>
 8006ff8:	4770      	bx	lr
 8006ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffe:	e7f9      	b.n	8006ff4 <memset+0x4>

08007000 <_free_r>:
 8007000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007002:	2900      	cmp	r1, #0
 8007004:	d048      	beq.n	8007098 <_free_r+0x98>
 8007006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700a:	9001      	str	r0, [sp, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f1a1 0404 	sub.w	r4, r1, #4
 8007012:	bfb8      	it	lt
 8007014:	18e4      	addlt	r4, r4, r3
 8007016:	f000 f8ad 	bl	8007174 <__malloc_lock>
 800701a:	4a20      	ldr	r2, [pc, #128]	; (800709c <_free_r+0x9c>)
 800701c:	9801      	ldr	r0, [sp, #4]
 800701e:	6813      	ldr	r3, [r2, #0]
 8007020:	4615      	mov	r5, r2
 8007022:	b933      	cbnz	r3, 8007032 <_free_r+0x32>
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	6014      	str	r4, [r2, #0]
 8007028:	b003      	add	sp, #12
 800702a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800702e:	f000 b8a7 	b.w	8007180 <__malloc_unlock>
 8007032:	42a3      	cmp	r3, r4
 8007034:	d90b      	bls.n	800704e <_free_r+0x4e>
 8007036:	6821      	ldr	r1, [r4, #0]
 8007038:	1862      	adds	r2, r4, r1
 800703a:	4293      	cmp	r3, r2
 800703c:	bf04      	itt	eq
 800703e:	681a      	ldreq	r2, [r3, #0]
 8007040:	685b      	ldreq	r3, [r3, #4]
 8007042:	6063      	str	r3, [r4, #4]
 8007044:	bf04      	itt	eq
 8007046:	1852      	addeq	r2, r2, r1
 8007048:	6022      	streq	r2, [r4, #0]
 800704a:	602c      	str	r4, [r5, #0]
 800704c:	e7ec      	b.n	8007028 <_free_r+0x28>
 800704e:	461a      	mov	r2, r3
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b10b      	cbz	r3, 8007058 <_free_r+0x58>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d9fa      	bls.n	800704e <_free_r+0x4e>
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	1855      	adds	r5, r2, r1
 800705c:	42a5      	cmp	r5, r4
 800705e:	d10b      	bne.n	8007078 <_free_r+0x78>
 8007060:	6824      	ldr	r4, [r4, #0]
 8007062:	4421      	add	r1, r4
 8007064:	1854      	adds	r4, r2, r1
 8007066:	42a3      	cmp	r3, r4
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	d1dd      	bne.n	8007028 <_free_r+0x28>
 800706c:	681c      	ldr	r4, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	6053      	str	r3, [r2, #4]
 8007072:	4421      	add	r1, r4
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	e7d7      	b.n	8007028 <_free_r+0x28>
 8007078:	d902      	bls.n	8007080 <_free_r+0x80>
 800707a:	230c      	movs	r3, #12
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	e7d3      	b.n	8007028 <_free_r+0x28>
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1961      	adds	r1, r4, r5
 8007084:	428b      	cmp	r3, r1
 8007086:	bf04      	itt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	bf04      	itt	eq
 8007090:	1949      	addeq	r1, r1, r5
 8007092:	6021      	streq	r1, [r4, #0]
 8007094:	6054      	str	r4, [r2, #4]
 8007096:	e7c7      	b.n	8007028 <_free_r+0x28>
 8007098:	b003      	add	sp, #12
 800709a:	bd30      	pop	{r4, r5, pc}
 800709c:	200000b4 	.word	0x200000b4

080070a0 <_malloc_r>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	1ccd      	adds	r5, r1, #3
 80070a4:	f025 0503 	bic.w	r5, r5, #3
 80070a8:	3508      	adds	r5, #8
 80070aa:	2d0c      	cmp	r5, #12
 80070ac:	bf38      	it	cc
 80070ae:	250c      	movcc	r5, #12
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	4606      	mov	r6, r0
 80070b4:	db01      	blt.n	80070ba <_malloc_r+0x1a>
 80070b6:	42a9      	cmp	r1, r5
 80070b8:	d903      	bls.n	80070c2 <_malloc_r+0x22>
 80070ba:	230c      	movs	r3, #12
 80070bc:	6033      	str	r3, [r6, #0]
 80070be:	2000      	movs	r0, #0
 80070c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c2:	f000 f857 	bl	8007174 <__malloc_lock>
 80070c6:	4921      	ldr	r1, [pc, #132]	; (800714c <_malloc_r+0xac>)
 80070c8:	680a      	ldr	r2, [r1, #0]
 80070ca:	4614      	mov	r4, r2
 80070cc:	b99c      	cbnz	r4, 80070f6 <_malloc_r+0x56>
 80070ce:	4f20      	ldr	r7, [pc, #128]	; (8007150 <_malloc_r+0xb0>)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	b923      	cbnz	r3, 80070de <_malloc_r+0x3e>
 80070d4:	4621      	mov	r1, r4
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 f83c 	bl	8007154 <_sbrk_r>
 80070dc:	6038      	str	r0, [r7, #0]
 80070de:	4629      	mov	r1, r5
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f837 	bl	8007154 <_sbrk_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d123      	bne.n	8007132 <_malloc_r+0x92>
 80070ea:	230c      	movs	r3, #12
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f846 	bl	8007180 <__malloc_unlock>
 80070f4:	e7e3      	b.n	80070be <_malloc_r+0x1e>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	1b5b      	subs	r3, r3, r5
 80070fa:	d417      	bmi.n	800712c <_malloc_r+0x8c>
 80070fc:	2b0b      	cmp	r3, #11
 80070fe:	d903      	bls.n	8007108 <_malloc_r+0x68>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	441c      	add	r4, r3
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	e004      	b.n	8007112 <_malloc_r+0x72>
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	42a2      	cmp	r2, r4
 800710c:	bf0c      	ite	eq
 800710e:	600b      	streq	r3, [r1, #0]
 8007110:	6053      	strne	r3, [r2, #4]
 8007112:	4630      	mov	r0, r6
 8007114:	f000 f834 	bl	8007180 <__malloc_unlock>
 8007118:	f104 000b 	add.w	r0, r4, #11
 800711c:	1d23      	adds	r3, r4, #4
 800711e:	f020 0007 	bic.w	r0, r0, #7
 8007122:	1ac2      	subs	r2, r0, r3
 8007124:	d0cc      	beq.n	80070c0 <_malloc_r+0x20>
 8007126:	1a1b      	subs	r3, r3, r0
 8007128:	50a3      	str	r3, [r4, r2]
 800712a:	e7c9      	b.n	80070c0 <_malloc_r+0x20>
 800712c:	4622      	mov	r2, r4
 800712e:	6864      	ldr	r4, [r4, #4]
 8007130:	e7cc      	b.n	80070cc <_malloc_r+0x2c>
 8007132:	1cc4      	adds	r4, r0, #3
 8007134:	f024 0403 	bic.w	r4, r4, #3
 8007138:	42a0      	cmp	r0, r4
 800713a:	d0e3      	beq.n	8007104 <_malloc_r+0x64>
 800713c:	1a21      	subs	r1, r4, r0
 800713e:	4630      	mov	r0, r6
 8007140:	f000 f808 	bl	8007154 <_sbrk_r>
 8007144:	3001      	adds	r0, #1
 8007146:	d1dd      	bne.n	8007104 <_malloc_r+0x64>
 8007148:	e7cf      	b.n	80070ea <_malloc_r+0x4a>
 800714a:	bf00      	nop
 800714c:	200000b4 	.word	0x200000b4
 8007150:	200000b8 	.word	0x200000b8

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	; (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7f9 ff40 	bl	8000fe4 <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000890 	.word	0x20000890

08007174 <__malloc_lock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_lock+0x8>)
 8007176:	f000 b809 	b.w	800718c <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	20000898 	.word	0x20000898

08007180 <__malloc_unlock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_unlock+0x8>)
 8007182:	f000 b804 	b.w	800718e <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	20000898 	.word	0x20000898

0800718c <__retarget_lock_acquire_recursive>:
 800718c:	4770      	bx	lr

0800718e <__retarget_lock_release_recursive>:
 800718e:	4770      	bx	lr

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
