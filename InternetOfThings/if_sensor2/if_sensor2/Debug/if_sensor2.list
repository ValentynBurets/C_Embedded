
if_sensor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034fc  080034fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003504  08003504  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800350c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef3d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228d  00000000  00000000  0002efdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  00031270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f6d  00000000  00000000  00032898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2f8  00000000  00000000  00035805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5ae1  00000000  00000000  00043afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001195de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032d0  00000000  00000000  00119634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003470 	.word	0x08003470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003470 	.word	0x08003470

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <delay_init>:
#include "delay.h"

static TIM_HandleTypeDef* objSP_delay_timer;

void delay_init(TIM_HandleTypeDef* objLP_timer)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	objSP_delay_timer = objLP_timer;
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <delay_init+0x20>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(objSP_delay_timer);
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <delay_init+0x20>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f002 f994 	bl	80028a8 <HAL_TIM_Base_Start>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000008c 	.word	0x2000008c

0800058c <filter_init>:
#include "filter.h"

void filter_init(filter_t* objPL_this, uint8_t u8L_filter_time)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	objPL_this->u32_calc_value = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
	objPL_this->b_filter_inited = false;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	715a      	strb	r2, [r3, #5]
	objPL_this->u8_filter_time = u8L_filter_time;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	78fa      	ldrb	r2, [r7, #3]
 80005a8:	711a      	strb	r2, [r3, #4]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <filter_calc>:

uint16_t filter_calc(filter_t* objPL_this, uint16_t u16L_value)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	807b      	strh	r3, [r7, #2]
	if (!objPL_this->b_filter_inited)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	f083 0301 	eor.w	r3, r3, #1
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00c      	beq.n	80005ea <filter_calc+0x34>
	{
		objPL_this->u32_calc_value = u16L_value * objPL_this->u8_filter_time;
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	fb02 f303 	mul.w	r3, r2, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
		objPL_this->b_filter_inited = true;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	715a      	strb	r2, [r3, #5]
		return u16L_value;
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	e017      	b.n	800061a <filter_calc+0x64>
	}

	objPL_this->u32_calc_value -= objPL_this->u32_calc_value / objPL_this->u8_filter_time;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	7909      	ldrb	r1, [r1, #4]
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	1ad2      	subs	r2, r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	objPL_this->u32_calc_value += u16L_value;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	441a      	add	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]

	return (uint16_t)(objPL_this->u32_calc_value / objPL_this->u8_filter_time);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	fbb3 f3f2 	udiv	r3, r3, r2
 8000618:	b29b      	uxth	r3, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <ir_sensor_init>:
	{ 3724, 	70 },
	{ MAX_ADC, 	60 }
};

void ir_sensor_init(ir_sensor_t* objPL_this, ADC_HandleTypeDef* objPL_adc)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	objPL_this->objP_adc = objPL_adc;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	601a      	str	r2, [r3, #0]
	HAL_Delay(START_DELAY);
 8000638:	2032      	movs	r0, #50	; 0x32
 800063a:	f000 fdff 	bl	800123c <HAL_Delay>

	math_function_2d_construct(&objPL_this->obj_func, objPS_data, 11);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3304      	adds	r3, #4
 8000642:	220b      	movs	r2, #11
 8000644:	4903      	ldr	r1, [pc, #12]	; (8000654 <ir_sensor_init+0x2c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fbc5 	bl	8000dd6 <math_function_2d_construct>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800348c 	.word	0x0800348c

08000658 <ir_sensor_read>:

uint16_t ir_sensor_read(ir_sensor_t* objPL_this)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	filter_t objL_filter;
	filter_init(&objL_filter, FILTER_COUNT);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	210a      	movs	r1, #10
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff90 	bl	800058c <filter_init>

	uint16_t u16L_dist = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	82fb      	strh	r3, [r7, #22]

	for (uint8_t u8L_i = 0; u8L_i < FILTER_COUNT; u8L_i++)
 8000670:	2300      	movs	r3, #0
 8000672:	757b      	strb	r3, [r7, #21]
 8000674:	e01d      	b.n	80006b2 <ir_sensor_read+0x5a>
	{
		HAL_ADC_Start(objPL_this->objP_adc);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fe46 	bl	800130c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(objPL_this->objP_adc, 0xFFFF);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000688:	4618      	mov	r0, r3
 800068a:	f000 ff11 	bl	80014b0 <HAL_ADC_PollForConversion>
		u16L_dist = filter_calc(&objL_filter, HAL_ADC_GetValue(objPL_this->objP_adc));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 ff97 	bl	80015c6 <HAL_ADC_GetValue>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff87 	bl	80005b6 <filter_calc>
 80006a8:	4603      	mov	r3, r0
 80006aa:	82fb      	strh	r3, [r7, #22]
	for (uint8_t u8L_i = 0; u8L_i < FILTER_COUNT; u8L_i++)
 80006ac:	7d7b      	ldrb	r3, [r7, #21]
 80006ae:	3301      	adds	r3, #1
 80006b0:	757b      	strb	r3, [r7, #21]
 80006b2:	7d7b      	ldrb	r3, [r7, #21]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	d9de      	bls.n	8000676 <ir_sensor_read+0x1e>
	}

	return ir_sensor_get_distance(objPL_this, u16L_dist);
 80006b8:	8afb      	ldrh	r3, [r7, #22]
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f805 	bl	80006cc <ir_sensor_get_distance>
 80006c2:	4603      	mov	r3, r0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <ir_sensor_get_distance>:

uint16_t ir_sensor_get_distance(ir_sensor_t* objPL_this, uint16_t u16L_adc_val)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	807b      	strh	r3, [r7, #2]
    if (u16L_adc_val >= MAX_ADC || u16L_adc_val <= MIN_ADC)
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	f640 721d 	movw	r2, #3869	; 0xf1d
 80006de:	4293      	cmp	r3, r2
 80006e0:	d803      	bhi.n	80006ea <ir_sensor_get_distance+0x1e>
 80006e2:	887b      	ldrh	r3, [r7, #2]
 80006e4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80006e8:	d802      	bhi.n	80006f0 <ir_sensor_get_distance+0x24>
	{
		return TOO_FAR_DIST;
 80006ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ee:	e009      	b.n	8000704 <ir_sensor_get_distance+0x38>
	}

	return math_function_2d_get_y(&objPL_this->obj_func, (int16_t)u16L_adc_val);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3304      	adds	r3, #4
 80006f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fb7e 	bl	8000dfc <math_function_2d_get_y>
 8000700:	4603      	mov	r3, r0
 8000702:	b29b      	uxth	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcdSend>:
 */


#include <lcd.h>

void lcdSend(uint8_t isCommand, uint8_t data) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	RS(!isCommand);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	4852      	ldr	r0, [pc, #328]	; (8000878 <lcdSend+0x16c>)
 800072e:	f001 fbf7 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fd82 	bl	800123c <HAL_Delay>
	DH7(((data >> 7) & 1)==1);
 8000738:	79bb      	ldrb	r3, [r7, #6]
 800073a:	09db      	lsrs	r3, r3, #7
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000752:	4849      	ldr	r0, [pc, #292]	; (8000878 <lcdSend+0x16c>)
 8000754:	f001 fbe4 	bl	8001f20 <HAL_GPIO_WritePin>
	DH6(((data >> 6) & 1)==1);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	099b      	lsrs	r3, r3, #6
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf14      	ite	ne
 8000766:	2301      	movne	r3, #1
 8000768:	2300      	moveq	r3, #0
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4841      	ldr	r0, [pc, #260]	; (8000878 <lcdSend+0x16c>)
 8000774:	f001 fbd4 	bl	8001f20 <HAL_GPIO_WritePin>
	DH5(((data >> 5) & 1)==1);
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf14      	ite	ne
 8000786:	2301      	movne	r3, #1
 8000788:	2300      	moveq	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4839      	ldr	r0, [pc, #228]	; (8000878 <lcdSend+0x16c>)
 8000794:	f001 fbc4 	bl	8001f20 <HAL_GPIO_WritePin>
	DH4(((data >> 4) & 1)==1);
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b2:	4831      	ldr	r0, [pc, #196]	; (8000878 <lcdSend+0x16c>)
 80007b4:	f001 fbb4 	bl	8001f20 <HAL_GPIO_WritePin>
	EN(1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	482e      	ldr	r0, [pc, #184]	; (8000878 <lcdSend+0x16c>)
 80007c0:	f001 fbae 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 fd39 	bl	800123c <HAL_Delay>
	EN(0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d0:	4829      	ldr	r0, [pc, #164]	; (8000878 <lcdSend+0x16c>)
 80007d2:	f001 fba5 	bl	8001f20 <HAL_GPIO_WritePin>
	DH7(((data >> 3) & 1)==1);
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	4821      	ldr	r0, [pc, #132]	; (8000878 <lcdSend+0x16c>)
 80007f2:	f001 fb95 	bl	8001f20 <HAL_GPIO_WritePin>
	DH6(((data >> 2) & 1)==1);
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <lcdSend+0x16c>)
 8000812:	f001 fb85 	bl	8001f20 <HAL_GPIO_WritePin>
	DH5(((data >> 1) & 1)==1);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <lcdSend+0x16c>)
 8000832:	f001 fb75 	bl	8001f20 <HAL_GPIO_WritePin>
	DH4((data & 1)==1);
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	2b00      	cmp	r3, #0
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <lcdSend+0x16c>)
 800084e:	f001 fb67 	bl	8001f20 <HAL_GPIO_WritePin>
	EN(1);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <lcdSend+0x16c>)
 800085a:	f001 fb61 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fcec 	bl	800123c <HAL_Delay>
	EN(0);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <lcdSend+0x16c>)
 800086c:	f001 fb58 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000

0800087c <lcdCommand>:

void lcdCommand(uint8_t cmd) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
    lcdSend(1, cmd);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4619      	mov	r1, r3
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff ff3e 	bl	800070c <lcdSend>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <lcdChar>:

void lcdChar(const char chr) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    lcdSend(0, (uint8_t)chr);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff30 	bl	800070c <lcdSend>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <setCursor>:

void setCursor(uint8_t col, uint8_t row)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
  lcdSend(1,0x80 | (col | row*0x40));
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff ff14 	bl	800070c <lcdSend>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <parametrsToggle>:

void parametrsToggle(uint8_t display,uint8_t cursor,uint8_t blink){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	460b      	mov	r3, r1
 80008f8:	71bb      	strb	r3, [r7, #6]
 80008fa:	4613      	mov	r3, r2
 80008fc:	717b      	strb	r3, [r7, #5]
  uint8_t comm = 0x08;
 80008fe:	2308      	movs	r3, #8
 8000900:	73fb      	strb	r3, [r7, #15]
  if(display)comm|=0x04;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <parametrsToggle+0x24>
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	73fb      	strb	r3, [r7, #15]
  if(cursor)comm|=0x02;
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <parametrsToggle+0x32>
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	73fb      	strb	r3, [r7, #15]
  if(blink)comm|=0x01;
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <parametrsToggle+0x40>
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
  lcdCommand(comm);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffa4 	bl	800087c <lcdCommand>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <shiftToggle>:

void shiftToggle(uint8_t rightShift,uint8_t scrollInc){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
  uint8_t comm = 0x04;
 800094c:	2304      	movs	r3, #4
 800094e:	73fb      	strb	r3, [r7, #15]
  if(rightShift)comm|=0x02;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <shiftToggle+0x22>
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	73fb      	strb	r3, [r7, #15]
  if(scrollInc)comm|=0x01;
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <shiftToggle+0x30>
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	73fb      	strb	r3, [r7, #15]
  lcdCommand(comm);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff84 	bl	800087c <lcdCommand>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <clear>:
void scrollLeft(void){
  lcdCommand(0x10|0x08|0x04);
}

void clear(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  lcdCommand(0x01);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff ff7b 	bl	800087c <lcdCommand>
  HAL_Delay(2);
 8000986:	2002      	movs	r0, #2
 8000988:	f000 fc58 	bl	800123c <HAL_Delay>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <initLCD>:
{
  lcdCommand(0x02);
  HAL_Delay(2);
}

void initLCD(void){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  HAL_Delay(40);
 8000994:	2028      	movs	r0, #40	; 0x28
 8000996:	f000 fc51 	bl	800123c <HAL_Delay>
  lcdCommand(0x02);
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff ff6e 	bl	800087c <lcdCommand>
  HAL_Delay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 fc4b 	bl	800123c <HAL_Delay>
  lcdCommand(0x28);
 80009a6:	2028      	movs	r0, #40	; 0x28
 80009a8:	f7ff ff68 	bl	800087c <lcdCommand>
  HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fc45 	bl	800123c <HAL_Delay>
  lcdCommand(0x28);
 80009b2:	2028      	movs	r0, #40	; 0x28
 80009b4:	f7ff ff62 	bl	800087c <lcdCommand>
  HAL_Delay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f000 fc3f 	bl	800123c <HAL_Delay>
  parametrsToggle(1,0,0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff ff92 	bl	80008ec <parametrsToggle>
  HAL_Delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fc37 	bl	800123c <HAL_Delay>
  clear();
 80009ce:	f7ff ffd5 	bl	800097c <clear>
  shiftToggle(1,0);
 80009d2:	2100      	movs	r1, #0
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ffb1 	bl	800093c <shiftToggle>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}

080009de <lcdString>:

void lcdString(char* str){
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  for(uint8_t i=0;str[i]!='\0';i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e009      	b.n	8000a00 <lcdString+0x22>
    lcdChar(str[i]);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff4f 	bl	8000898 <lcdChar>
  for(uint8_t i=0;str[i]!='\0';i++){
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	3301      	adds	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1ef      	bne.n	80009ec <lcdString+0xe>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fb9b 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f84f 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 f93f 	bl	8000ca8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a2a:	f000 f8b5 	bl	8000b98 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000a2e:	f000 f905 	bl	8000c3c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ir_sensor_t obj_ir_sensor;
  acoustic_sensor_t obj_ac_sensor;
  delay_init(&htim6);
 8000a32:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <main+0x9c>)
 8000a34:	f7ff fd98 	bl	8000568 <delay_init>
  initLCD();
 8000a38:	f7ff ffaa 	bl	8000990 <initLCD>
  ir_sensor_init(&obj_ir_sensor, &hadc1);
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	491d      	ldr	r1, [pc, #116]	; (8000ab8 <main+0xa0>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fdf0 	bl	8000628 <ir_sensor_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  clear();
 8000a48:	f7ff ff98 	bl	800097c <clear>
	  char cPL_str[16];
	  uint16_t u16L_dist = ir_sensor_read(&obj_ir_sensor);
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe01 	bl	8000658 <ir_sensor_read>
 8000a56:	4603      	mov	r3, r0
 8000a58:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  sprintf(cPL_str, "%d", u16L_dist);
 8000a5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4917      	ldr	r1, [pc, #92]	; (8000abc <main+0xa4>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f8d7 	bl	8002c14 <siprintf>
	  setCursor(0, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ff23 	bl	80008b4 <setCursor>
	  lcdString(cPL_str);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffb4 	bl	80009de <lcdString>
	  //u16L_dist = acoustic_sensor_read(&obj_ac_sensor);
	  setCursor(0, 1);
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff1b 	bl	80008b4 <setCursor>
	  memset(cPL_str, 0, 16);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2210      	movs	r2, #16
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f8bd 	bl	8002c04 <memset>
	  sprintf(cPL_str, "%d", u16L_dist);
 8000a8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	490b      	ldr	r1, [pc, #44]	; (8000abc <main+0xa4>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f8bf 	bl	8002c14 <siprintf>
	  lcdString(cPL_str);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ffa0 	bl	80009de <lcdString>
	  HAL_Delay(1000);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 fbcb 	bl	800123c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <main+0xa8>)
 8000aac:	f001 fa51 	bl	8001f52 <HAL_GPIO_TogglePin>
  {
 8000ab0:	e7ca      	b.n	8000a48 <main+0x30>
 8000ab2:	bf00      	nop
 8000ab4:	200000e4 	.word	0x200000e4
 8000ab8:	2000009c 	.word	0x2000009c
 8000abc:	08003488 	.word	0x08003488
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f896 	bl	8002c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <SystemClock_Config+0xcc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b38:	23a8      	movs	r3, #168	; 0xa8
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fa1d 	bl	8001f88 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b54:	f000 f93a 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2105      	movs	r1, #5
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fc7e 	bl	8002478 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b82:	f000 f923 	bl	8000dcc <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_ADC1_Init+0x9c>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <MX_ADC1_Init+0xa0>)
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000bfa:	f000 fb43 	bl	8001284 <HAL_ADC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c04:	f000 f8e2 	bl	8000dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_ADC1_Init+0x98>)
 8000c1a:	f000 fce1 	bl	80015e0 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c24:	f000 f8d2 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000009c 	.word	0x2000009c
 8000c34:	40012000 	.word	0x40012000
 8000c38:	0f000001 	.word	0x0f000001

08000c3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_TIM6_Init+0x68>)
 8000c4e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c52:	2253      	movs	r2, #83	; 0x53
 8000c54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c6c:	f001 fdcc 	bl	8002808 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000c76:	f000 f8a9 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_TIM6_Init+0x64>)
 8000c88:	f001 ff16 	bl	8002ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000c92:	f000 f89b 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a3e      	ldr	r2, [pc, #248]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000cc8:	f043 0310 	orr.w	r3, r3, #16
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a37      	ldr	r2, [pc, #220]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_GPIO_Init+0x118>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f64f 4184 	movw	r1, #64644	; 0xfc84
 8000d34:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d36:	f001 f8f3 	bl	8001f20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0x120>)
 8000d42:	f001 f8ed 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000d46:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4819      	ldr	r0, [pc, #100]	; (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d60:	f000 ff42 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d64:	2308      	movs	r3, #8
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d78:	f000 ff36 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE10 PE11 PE12
                           PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000d7c:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8000d80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <MX_GPIO_Init+0x11c>)
 8000d96:	f000 ff27 	bl	8001be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_GPIO_Init+0x120>)
 8000db4:	f000 ff18 	bl	8001be8 <HAL_GPIO_Init>

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>

08000dd6 <math_function_2d_construct>:
static int16_t math_function_get_fx(int16_t s16L_x, int16_t s16L_x1, int16_t s16L_y1,
	int16_t s16L_x2, int16_t s16L_y2);

void math_function_2d_construct(math_function_2d_obj_t* objPL_this,
	const math_2d_point_t* objPL_data, uint16_t u16L_dataSize)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	4613      	mov	r3, r2
 8000de2:	80fb      	strh	r3, [r7, #6]
	objPL_this->objP_data_table = objPL_data;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	601a      	str	r2, [r3, #0]
	objPL_this->u16_table_size	= u16L_dataSize;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	809a      	strh	r2, [r3, #4]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <math_function_2d_get_y>:

int16_t math_function_2d_get_y(math_function_2d_obj_t* objPL_this, int16_t s16L_x)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
	const math_2d_point_t* objPL_first_point = &objPL_this->objP_data_table[0];
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]

	if(s16L_x < objPL_first_point->x)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	da03      	bge.n	8000e24 <math_function_2d_get_y+0x28>
	{
		return objPL_first_point->y;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e22:	e03f      	b.n	8000ea4 <math_function_2d_get_y+0xa8>
	}

	const math_2d_point_t* objPL_last_point =
		&objPL_this->objP_data_table[objPL_this->u16_table_size - 1];
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	889b      	ldrh	r3, [r3, #4]
 8000e2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e30:	3b01      	subs	r3, #1
 8000e32:	009b      	lsls	r3, r3, #2
	const math_2d_point_t* objPL_last_point =
 8000e34:	4413      	add	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]

	if (s16L_x >= objPL_last_point->x)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	db03      	blt.n	8000e4e <math_function_2d_get_y+0x52>
	{
		return objPL_last_point->y;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e4c:	e02a      	b.n	8000ea4 <math_function_2d_get_y+0xa8>
	}

	const math_2d_point_t* objPL_cur_point	= objPL_first_point;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	617b      	str	r3, [r7, #20]
	const math_2d_point_t* objPL_next_point = objPL_first_point + 1;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3304      	adds	r3, #4
 8000e56:	613b      	str	r3, [r7, #16]

	while (objPL_cur_point != objPL_last_point)
 8000e58:	e01f      	b.n	8000e9a <math_function_2d_get_y+0x9e>
	{
		if (s16L_x < objPL_next_point->x)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	da13      	bge.n	8000e90 <math_function_2d_get_y+0x94>
		{
			return math_function_get_fx(s16L_x, objPL_cur_point->x,
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e80:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	4623      	mov	r3, r4
 8000e88:	f000 f810 	bl	8000eac <math_function_get_fx>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e009      	b.n	8000ea4 <math_function_2d_get_y+0xa8>
				objPL_cur_point->y, objPL_next_point->x, objPL_next_point->y);
		}

		objPL_cur_point = objPL_next_point;
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	617b      	str	r3, [r7, #20]
		objPL_next_point++;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	3304      	adds	r3, #4
 8000e98:	613b      	str	r3, [r7, #16]
	while (objPL_cur_point != objPL_last_point)
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d1db      	bne.n	8000e5a <math_function_2d_get_y+0x5e>
	}

	// return 0 will never be executed
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd90      	pop	{r4, r7, pc}

08000eac <math_function_get_fx>:

int16_t math_function_get_fx(int16_t s16L_x, int16_t s16L_x1, int16_t s16L_y1,
	int16_t s16L_x2, int16_t s16L_y2)
{
 8000eac:	b490      	push	{r4, r7}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80bb      	strh	r3, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	807b      	strh	r3, [r7, #2]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	803b      	strh	r3, [r7, #0]
	return ((s16L_x - s16L_x1) * (s16L_y2 - s16L_y1)) / (s16L_x2 - s16L_x1) + s16L_y1;
 8000eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8000ed8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	fb02 f203 	mul.w	r2, r2, r3
 8000ee2:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000ee6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eea:	1acb      	subs	r3, r1, r3
 8000eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b21b      	sxth	r3, r3
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc90      	pop	{r4, r7}
 8000f02:	4770      	bx	lr

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_ADC_MspInit+0x7c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d127      	bne.n	8000fc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_ADC_MspInit+0x84>)
 8000fc2:	f000 fe11 	bl	8001be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012000 	.word	0x40012000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40001000 	.word	0x40001000
 800101c:	40023800 	.word	0x40023800

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f8c6 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f001 fd84 	bl	8002bb0 <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20020000 	.word	0x20020000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	20000090 	.word	0x20000090
 80010dc:	20000140 	.word	0x20000140

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112e:	f7ff ffd7 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f001 fd43 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fc6f 	bl	8000a18 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001148:	0800350c 	.word	0x0800350c
  ldr r2, =_sbss
 800114c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001150:	20000140 	.word	0x20000140

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fcfd 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff feba 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fd07 	bl	8001bce <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 fcdd 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	2000012c 	.word	0x2000012c

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000012c 	.word	0x2000012c

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e033      	b.n	8001302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fe56 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d118      	bne.n	80012f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ca:	f023 0302 	bic.w	r3, r3, #2
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 faa4 	bl	8001824 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
 80012f2:	e001      	b.n	80012f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Start+0x1a>
 8001322:	2302      	movs	r3, #2
 8001324:	e0b2      	b.n	800148c <HAL_ADC_Start+0x180>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d018      	beq.n	800136e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0201 	orr.w	r2, r2, #1
 800134a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134c:	4b52      	ldr	r3, [pc, #328]	; (8001498 <HAL_ADC_Start+0x18c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <HAL_ADC_Start+0x190>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9a      	lsrs	r2, r3, #18
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001360:	e002      	b.n	8001368 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b01      	cmp	r3, #1
 800137a:	d17a      	bne.n	8001472 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ba:	d106      	bne.n	80013ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	f023 0206 	bic.w	r2, r3, #6
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_ADC_Start+0x194>)
 80013da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d12a      	bne.n	8001448 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a2b      	ldr	r2, [pc, #172]	; (80014a4 <HAL_ADC_Start+0x198>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d015      	beq.n	8001428 <HAL_ADC_Start+0x11c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a29      	ldr	r2, [pc, #164]	; (80014a8 <HAL_ADC_Start+0x19c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d105      	bne.n	8001412 <HAL_ADC_Start+0x106>
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_ADC_Start+0x194>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <HAL_ADC_Start+0x1a0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d136      	bne.n	800148a <HAL_ADC_Start+0x17e>
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_ADC_Start+0x194>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	d130      	bne.n	800148a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d129      	bne.n	800148a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	e020      	b.n	800148a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <HAL_ADC_Start+0x198>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11b      	bne.n	800148a <HAL_ADC_Start+0x17e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d114      	bne.n	800148a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e00b      	b.n	800148a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f043 0210 	orr.w	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20000000 	.word	0x20000000
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	40012300 	.word	0x40012300
 80014a4:	40012000 	.word	0x40012000
 80014a8:	40012100 	.word	0x40012100
 80014ac:	40012200 	.word	0x40012200

080014b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014cc:	d113      	bne.n	80014f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014dc:	d10b      	bne.n	80014f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e063      	b.n	80015be <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014f6:	f7ff fe95 	bl	8001224 <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014fc:	e021      	b.n	8001542 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d01d      	beq.n	8001542 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_ADC_PollForConversion+0x6c>
 800150c:	f7ff fe8a 	bl	8001224 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d212      	bcs.n	8001542 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d00b      	beq.n	8001542 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f043 0204 	orr.w	r2, r3, #4
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e03d      	b.n	80015be <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b02      	cmp	r3, #2
 800154e:	d1d6      	bne.n	80014fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0212 	mvn.w	r2, #18
 8001558:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d123      	bne.n	80015bc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001578:	2b00      	cmp	r3, #0
 800157a:	d11f      	bne.n	80015bc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1c>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e105      	b.n	8001808 <HAL_ADC_ConfigChannel+0x228>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d925      	bls.n	8001658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68d9      	ldr	r1, [r3, #12]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	3b1e      	subs	r3, #30
 8001622:	2207      	movs	r2, #7
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43da      	mvns	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	400a      	ands	r2, r1
 8001630:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68d9      	ldr	r1, [r3, #12]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	4603      	mov	r3, r0
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4403      	add	r3, r0
 800164a:	3b1e      	subs	r3, #30
 800164c:	409a      	lsls	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	e022      	b.n	800169e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6919      	ldr	r1, [r3, #16]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	2207      	movs	r2, #7
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	400a      	ands	r2, r1
 800167a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6919      	ldr	r1, [r3, #16]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	4603      	mov	r3, r0
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4403      	add	r3, r0
 8001694:	409a      	lsls	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d824      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	3b05      	subs	r3, #5
 80016b8:	221f      	movs	r2, #31
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b05      	subs	r3, #5
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
 80016ee:	e04c      	b.n	800178a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d824      	bhi.n	8001742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b23      	subs	r3, #35	; 0x23
 800170a:	221f      	movs	r2, #31
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43da      	mvns	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b23      	subs	r3, #35	; 0x23
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
 8001740:	e023      	b.n	800178a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b41      	subs	r3, #65	; 0x41
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b41      	subs	r3, #65	; 0x41
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_ADC_ConfigChannel+0x234>)
 800178c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a21      	ldr	r2, [pc, #132]	; (8001818 <HAL_ADC_ConfigChannel+0x238>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d109      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1cc>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b12      	cmp	r3, #18
 800179e:	d105      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_ADC_ConfigChannel+0x238>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d123      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d003      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x1e6>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b11      	cmp	r3, #17
 80017c4:	d11b      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d111      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_ADC_ConfigChannel+0x23c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_ADC_ConfigChannel+0x240>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	0c9a      	lsrs	r2, r3, #18
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f9      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40012300 	.word	0x40012300
 8001818:	40012000 	.word	0x40012000
 800181c:	20000000 	.word	0x20000000
 8001820:	431bde83 	.word	0x431bde83

08001824 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182c:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <ADC_Init+0x1f0>)
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	021a      	lsls	r2, r3, #8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800187c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800189e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6899      	ldr	r1, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <ADC_Init+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d022      	beq.n	8001902 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6899      	ldr	r1, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	e00f      	b.n	8001922 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001920:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0202 	bic.w	r2, r2, #2
 8001930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7e1b      	ldrb	r3, [r3, #24]
 800193c:	005a      	lsls	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01b      	beq.n	8001988 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800195e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800196e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	3b01      	subs	r3, #1
 800197c:	035a      	lsls	r2, r3, #13
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	e007      	b.n	8001998 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001996:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	051a      	lsls	r2, r3, #20
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6899      	ldr	r1, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019da:	025a      	lsls	r2, r3, #9
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6899      	ldr	r1, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	029a      	lsls	r2, r3, #10
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40012300 	.word	0x40012300
 8001a18:	0f000001 	.word	0x0f000001

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff47 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff5c 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffb0 	bl	8001b3c <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e16b      	b.n	8001edc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c04:	2201      	movs	r2, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f040 815a 	bne.w	8001ed6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d005      	beq.n	8001c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d130      	bne.n	8001c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 0201 	and.w	r2, r3, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d017      	beq.n	8001cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d123      	bne.n	8001d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	08da      	lsrs	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3208      	adds	r2, #8
 8001cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	69b9      	ldr	r1, [r7, #24]
 8001d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80b4 	beq.w	8001ed6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_GPIO_Init+0x30c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a5f      	ldr	r2, [pc, #380]	; (8001ef4 <HAL_GPIO_Init+0x30c>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_GPIO_Init+0x30c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ef8 <HAL_GPIO_Init+0x310>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_GPIO_Init+0x314>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02b      	beq.n	8001e0e <HAL_GPIO_Init+0x226>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x318>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d025      	beq.n	8001e0a <HAL_GPIO_Init+0x222>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_GPIO_Init+0x31c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <HAL_GPIO_Init+0x21e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_GPIO_Init+0x320>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x21a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4e      	ldr	r2, [pc, #312]	; (8001f0c <HAL_GPIO_Init+0x324>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x216>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_GPIO_Init+0x328>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x212>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_GPIO_Init+0x32c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x20e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_GPIO_Init+0x330>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x20a>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e00e      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001df2:	2308      	movs	r3, #8
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x228>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x310>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e52:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <HAL_GPIO_Init+0x334>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae90 	bls.w	8001c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f64:	887a      	ldrh	r2, [r7, #2]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e264      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d075      	beq.n	8002092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	4ba3      	ldr	r3, [pc, #652]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d00c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4ba0      	ldr	r3, [pc, #640]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d112      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4b9d      	ldr	r3, [pc, #628]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	4b99      	ldr	r3, [pc, #612]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d05b      	beq.n	8002090 <HAL_RCC_OscConfig+0x108>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d157      	bne.n	8002090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e23f      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x74>
 8001fee:	4b91      	ldr	r3, [pc, #580]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a90      	ldr	r2, [pc, #576]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a8a      	ldr	r2, [pc, #552]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a87      	ldr	r2, [pc, #540]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8002020:	4b84      	ldr	r3, [pc, #528]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a83      	ldr	r2, [pc, #524]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a80      	ldr	r2, [pc, #512]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff f8f0 	bl	8001224 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff f8ec 	bl	8001224 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e204      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xc0>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f8dc 	bl	8001224 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff f8d8 	bl	8001224 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1f0      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0xe8>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c4      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4952      	ldr	r1, [pc, #328]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_OscConfig+0x2b0>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f891 	bl	8001224 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff f88d 	bl	8001224 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a5      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4940      	ldr	r1, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_OscConfig+0x2b0>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f870 	bl	8001224 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff f86c 	bl	8001224 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e184      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d030      	beq.n	80021d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_OscConfig+0x2b4>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff f850 	bl	8001224 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff f84c 	bl	8001224 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e164      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x200>
 80021a6:	e015      	b.n	80021d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_OscConfig+0x2b4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f839 	bl	8001224 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b6:	f7ff f835 	bl	8001224 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e14d      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a0 	beq.w	8002322 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x2b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d121      	bne.n	8002262 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_OscConfig+0x2b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_RCC_OscConfig+0x2b8>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7fe fffb 	bl	8001224 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e011      	b.n	8002256 <HAL_RCC_OscConfig+0x2ce>
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	42470000 	.word	0x42470000
 800223c:	42470e80 	.word	0x42470e80
 8002240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe ffee 	bl	8001224 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e106      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002256:	4b85      	ldr	r3, [pc, #532]	; (800246c <HAL_RCC_OscConfig+0x4e4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x2f0>
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a80      	ldr	r2, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
 8002276:	e01c      	b.n	80022b2 <HAL_RCC_OscConfig+0x32a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d10c      	bne.n	800229a <HAL_RCC_OscConfig+0x312>
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a77      	ldr	r2, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	e00b      	b.n	80022b2 <HAL_RCC_OscConfig+0x32a>
 800229a:	4b75      	ldr	r3, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229e:	4a74      	ldr	r2, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	; 0x70
 80022a6:	4b72      	ldr	r3, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d015      	beq.n	80022e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7fe ffb3 	bl	8001224 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe ffaf 	bl	8001224 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0c5      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ee      	beq.n	80022c2 <HAL_RCC_OscConfig+0x33a>
 80022e4:	e014      	b.n	8002310 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe ff9d 	bl	8001224 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe ff99 	bl	8001224 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0af      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ee      	bne.n	80022ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d105      	bne.n	8002322 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a55      	ldr	r2, [pc, #340]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 809b 	beq.w	8002462 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d05c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d141      	bne.n	80023c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_OscConfig+0x4ec>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe ff6d 	bl	8001224 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7fe ff69 	bl	8001224 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e081      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	019b      	lsls	r3, r3, #6
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_RCC_OscConfig+0x4ec>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe ff42 	bl	8001224 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe ff3e 	bl	8001224 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e056      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b6:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x41c>
 80023c2:	e04e      	b.n	8002462 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_OscConfig+0x4ec>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe ff2b 	bl	8001224 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe ff27 	bl	8001224 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03f      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x44a>
 80023f0:	e037      	b.n	8002462 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e032      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d028      	beq.n	800245e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d121      	bne.n	800245e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d11a      	bne.n	800245e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800242e:	4013      	ands	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002434:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002436:	4293      	cmp	r3, r2
 8002438:	d111      	bne.n	800245e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d107      	bne.n	800245e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40007000 	.word	0x40007000
 8002470:	40023800 	.word	0x40023800
 8002474:	42470060 	.word	0x42470060

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0cc      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d90c      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d044      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d003      	beq.n	8002536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	2b03      	cmp	r3, #3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e067      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4934      	ldr	r1, [pc, #208]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fe5c 	bl	8001224 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fe58 	bl	8001224 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d20c      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fdbc 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00
 8002634:	40023800 	.word	0x40023800
 8002638:	080034b8 	.word	0x080034b8
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265c:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d00d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 8002668:	2b08      	cmp	r3, #8
 800266a:	f200 80bd 	bhi.w	80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x3a>
 8002676:	e0b7      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800267a:	60bb      	str	r3, [r7, #8]
       break;
 800267c:	e0b7      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267e:	4b61      	ldr	r3, [pc, #388]	; (8002804 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002680:	60bb      	str	r3, [r7, #8]
      break;
 8002682:	e0b4      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800268c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268e:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d04d      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b58      	ldr	r3, [pc, #352]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	461a      	mov	r2, r3
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	ea02 0800 	and.w	r8, r2, r0
 80026b2:	ea03 0901 	and.w	r9, r3, r1
 80026b6:	4640      	mov	r0, r8
 80026b8:	4649      	mov	r1, r9
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	014b      	lsls	r3, r1, #5
 80026c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026c8:	0142      	lsls	r2, r0, #5
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	ebb0 0008 	subs.w	r0, r0, r8
 80026d2:	eb61 0109 	sbc.w	r1, r1, r9
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	018b      	lsls	r3, r1, #6
 80026e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026e4:	0182      	lsls	r2, r0, #6
 80026e6:	1a12      	subs	r2, r2, r0
 80026e8:	eb63 0301 	sbc.w	r3, r3, r1
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	00d9      	lsls	r1, r3, #3
 80026f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026fa:	00d0      	lsls	r0, r2, #3
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	eb12 0208 	adds.w	r2, r2, r8
 8002704:	eb43 0309 	adc.w	r3, r3, r9
 8002708:	f04f 0000 	mov.w	r0, #0
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	0259      	lsls	r1, r3, #9
 8002712:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002716:	0250      	lsls	r0, r2, #9
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	f7fd fda2 	bl	8000270 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e04a      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	461a      	mov	r2, r3
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	ea02 0400 	and.w	r4, r2, r0
 800274e:	ea03 0501 	and.w	r5, r3, r1
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	014b      	lsls	r3, r1, #5
 8002760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002764:	0142      	lsls	r2, r0, #5
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	1b00      	subs	r0, r0, r4
 800276c:	eb61 0105 	sbc.w	r1, r1, r5
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	018b      	lsls	r3, r1, #6
 800277a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800277e:	0182      	lsls	r2, r0, #6
 8002780:	1a12      	subs	r2, r2, r0
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	00d9      	lsls	r1, r3, #3
 8002790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002794:	00d0      	lsls	r0, r2, #3
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	1912      	adds	r2, r2, r4
 800279c:	eb45 0303 	adc.w	r3, r5, r3
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	0299      	lsls	r1, r3, #10
 80027aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027ae:	0290      	lsls	r0, r2, #10
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f7fd fd56 	bl	8000270 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	60bb      	str	r3, [r7, #8]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027ea:	60bb      	str	r3, [r7, #8]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	68bb      	ldr	r3, [r7, #8]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	00f42400 	.word	0x00f42400
 8002804:	007a1200 	.word	0x007a1200

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fbd4 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f896 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e046      	b.n	800294e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_TIM_Base_Start+0xb4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d022      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d01d      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_TIM_Base_Start+0xb8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d018      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_TIM_Base_Start+0xbc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d013      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_TIM_Base_Start+0xc0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00e      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_TIM_Base_Start+0xc4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d009      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_TIM_Base_Start+0xc8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_Base_Start+0x70>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_Base_Start+0xcc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d111      	bne.n	800293c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d010      	beq.n	800294c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	e007      	b.n	800294c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40010400 	.word	0x40010400
 8002970:	40014000 	.word	0x40014000
 8002974:	40001800 	.word	0x40001800

08002978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d00f      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <TIM_Base_SetConfig+0x118>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00b      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <TIM_Base_SetConfig+0x11c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <TIM_Base_SetConfig+0x120>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d003      	beq.n	80029b8 <TIM_Base_SetConfig+0x40>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d108      	bne.n	80029ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d02b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d027      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <TIM_Base_SetConfig+0x118>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d023      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <TIM_Base_SetConfig+0x11c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <TIM_Base_SetConfig+0x120>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d017      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <TIM_Base_SetConfig+0x128>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <TIM_Base_SetConfig+0x12c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <TIM_Base_SetConfig+0x130>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <TIM_Base_SetConfig+0x134>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <TIM_Base_SetConfig+0x138>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <TIM_Base_SetConfig+0x13c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <TIM_Base_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0xf8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <TIM_Base_SetConfig+0x124>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40010400 	.word	0x40010400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	40001800 	.word	0x40001800
 8002ab0:	40001c00 	.word	0x40001c00
 8002ab4:	40002000 	.word	0x40002000

08002ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e05a      	b.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d01d      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10c      	bne.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800
 8002ba0:	40000c00 	.word	0x40000c00
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40001800 	.word	0x40001800

08002bb0 <__errno>:
 8002bb0:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <__errno+0x8>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	2000000c 	.word	0x2000000c

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	4d0d      	ldr	r5, [pc, #52]	; (8002bf4 <__libc_init_array+0x38>)
 8002bc0:	4c0d      	ldr	r4, [pc, #52]	; (8002bf8 <__libc_init_array+0x3c>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	2600      	movs	r6, #0
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	4d0b      	ldr	r5, [pc, #44]	; (8002bfc <__libc_init_array+0x40>)
 8002bce:	4c0c      	ldr	r4, [pc, #48]	; (8002c00 <__libc_init_array+0x44>)
 8002bd0:	f000 fc4e 	bl	8003470 <_init>
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	2600      	movs	r6, #0
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08003504 	.word	0x08003504
 8002bf8:	08003504 	.word	0x08003504
 8002bfc:	08003504 	.word	0x08003504
 8002c00:	08003508 	.word	0x08003508

08002c04 <memset>:
 8002c04:	4402      	add	r2, r0
 8002c06:	4603      	mov	r3, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <memset+0xa>
 8002c0c:	4770      	bx	lr
 8002c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c12:	e7f9      	b.n	8002c08 <memset+0x4>

08002c14 <siprintf>:
 8002c14:	b40e      	push	{r1, r2, r3}
 8002c16:	b500      	push	{lr}
 8002c18:	b09c      	sub	sp, #112	; 0x70
 8002c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c1c:	9002      	str	r0, [sp, #8]
 8002c1e:	9006      	str	r0, [sp, #24]
 8002c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c24:	4809      	ldr	r0, [pc, #36]	; (8002c4c <siprintf+0x38>)
 8002c26:	9107      	str	r1, [sp, #28]
 8002c28:	9104      	str	r1, [sp, #16]
 8002c2a:	4909      	ldr	r1, [pc, #36]	; (8002c50 <siprintf+0x3c>)
 8002c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c30:	9105      	str	r1, [sp, #20]
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	a902      	add	r1, sp, #8
 8002c38:	f000 f868 	bl	8002d0c <_svfiprintf_r>
 8002c3c:	9b02      	ldr	r3, [sp, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	b01c      	add	sp, #112	; 0x70
 8002c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c48:	b003      	add	sp, #12
 8002c4a:	4770      	bx	lr
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	ffff0208 	.word	0xffff0208

08002c54 <__ssputs_r>:
 8002c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c58:	688e      	ldr	r6, [r1, #8]
 8002c5a:	429e      	cmp	r6, r3
 8002c5c:	4682      	mov	sl, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	4690      	mov	r8, r2
 8002c62:	461f      	mov	r7, r3
 8002c64:	d838      	bhi.n	8002cd8 <__ssputs_r+0x84>
 8002c66:	898a      	ldrh	r2, [r1, #12]
 8002c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c6c:	d032      	beq.n	8002cd4 <__ssputs_r+0x80>
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	6909      	ldr	r1, [r1, #16]
 8002c72:	eba5 0901 	sub.w	r9, r5, r1
 8002c76:	6965      	ldr	r5, [r4, #20]
 8002c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c80:	3301      	adds	r3, #1
 8002c82:	444b      	add	r3, r9
 8002c84:	106d      	asrs	r5, r5, #1
 8002c86:	429d      	cmp	r5, r3
 8002c88:	bf38      	it	cc
 8002c8a:	461d      	movcc	r5, r3
 8002c8c:	0553      	lsls	r3, r2, #21
 8002c8e:	d531      	bpl.n	8002cf4 <__ssputs_r+0xa0>
 8002c90:	4629      	mov	r1, r5
 8002c92:	f000 fb47 	bl	8003324 <_malloc_r>
 8002c96:	4606      	mov	r6, r0
 8002c98:	b950      	cbnz	r0, 8002cb0 <__ssputs_r+0x5c>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	f8ca 3000 	str.w	r3, [sl]
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb0:	6921      	ldr	r1, [r4, #16]
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	f000 fabe 	bl	8003234 <memcpy>
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	81a3      	strh	r3, [r4, #12]
 8002cc4:	6126      	str	r6, [r4, #16]
 8002cc6:	6165      	str	r5, [r4, #20]
 8002cc8:	444e      	add	r6, r9
 8002cca:	eba5 0509 	sub.w	r5, r5, r9
 8002cce:	6026      	str	r6, [r4, #0]
 8002cd0:	60a5      	str	r5, [r4, #8]
 8002cd2:	463e      	mov	r6, r7
 8002cd4:	42be      	cmp	r6, r7
 8002cd6:	d900      	bls.n	8002cda <__ssputs_r+0x86>
 8002cd8:	463e      	mov	r6, r7
 8002cda:	4632      	mov	r2, r6
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	4641      	mov	r1, r8
 8002ce0:	f000 fab6 	bl	8003250 <memmove>
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	1b9b      	subs	r3, r3, r6
 8002cea:	4432      	add	r2, r6
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7db      	b.n	8002cac <__ssputs_r+0x58>
 8002cf4:	462a      	mov	r2, r5
 8002cf6:	f000 fb6f 	bl	80033d8 <_realloc_r>
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d1e1      	bne.n	8002cc4 <__ssputs_r+0x70>
 8002d00:	6921      	ldr	r1, [r4, #16]
 8002d02:	4650      	mov	r0, sl
 8002d04:	f000 fabe 	bl	8003284 <_free_r>
 8002d08:	e7c7      	b.n	8002c9a <__ssputs_r+0x46>
	...

08002d0c <_svfiprintf_r>:
 8002d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	4698      	mov	r8, r3
 8002d12:	898b      	ldrh	r3, [r1, #12]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	b09d      	sub	sp, #116	; 0x74
 8002d18:	4607      	mov	r7, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	d50e      	bpl.n	8002d3e <_svfiprintf_r+0x32>
 8002d20:	690b      	ldr	r3, [r1, #16]
 8002d22:	b963      	cbnz	r3, 8002d3e <_svfiprintf_r+0x32>
 8002d24:	2140      	movs	r1, #64	; 0x40
 8002d26:	f000 fafd 	bl	8003324 <_malloc_r>
 8002d2a:	6028      	str	r0, [r5, #0]
 8002d2c:	6128      	str	r0, [r5, #16]
 8002d2e:	b920      	cbnz	r0, 8002d3a <_svfiprintf_r+0x2e>
 8002d30:	230c      	movs	r3, #12
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	e0d1      	b.n	8002ede <_svfiprintf_r+0x1d2>
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	616b      	str	r3, [r5, #20]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9309      	str	r3, [sp, #36]	; 0x24
 8002d42:	2320      	movs	r3, #32
 8002d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d4c:	2330      	movs	r3, #48	; 0x30
 8002d4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ef8 <_svfiprintf_r+0x1ec>
 8002d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d56:	f04f 0901 	mov.w	r9, #1
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d62:	b10a      	cbz	r2, 8002d68 <_svfiprintf_r+0x5c>
 8002d64:	2a25      	cmp	r2, #37	; 0x25
 8002d66:	d1f9      	bne.n	8002d5c <_svfiprintf_r+0x50>
 8002d68:	ebba 0b04 	subs.w	fp, sl, r4
 8002d6c:	d00b      	beq.n	8002d86 <_svfiprintf_r+0x7a>
 8002d6e:	465b      	mov	r3, fp
 8002d70:	4622      	mov	r2, r4
 8002d72:	4629      	mov	r1, r5
 8002d74:	4638      	mov	r0, r7
 8002d76:	f7ff ff6d 	bl	8002c54 <__ssputs_r>
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	f000 80aa 	beq.w	8002ed4 <_svfiprintf_r+0x1c8>
 8002d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d82:	445a      	add	r2, fp
 8002d84:	9209      	str	r2, [sp, #36]	; 0x24
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80a2 	beq.w	8002ed4 <_svfiprintf_r+0x1c8>
 8002d90:	2300      	movs	r3, #0
 8002d92:	f04f 32ff 	mov.w	r2, #4294967295
 8002d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d9a:	f10a 0a01 	add.w	sl, sl, #1
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	9307      	str	r3, [sp, #28]
 8002da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002da6:	931a      	str	r3, [sp, #104]	; 0x68
 8002da8:	4654      	mov	r4, sl
 8002daa:	2205      	movs	r2, #5
 8002dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db0:	4851      	ldr	r0, [pc, #324]	; (8002ef8 <_svfiprintf_r+0x1ec>)
 8002db2:	f7fd fa0d 	bl	80001d0 <memchr>
 8002db6:	9a04      	ldr	r2, [sp, #16]
 8002db8:	b9d8      	cbnz	r0, 8002df2 <_svfiprintf_r+0xe6>
 8002dba:	06d0      	lsls	r0, r2, #27
 8002dbc:	bf44      	itt	mi
 8002dbe:	2320      	movmi	r3, #32
 8002dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc4:	0711      	lsls	r1, r2, #28
 8002dc6:	bf44      	itt	mi
 8002dc8:	232b      	movmi	r3, #43	; 0x2b
 8002dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dce:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd4:	d015      	beq.n	8002e02 <_svfiprintf_r+0xf6>
 8002dd6:	9a07      	ldr	r2, [sp, #28]
 8002dd8:	4654      	mov	r4, sl
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f04f 0c0a 	mov.w	ip, #10
 8002de0:	4621      	mov	r1, r4
 8002de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de6:	3b30      	subs	r3, #48	; 0x30
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	d94e      	bls.n	8002e8a <_svfiprintf_r+0x17e>
 8002dec:	b1b0      	cbz	r0, 8002e1c <_svfiprintf_r+0x110>
 8002dee:	9207      	str	r2, [sp, #28]
 8002df0:	e014      	b.n	8002e1c <_svfiprintf_r+0x110>
 8002df2:	eba0 0308 	sub.w	r3, r0, r8
 8002df6:	fa09 f303 	lsl.w	r3, r9, r3
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	9304      	str	r3, [sp, #16]
 8002dfe:	46a2      	mov	sl, r4
 8002e00:	e7d2      	b.n	8002da8 <_svfiprintf_r+0x9c>
 8002e02:	9b03      	ldr	r3, [sp, #12]
 8002e04:	1d19      	adds	r1, r3, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	9103      	str	r1, [sp, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bfbb      	ittet	lt
 8002e0e:	425b      	neglt	r3, r3
 8002e10:	f042 0202 	orrlt.w	r2, r2, #2
 8002e14:	9307      	strge	r3, [sp, #28]
 8002e16:	9307      	strlt	r3, [sp, #28]
 8002e18:	bfb8      	it	lt
 8002e1a:	9204      	strlt	r2, [sp, #16]
 8002e1c:	7823      	ldrb	r3, [r4, #0]
 8002e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e20:	d10c      	bne.n	8002e3c <_svfiprintf_r+0x130>
 8002e22:	7863      	ldrb	r3, [r4, #1]
 8002e24:	2b2a      	cmp	r3, #42	; 0x2a
 8002e26:	d135      	bne.n	8002e94 <_svfiprintf_r+0x188>
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	9203      	str	r2, [sp, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bfb8      	it	lt
 8002e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e38:	3402      	adds	r4, #2
 8002e3a:	9305      	str	r3, [sp, #20]
 8002e3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f08 <_svfiprintf_r+0x1fc>
 8002e40:	7821      	ldrb	r1, [r4, #0]
 8002e42:	2203      	movs	r2, #3
 8002e44:	4650      	mov	r0, sl
 8002e46:	f7fd f9c3 	bl	80001d0 <memchr>
 8002e4a:	b140      	cbz	r0, 8002e5e <_svfiprintf_r+0x152>
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	eba0 000a 	sub.w	r0, r0, sl
 8002e52:	fa03 f000 	lsl.w	r0, r3, r0
 8002e56:	9b04      	ldr	r3, [sp, #16]
 8002e58:	4303      	orrs	r3, r0
 8002e5a:	3401      	adds	r4, #1
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e62:	4826      	ldr	r0, [pc, #152]	; (8002efc <_svfiprintf_r+0x1f0>)
 8002e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e68:	2206      	movs	r2, #6
 8002e6a:	f7fd f9b1 	bl	80001d0 <memchr>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d038      	beq.n	8002ee4 <_svfiprintf_r+0x1d8>
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <_svfiprintf_r+0x1f4>)
 8002e74:	bb1b      	cbnz	r3, 8002ebe <_svfiprintf_r+0x1b2>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3307      	adds	r3, #7
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	3308      	adds	r3, #8
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e84:	4433      	add	r3, r6
 8002e86:	9309      	str	r3, [sp, #36]	; 0x24
 8002e88:	e767      	b.n	8002d5a <_svfiprintf_r+0x4e>
 8002e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e8e:	460c      	mov	r4, r1
 8002e90:	2001      	movs	r0, #1
 8002e92:	e7a5      	b.n	8002de0 <_svfiprintf_r+0xd4>
 8002e94:	2300      	movs	r3, #0
 8002e96:	3401      	adds	r4, #1
 8002e98:	9305      	str	r3, [sp, #20]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 0c0a 	mov.w	ip, #10
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea6:	3a30      	subs	r2, #48	; 0x30
 8002ea8:	2a09      	cmp	r2, #9
 8002eaa:	d903      	bls.n	8002eb4 <_svfiprintf_r+0x1a8>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0c5      	beq.n	8002e3c <_svfiprintf_r+0x130>
 8002eb0:	9105      	str	r1, [sp, #20]
 8002eb2:	e7c3      	b.n	8002e3c <_svfiprintf_r+0x130>
 8002eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eb8:	4604      	mov	r4, r0
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e7f0      	b.n	8002ea0 <_svfiprintf_r+0x194>
 8002ebe:	ab03      	add	r3, sp, #12
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	462a      	mov	r2, r5
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <_svfiprintf_r+0x1f8>)
 8002ec6:	a904      	add	r1, sp, #16
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f3af 8000 	nop.w
 8002ece:	1c42      	adds	r2, r0, #1
 8002ed0:	4606      	mov	r6, r0
 8002ed2:	d1d6      	bne.n	8002e82 <_svfiprintf_r+0x176>
 8002ed4:	89ab      	ldrh	r3, [r5, #12]
 8002ed6:	065b      	lsls	r3, r3, #25
 8002ed8:	f53f af2c 	bmi.w	8002d34 <_svfiprintf_r+0x28>
 8002edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ede:	b01d      	add	sp, #116	; 0x74
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	ab03      	add	r3, sp, #12
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	462a      	mov	r2, r5
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <_svfiprintf_r+0x1f8>)
 8002eec:	a904      	add	r1, sp, #16
 8002eee:	4638      	mov	r0, r7
 8002ef0:	f000 f87a 	bl	8002fe8 <_printf_i>
 8002ef4:	e7eb      	b.n	8002ece <_svfiprintf_r+0x1c2>
 8002ef6:	bf00      	nop
 8002ef8:	080034c8 	.word	0x080034c8
 8002efc:	080034d2 	.word	0x080034d2
 8002f00:	00000000 	.word	0x00000000
 8002f04:	08002c55 	.word	0x08002c55
 8002f08:	080034ce 	.word	0x080034ce

08002f0c <_printf_common>:
 8002f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	4616      	mov	r6, r2
 8002f12:	4699      	mov	r9, r3
 8002f14:	688a      	ldr	r2, [r1, #8]
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bfb8      	it	lt
 8002f20:	4613      	movlt	r3, r2
 8002f22:	6033      	str	r3, [r6, #0]
 8002f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f28:	4607      	mov	r7, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	b10a      	cbz	r2, 8002f32 <_printf_common+0x26>
 8002f2e:	3301      	adds	r3, #1
 8002f30:	6033      	str	r3, [r6, #0]
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	0699      	lsls	r1, r3, #26
 8002f36:	bf42      	ittt	mi
 8002f38:	6833      	ldrmi	r3, [r6, #0]
 8002f3a:	3302      	addmi	r3, #2
 8002f3c:	6033      	strmi	r3, [r6, #0]
 8002f3e:	6825      	ldr	r5, [r4, #0]
 8002f40:	f015 0506 	ands.w	r5, r5, #6
 8002f44:	d106      	bne.n	8002f54 <_printf_common+0x48>
 8002f46:	f104 0a19 	add.w	sl, r4, #25
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	6832      	ldr	r2, [r6, #0]
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	42ab      	cmp	r3, r5
 8002f52:	dc26      	bgt.n	8002fa2 <_printf_common+0x96>
 8002f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f58:	1e13      	subs	r3, r2, #0
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	bf18      	it	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	0692      	lsls	r2, r2, #26
 8002f62:	d42b      	bmi.n	8002fbc <_printf_common+0xb0>
 8002f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f68:	4649      	mov	r1, r9
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	47c0      	blx	r8
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d01e      	beq.n	8002fb0 <_printf_common+0xa4>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	68e5      	ldr	r5, [r4, #12]
 8002f76:	6832      	ldr	r2, [r6, #0]
 8002f78:	f003 0306 	and.w	r3, r3, #6
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	bf08      	it	eq
 8002f80:	1aad      	subeq	r5, r5, r2
 8002f82:	68a3      	ldr	r3, [r4, #8]
 8002f84:	6922      	ldr	r2, [r4, #16]
 8002f86:	bf0c      	ite	eq
 8002f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f8c:	2500      	movne	r5, #0
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	bfc4      	itt	gt
 8002f92:	1a9b      	subgt	r3, r3, r2
 8002f94:	18ed      	addgt	r5, r5, r3
 8002f96:	2600      	movs	r6, #0
 8002f98:	341a      	adds	r4, #26
 8002f9a:	42b5      	cmp	r5, r6
 8002f9c:	d11a      	bne.n	8002fd4 <_printf_common+0xc8>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e008      	b.n	8002fb4 <_printf_common+0xa8>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	4652      	mov	r2, sl
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	4638      	mov	r0, r7
 8002faa:	47c0      	blx	r8
 8002fac:	3001      	adds	r0, #1
 8002fae:	d103      	bne.n	8002fb8 <_printf_common+0xac>
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb8:	3501      	adds	r5, #1
 8002fba:	e7c6      	b.n	8002f4a <_printf_common+0x3e>
 8002fbc:	18e1      	adds	r1, r4, r3
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	2030      	movs	r0, #48	; 0x30
 8002fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fc6:	4422      	add	r2, r4
 8002fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	e7c7      	b.n	8002f64 <_printf_common+0x58>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	4649      	mov	r1, r9
 8002fda:	4638      	mov	r0, r7
 8002fdc:	47c0      	blx	r8
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d0e6      	beq.n	8002fb0 <_printf_common+0xa4>
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7d9      	b.n	8002f9a <_printf_common+0x8e>
	...

08002fe8 <_printf_i>:
 8002fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fec:	460c      	mov	r4, r1
 8002fee:	4691      	mov	r9, r2
 8002ff0:	7e27      	ldrb	r7, [r4, #24]
 8002ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ff4:	2f78      	cmp	r7, #120	; 0x78
 8002ff6:	4680      	mov	r8, r0
 8002ff8:	469a      	mov	sl, r3
 8002ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffe:	d807      	bhi.n	8003010 <_printf_i+0x28>
 8003000:	2f62      	cmp	r7, #98	; 0x62
 8003002:	d80a      	bhi.n	800301a <_printf_i+0x32>
 8003004:	2f00      	cmp	r7, #0
 8003006:	f000 80d8 	beq.w	80031ba <_printf_i+0x1d2>
 800300a:	2f58      	cmp	r7, #88	; 0x58
 800300c:	f000 80a3 	beq.w	8003156 <_printf_i+0x16e>
 8003010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003018:	e03a      	b.n	8003090 <_printf_i+0xa8>
 800301a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800301e:	2b15      	cmp	r3, #21
 8003020:	d8f6      	bhi.n	8003010 <_printf_i+0x28>
 8003022:	a001      	add	r0, pc, #4	; (adr r0, 8003028 <_printf_i+0x40>)
 8003024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003028:	08003081 	.word	0x08003081
 800302c:	08003095 	.word	0x08003095
 8003030:	08003011 	.word	0x08003011
 8003034:	08003011 	.word	0x08003011
 8003038:	08003011 	.word	0x08003011
 800303c:	08003011 	.word	0x08003011
 8003040:	08003095 	.word	0x08003095
 8003044:	08003011 	.word	0x08003011
 8003048:	08003011 	.word	0x08003011
 800304c:	08003011 	.word	0x08003011
 8003050:	08003011 	.word	0x08003011
 8003054:	080031a1 	.word	0x080031a1
 8003058:	080030c5 	.word	0x080030c5
 800305c:	08003183 	.word	0x08003183
 8003060:	08003011 	.word	0x08003011
 8003064:	08003011 	.word	0x08003011
 8003068:	080031c3 	.word	0x080031c3
 800306c:	08003011 	.word	0x08003011
 8003070:	080030c5 	.word	0x080030c5
 8003074:	08003011 	.word	0x08003011
 8003078:	08003011 	.word	0x08003011
 800307c:	0800318b 	.word	0x0800318b
 8003080:	680b      	ldr	r3, [r1, #0]
 8003082:	1d1a      	adds	r2, r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	600a      	str	r2, [r1, #0]
 8003088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800308c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003090:	2301      	movs	r3, #1
 8003092:	e0a3      	b.n	80031dc <_printf_i+0x1f4>
 8003094:	6825      	ldr	r5, [r4, #0]
 8003096:	6808      	ldr	r0, [r1, #0]
 8003098:	062e      	lsls	r6, r5, #24
 800309a:	f100 0304 	add.w	r3, r0, #4
 800309e:	d50a      	bpl.n	80030b6 <_printf_i+0xce>
 80030a0:	6805      	ldr	r5, [r0, #0]
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	da03      	bge.n	80030b0 <_printf_i+0xc8>
 80030a8:	232d      	movs	r3, #45	; 0x2d
 80030aa:	426d      	negs	r5, r5
 80030ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b0:	485e      	ldr	r0, [pc, #376]	; (800322c <_printf_i+0x244>)
 80030b2:	230a      	movs	r3, #10
 80030b4:	e019      	b.n	80030ea <_printf_i+0x102>
 80030b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030ba:	6805      	ldr	r5, [r0, #0]
 80030bc:	600b      	str	r3, [r1, #0]
 80030be:	bf18      	it	ne
 80030c0:	b22d      	sxthne	r5, r5
 80030c2:	e7ef      	b.n	80030a4 <_printf_i+0xbc>
 80030c4:	680b      	ldr	r3, [r1, #0]
 80030c6:	6825      	ldr	r5, [r4, #0]
 80030c8:	1d18      	adds	r0, r3, #4
 80030ca:	6008      	str	r0, [r1, #0]
 80030cc:	0628      	lsls	r0, r5, #24
 80030ce:	d501      	bpl.n	80030d4 <_printf_i+0xec>
 80030d0:	681d      	ldr	r5, [r3, #0]
 80030d2:	e002      	b.n	80030da <_printf_i+0xf2>
 80030d4:	0669      	lsls	r1, r5, #25
 80030d6:	d5fb      	bpl.n	80030d0 <_printf_i+0xe8>
 80030d8:	881d      	ldrh	r5, [r3, #0]
 80030da:	4854      	ldr	r0, [pc, #336]	; (800322c <_printf_i+0x244>)
 80030dc:	2f6f      	cmp	r7, #111	; 0x6f
 80030de:	bf0c      	ite	eq
 80030e0:	2308      	moveq	r3, #8
 80030e2:	230a      	movne	r3, #10
 80030e4:	2100      	movs	r1, #0
 80030e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ea:	6866      	ldr	r6, [r4, #4]
 80030ec:	60a6      	str	r6, [r4, #8]
 80030ee:	2e00      	cmp	r6, #0
 80030f0:	bfa2      	ittt	ge
 80030f2:	6821      	ldrge	r1, [r4, #0]
 80030f4:	f021 0104 	bicge.w	r1, r1, #4
 80030f8:	6021      	strge	r1, [r4, #0]
 80030fa:	b90d      	cbnz	r5, 8003100 <_printf_i+0x118>
 80030fc:	2e00      	cmp	r6, #0
 80030fe:	d04d      	beq.n	800319c <_printf_i+0x1b4>
 8003100:	4616      	mov	r6, r2
 8003102:	fbb5 f1f3 	udiv	r1, r5, r3
 8003106:	fb03 5711 	mls	r7, r3, r1, r5
 800310a:	5dc7      	ldrb	r7, [r0, r7]
 800310c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003110:	462f      	mov	r7, r5
 8003112:	42bb      	cmp	r3, r7
 8003114:	460d      	mov	r5, r1
 8003116:	d9f4      	bls.n	8003102 <_printf_i+0x11a>
 8003118:	2b08      	cmp	r3, #8
 800311a:	d10b      	bne.n	8003134 <_printf_i+0x14c>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	07df      	lsls	r7, r3, #31
 8003120:	d508      	bpl.n	8003134 <_printf_i+0x14c>
 8003122:	6923      	ldr	r3, [r4, #16]
 8003124:	6861      	ldr	r1, [r4, #4]
 8003126:	4299      	cmp	r1, r3
 8003128:	bfde      	ittt	le
 800312a:	2330      	movle	r3, #48	; 0x30
 800312c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003134:	1b92      	subs	r2, r2, r6
 8003136:	6122      	str	r2, [r4, #16]
 8003138:	f8cd a000 	str.w	sl, [sp]
 800313c:	464b      	mov	r3, r9
 800313e:	aa03      	add	r2, sp, #12
 8003140:	4621      	mov	r1, r4
 8003142:	4640      	mov	r0, r8
 8003144:	f7ff fee2 	bl	8002f0c <_printf_common>
 8003148:	3001      	adds	r0, #1
 800314a:	d14c      	bne.n	80031e6 <_printf_i+0x1fe>
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	b004      	add	sp, #16
 8003152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003156:	4835      	ldr	r0, [pc, #212]	; (800322c <_printf_i+0x244>)
 8003158:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	680e      	ldr	r6, [r1, #0]
 8003160:	061f      	lsls	r7, r3, #24
 8003162:	f856 5b04 	ldr.w	r5, [r6], #4
 8003166:	600e      	str	r6, [r1, #0]
 8003168:	d514      	bpl.n	8003194 <_printf_i+0x1ac>
 800316a:	07d9      	lsls	r1, r3, #31
 800316c:	bf44      	itt	mi
 800316e:	f043 0320 	orrmi.w	r3, r3, #32
 8003172:	6023      	strmi	r3, [r4, #0]
 8003174:	b91d      	cbnz	r5, 800317e <_printf_i+0x196>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	f023 0320 	bic.w	r3, r3, #32
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	2310      	movs	r3, #16
 8003180:	e7b0      	b.n	80030e4 <_printf_i+0xfc>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	2378      	movs	r3, #120	; 0x78
 800318c:	4828      	ldr	r0, [pc, #160]	; (8003230 <_printf_i+0x248>)
 800318e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003192:	e7e3      	b.n	800315c <_printf_i+0x174>
 8003194:	065e      	lsls	r6, r3, #25
 8003196:	bf48      	it	mi
 8003198:	b2ad      	uxthmi	r5, r5
 800319a:	e7e6      	b.n	800316a <_printf_i+0x182>
 800319c:	4616      	mov	r6, r2
 800319e:	e7bb      	b.n	8003118 <_printf_i+0x130>
 80031a0:	680b      	ldr	r3, [r1, #0]
 80031a2:	6826      	ldr	r6, [r4, #0]
 80031a4:	6960      	ldr	r0, [r4, #20]
 80031a6:	1d1d      	adds	r5, r3, #4
 80031a8:	600d      	str	r5, [r1, #0]
 80031aa:	0635      	lsls	r5, r6, #24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	d501      	bpl.n	80031b4 <_printf_i+0x1cc>
 80031b0:	6018      	str	r0, [r3, #0]
 80031b2:	e002      	b.n	80031ba <_printf_i+0x1d2>
 80031b4:	0671      	lsls	r1, r6, #25
 80031b6:	d5fb      	bpl.n	80031b0 <_printf_i+0x1c8>
 80031b8:	8018      	strh	r0, [r3, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	6123      	str	r3, [r4, #16]
 80031be:	4616      	mov	r6, r2
 80031c0:	e7ba      	b.n	8003138 <_printf_i+0x150>
 80031c2:	680b      	ldr	r3, [r1, #0]
 80031c4:	1d1a      	adds	r2, r3, #4
 80031c6:	600a      	str	r2, [r1, #0]
 80031c8:	681e      	ldr	r6, [r3, #0]
 80031ca:	6862      	ldr	r2, [r4, #4]
 80031cc:	2100      	movs	r1, #0
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7fc fffe 	bl	80001d0 <memchr>
 80031d4:	b108      	cbz	r0, 80031da <_printf_i+0x1f2>
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	6060      	str	r0, [r4, #4]
 80031da:	6863      	ldr	r3, [r4, #4]
 80031dc:	6123      	str	r3, [r4, #16]
 80031de:	2300      	movs	r3, #0
 80031e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e4:	e7a8      	b.n	8003138 <_printf_i+0x150>
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	4632      	mov	r2, r6
 80031ea:	4649      	mov	r1, r9
 80031ec:	4640      	mov	r0, r8
 80031ee:	47d0      	blx	sl
 80031f0:	3001      	adds	r0, #1
 80031f2:	d0ab      	beq.n	800314c <_printf_i+0x164>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	079b      	lsls	r3, r3, #30
 80031f8:	d413      	bmi.n	8003222 <_printf_i+0x23a>
 80031fa:	68e0      	ldr	r0, [r4, #12]
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	4298      	cmp	r0, r3
 8003200:	bfb8      	it	lt
 8003202:	4618      	movlt	r0, r3
 8003204:	e7a4      	b.n	8003150 <_printf_i+0x168>
 8003206:	2301      	movs	r3, #1
 8003208:	4632      	mov	r2, r6
 800320a:	4649      	mov	r1, r9
 800320c:	4640      	mov	r0, r8
 800320e:	47d0      	blx	sl
 8003210:	3001      	adds	r0, #1
 8003212:	d09b      	beq.n	800314c <_printf_i+0x164>
 8003214:	3501      	adds	r5, #1
 8003216:	68e3      	ldr	r3, [r4, #12]
 8003218:	9903      	ldr	r1, [sp, #12]
 800321a:	1a5b      	subs	r3, r3, r1
 800321c:	42ab      	cmp	r3, r5
 800321e:	dcf2      	bgt.n	8003206 <_printf_i+0x21e>
 8003220:	e7eb      	b.n	80031fa <_printf_i+0x212>
 8003222:	2500      	movs	r5, #0
 8003224:	f104 0619 	add.w	r6, r4, #25
 8003228:	e7f5      	b.n	8003216 <_printf_i+0x22e>
 800322a:	bf00      	nop
 800322c:	080034d9 	.word	0x080034d9
 8003230:	080034ea 	.word	0x080034ea

08003234 <memcpy>:
 8003234:	440a      	add	r2, r1
 8003236:	4291      	cmp	r1, r2
 8003238:	f100 33ff 	add.w	r3, r0, #4294967295
 800323c:	d100      	bne.n	8003240 <memcpy+0xc>
 800323e:	4770      	bx	lr
 8003240:	b510      	push	{r4, lr}
 8003242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800324a:	4291      	cmp	r1, r2
 800324c:	d1f9      	bne.n	8003242 <memcpy+0xe>
 800324e:	bd10      	pop	{r4, pc}

08003250 <memmove>:
 8003250:	4288      	cmp	r0, r1
 8003252:	b510      	push	{r4, lr}
 8003254:	eb01 0402 	add.w	r4, r1, r2
 8003258:	d902      	bls.n	8003260 <memmove+0x10>
 800325a:	4284      	cmp	r4, r0
 800325c:	4623      	mov	r3, r4
 800325e:	d807      	bhi.n	8003270 <memmove+0x20>
 8003260:	1e43      	subs	r3, r0, #1
 8003262:	42a1      	cmp	r1, r4
 8003264:	d008      	beq.n	8003278 <memmove+0x28>
 8003266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800326a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800326e:	e7f8      	b.n	8003262 <memmove+0x12>
 8003270:	4402      	add	r2, r0
 8003272:	4601      	mov	r1, r0
 8003274:	428a      	cmp	r2, r1
 8003276:	d100      	bne.n	800327a <memmove+0x2a>
 8003278:	bd10      	pop	{r4, pc}
 800327a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800327e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003282:	e7f7      	b.n	8003274 <memmove+0x24>

08003284 <_free_r>:
 8003284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003286:	2900      	cmp	r1, #0
 8003288:	d048      	beq.n	800331c <_free_r+0x98>
 800328a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328e:	9001      	str	r0, [sp, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f1a1 0404 	sub.w	r4, r1, #4
 8003296:	bfb8      	it	lt
 8003298:	18e4      	addlt	r4, r4, r3
 800329a:	f000 f8d3 	bl	8003444 <__malloc_lock>
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <_free_r+0x9c>)
 80032a0:	9801      	ldr	r0, [sp, #4]
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	4615      	mov	r5, r2
 80032a6:	b933      	cbnz	r3, 80032b6 <_free_r+0x32>
 80032a8:	6063      	str	r3, [r4, #4]
 80032aa:	6014      	str	r4, [r2, #0]
 80032ac:	b003      	add	sp, #12
 80032ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032b2:	f000 b8cd 	b.w	8003450 <__malloc_unlock>
 80032b6:	42a3      	cmp	r3, r4
 80032b8:	d90b      	bls.n	80032d2 <_free_r+0x4e>
 80032ba:	6821      	ldr	r1, [r4, #0]
 80032bc:	1862      	adds	r2, r4, r1
 80032be:	4293      	cmp	r3, r2
 80032c0:	bf04      	itt	eq
 80032c2:	681a      	ldreq	r2, [r3, #0]
 80032c4:	685b      	ldreq	r3, [r3, #4]
 80032c6:	6063      	str	r3, [r4, #4]
 80032c8:	bf04      	itt	eq
 80032ca:	1852      	addeq	r2, r2, r1
 80032cc:	6022      	streq	r2, [r4, #0]
 80032ce:	602c      	str	r4, [r5, #0]
 80032d0:	e7ec      	b.n	80032ac <_free_r+0x28>
 80032d2:	461a      	mov	r2, r3
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b10b      	cbz	r3, 80032dc <_free_r+0x58>
 80032d8:	42a3      	cmp	r3, r4
 80032da:	d9fa      	bls.n	80032d2 <_free_r+0x4e>
 80032dc:	6811      	ldr	r1, [r2, #0]
 80032de:	1855      	adds	r5, r2, r1
 80032e0:	42a5      	cmp	r5, r4
 80032e2:	d10b      	bne.n	80032fc <_free_r+0x78>
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	4421      	add	r1, r4
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	42a3      	cmp	r3, r4
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	d1dd      	bne.n	80032ac <_free_r+0x28>
 80032f0:	681c      	ldr	r4, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	6053      	str	r3, [r2, #4]
 80032f6:	4421      	add	r1, r4
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	e7d7      	b.n	80032ac <_free_r+0x28>
 80032fc:	d902      	bls.n	8003304 <_free_r+0x80>
 80032fe:	230c      	movs	r3, #12
 8003300:	6003      	str	r3, [r0, #0]
 8003302:	e7d3      	b.n	80032ac <_free_r+0x28>
 8003304:	6825      	ldr	r5, [r4, #0]
 8003306:	1961      	adds	r1, r4, r5
 8003308:	428b      	cmp	r3, r1
 800330a:	bf04      	itt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	bf04      	itt	eq
 8003314:	1949      	addeq	r1, r1, r5
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	6054      	str	r4, [r2, #4]
 800331a:	e7c7      	b.n	80032ac <_free_r+0x28>
 800331c:	b003      	add	sp, #12
 800331e:	bd30      	pop	{r4, r5, pc}
 8003320:	20000094 	.word	0x20000094

08003324 <_malloc_r>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	1ccd      	adds	r5, r1, #3
 8003328:	f025 0503 	bic.w	r5, r5, #3
 800332c:	3508      	adds	r5, #8
 800332e:	2d0c      	cmp	r5, #12
 8003330:	bf38      	it	cc
 8003332:	250c      	movcc	r5, #12
 8003334:	2d00      	cmp	r5, #0
 8003336:	4606      	mov	r6, r0
 8003338:	db01      	blt.n	800333e <_malloc_r+0x1a>
 800333a:	42a9      	cmp	r1, r5
 800333c:	d903      	bls.n	8003346 <_malloc_r+0x22>
 800333e:	230c      	movs	r3, #12
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	2000      	movs	r0, #0
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003346:	f000 f87d 	bl	8003444 <__malloc_lock>
 800334a:	4921      	ldr	r1, [pc, #132]	; (80033d0 <_malloc_r+0xac>)
 800334c:	680a      	ldr	r2, [r1, #0]
 800334e:	4614      	mov	r4, r2
 8003350:	b99c      	cbnz	r4, 800337a <_malloc_r+0x56>
 8003352:	4f20      	ldr	r7, [pc, #128]	; (80033d4 <_malloc_r+0xb0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b923      	cbnz	r3, 8003362 <_malloc_r+0x3e>
 8003358:	4621      	mov	r1, r4
 800335a:	4630      	mov	r0, r6
 800335c:	f000 f862 	bl	8003424 <_sbrk_r>
 8003360:	6038      	str	r0, [r7, #0]
 8003362:	4629      	mov	r1, r5
 8003364:	4630      	mov	r0, r6
 8003366:	f000 f85d 	bl	8003424 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d123      	bne.n	80033b6 <_malloc_r+0x92>
 800336e:	230c      	movs	r3, #12
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	4630      	mov	r0, r6
 8003374:	f000 f86c 	bl	8003450 <__malloc_unlock>
 8003378:	e7e3      	b.n	8003342 <_malloc_r+0x1e>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	1b5b      	subs	r3, r3, r5
 800337e:	d417      	bmi.n	80033b0 <_malloc_r+0x8c>
 8003380:	2b0b      	cmp	r3, #11
 8003382:	d903      	bls.n	800338c <_malloc_r+0x68>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	441c      	add	r4, r3
 8003388:	6025      	str	r5, [r4, #0]
 800338a:	e004      	b.n	8003396 <_malloc_r+0x72>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	42a2      	cmp	r2, r4
 8003390:	bf0c      	ite	eq
 8003392:	600b      	streq	r3, [r1, #0]
 8003394:	6053      	strne	r3, [r2, #4]
 8003396:	4630      	mov	r0, r6
 8003398:	f000 f85a 	bl	8003450 <__malloc_unlock>
 800339c:	f104 000b 	add.w	r0, r4, #11
 80033a0:	1d23      	adds	r3, r4, #4
 80033a2:	f020 0007 	bic.w	r0, r0, #7
 80033a6:	1ac2      	subs	r2, r0, r3
 80033a8:	d0cc      	beq.n	8003344 <_malloc_r+0x20>
 80033aa:	1a1b      	subs	r3, r3, r0
 80033ac:	50a3      	str	r3, [r4, r2]
 80033ae:	e7c9      	b.n	8003344 <_malloc_r+0x20>
 80033b0:	4622      	mov	r2, r4
 80033b2:	6864      	ldr	r4, [r4, #4]
 80033b4:	e7cc      	b.n	8003350 <_malloc_r+0x2c>
 80033b6:	1cc4      	adds	r4, r0, #3
 80033b8:	f024 0403 	bic.w	r4, r4, #3
 80033bc:	42a0      	cmp	r0, r4
 80033be:	d0e3      	beq.n	8003388 <_malloc_r+0x64>
 80033c0:	1a21      	subs	r1, r4, r0
 80033c2:	4630      	mov	r0, r6
 80033c4:	f000 f82e 	bl	8003424 <_sbrk_r>
 80033c8:	3001      	adds	r0, #1
 80033ca:	d1dd      	bne.n	8003388 <_malloc_r+0x64>
 80033cc:	e7cf      	b.n	800336e <_malloc_r+0x4a>
 80033ce:	bf00      	nop
 80033d0:	20000094 	.word	0x20000094
 80033d4:	20000098 	.word	0x20000098

080033d8 <_realloc_r>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	4607      	mov	r7, r0
 80033dc:	4614      	mov	r4, r2
 80033de:	460e      	mov	r6, r1
 80033e0:	b921      	cbnz	r1, 80033ec <_realloc_r+0x14>
 80033e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033e6:	4611      	mov	r1, r2
 80033e8:	f7ff bf9c 	b.w	8003324 <_malloc_r>
 80033ec:	b922      	cbnz	r2, 80033f8 <_realloc_r+0x20>
 80033ee:	f7ff ff49 	bl	8003284 <_free_r>
 80033f2:	4625      	mov	r5, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f8:	f000 f830 	bl	800345c <_malloc_usable_size_r>
 80033fc:	42a0      	cmp	r0, r4
 80033fe:	d20f      	bcs.n	8003420 <_realloc_r+0x48>
 8003400:	4621      	mov	r1, r4
 8003402:	4638      	mov	r0, r7
 8003404:	f7ff ff8e 	bl	8003324 <_malloc_r>
 8003408:	4605      	mov	r5, r0
 800340a:	2800      	cmp	r0, #0
 800340c:	d0f2      	beq.n	80033f4 <_realloc_r+0x1c>
 800340e:	4631      	mov	r1, r6
 8003410:	4622      	mov	r2, r4
 8003412:	f7ff ff0f 	bl	8003234 <memcpy>
 8003416:	4631      	mov	r1, r6
 8003418:	4638      	mov	r0, r7
 800341a:	f7ff ff33 	bl	8003284 <_free_r>
 800341e:	e7e9      	b.n	80033f4 <_realloc_r+0x1c>
 8003420:	4635      	mov	r5, r6
 8003422:	e7e7      	b.n	80033f4 <_realloc_r+0x1c>

08003424 <_sbrk_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4d06      	ldr	r5, [pc, #24]	; (8003440 <_sbrk_r+0x1c>)
 8003428:	2300      	movs	r3, #0
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	602b      	str	r3, [r5, #0]
 8003430:	f7fd fe20 	bl	8001074 <_sbrk>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d102      	bne.n	800343e <_sbrk_r+0x1a>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	b103      	cbz	r3, 800343e <_sbrk_r+0x1a>
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	20000130 	.word	0x20000130

08003444 <__malloc_lock>:
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <__malloc_lock+0x8>)
 8003446:	f000 b811 	b.w	800346c <__retarget_lock_acquire_recursive>
 800344a:	bf00      	nop
 800344c:	20000138 	.word	0x20000138

08003450 <__malloc_unlock>:
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <__malloc_unlock+0x8>)
 8003452:	f000 b80c 	b.w	800346e <__retarget_lock_release_recursive>
 8003456:	bf00      	nop
 8003458:	20000138 	.word	0x20000138

0800345c <_malloc_usable_size_r>:
 800345c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003460:	1f18      	subs	r0, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	bfbc      	itt	lt
 8003466:	580b      	ldrlt	r3, [r1, r0]
 8003468:	18c0      	addlt	r0, r0, r3
 800346a:	4770      	bx	lr

0800346c <__retarget_lock_acquire_recursive>:
 800346c:	4770      	bx	lr

0800346e <__retarget_lock_release_recursive>:
 800346e:	4770      	bx	lr

08003470 <_init>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr

0800347c <_fini>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr
