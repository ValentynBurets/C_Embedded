
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  080037fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080037fc  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214c  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dba  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b050  00000000  00000000  000519b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8ce2  00000000  00000000  0005ca02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001256e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  00125738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037b8 	.word	0x080037b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037b8 	.word	0x080037b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa48 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f836 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8b6 	bl	800063c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */
	//    MX_USB_HOST_Process();
	 //turn on red and blue
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80004d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d4:	4817      	ldr	r0, [pc, #92]	; (8000534 <main+0x74>)
 80004d6:	f000 fd70 	bl	8000fba <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004de:	4815      	ldr	r0, [pc, #84]	; (8000534 <main+0x74>)
 80004e0:	f000 fd6b 	bl	8000fba <HAL_GPIO_TogglePin>

	 HAL_Delay(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f000 faa8 	bl	8000a3c <HAL_Delay>
	 //turn Off red and blue
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80004ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <main+0x74>)
 80004f2:	f000 fd62 	bl	8000fba <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80004f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <main+0x74>)
 80004fc:	f000 fd5d 	bl	8000fba <HAL_GPIO_TogglePin>

	 //turn on green and orange
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <main+0x74>)
 8000506:	f000 fd58 	bl	8000fba <HAL_GPIO_TogglePin>
     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x74>)
 8000510:	f000 fd53 	bl	8000fba <HAL_GPIO_TogglePin>

     HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 fa90 	bl	8000a3c <HAL_Delay>
     //turn off green and orange
     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800051c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <main+0x74>)
 8000522:	f000 fd4a 	bl	8000fba <HAL_GPIO_TogglePin>
     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <main+0x74>)
 800052c:	f000 fd45 	bl	8000fba <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000530:	e7ce      	b.n	80004d0 <main+0x10>
 8000532:	bf00      	nop
 8000534:	40020c00 	.word	0x40020c00

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b098      	sub	sp, #96	; 0x60
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 f92e 	bl	80037a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <SystemClock_Config+0xfc>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	4a30      	ldr	r2, [pc, #192]	; (8000634 <SystemClock_Config+0xfc>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6413      	str	r3, [r2, #64]	; 0x40
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <SystemClock_Config+0xfc>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <SystemClock_Config+0x100>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <SystemClock_Config+0x100>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0x100>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b6:	2308      	movs	r3, #8
 80005b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ba:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 ff9f 	bl	8002510 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005d8:	f000 f920 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fa00 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000606:	f000 f909 	bl	800081c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800060e:	23c0      	movs	r3, #192	; 0xc0
 8000610:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fbb8 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000626:	f000 f8f9 	bl	800081c <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3760      	adds	r7, #96	; 0x60
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	4b6b      	ldr	r3, [pc, #428]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a6a      	ldr	r2, [pc, #424]	; (8000804 <MX_GPIO_Init+0x1c8>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b68      	ldr	r3, [pc, #416]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	4b64      	ldr	r3, [pc, #400]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a63      	ldr	r2, [pc, #396]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a5c      	ldr	r2, [pc, #368]	; (8000804 <MX_GPIO_Init+0x1c8>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b5a      	ldr	r3, [pc, #360]	; (8000804 <MX_GPIO_Init+0x1c8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b56      	ldr	r3, [pc, #344]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a55      	ldr	r2, [pc, #340]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b4f      	ldr	r3, [pc, #316]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a4e      	ldr	r2, [pc, #312]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a47      	ldr	r2, [pc, #284]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b45      	ldr	r3, [pc, #276]	; (8000804 <MX_GPIO_Init+0x1c8>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4842      	ldr	r0, [pc, #264]	; (8000808 <MX_GPIO_Init+0x1cc>)
 8000700:	f000 fc42 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x1d0>)
 800070a:	f000 fc3d 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	2200      	movs	r2, #0
 8000710:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000714:	483e      	ldr	r0, [pc, #248]	; (8000810 <MX_GPIO_Init+0x1d4>)
 8000716:	f000 fc37 	bl	8000f88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800071a:	2301      	movs	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4836      	ldr	r0, [pc, #216]	; (800080c <MX_GPIO_Init+0x1d0>)
 8000732:	f000 fa8d 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000736:	2308      	movs	r3, #8
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	2302      	movs	r3, #2
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000746:	2305      	movs	r3, #5
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	482e      	ldr	r0, [pc, #184]	; (800080c <MX_GPIO_Init+0x1d0>)
 8000752:	f000 fa7d 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800075a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	482a      	ldr	r0, [pc, #168]	; (8000814 <MX_GPIO_Init+0x1d8>)
 800076c:	f000 fa70 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000770:	2304      	movs	r3, #4
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <MX_GPIO_Init+0x1dc>)
 8000784:	f000 fa64 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800079a:	2305      	movs	r3, #5
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_GPIO_Init+0x1dc>)
 80007a6:	f000 fa53 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <MX_GPIO_Init+0x1d4>)
 80007c4:	f000 fa44 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_GPIO_Init+0x1d4>)
 80007dc:	f000 fa38 	bl	8000c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0x1cc>)
 80007f6:	f000 fa2b 	bl	8000c50 <HAL_GPIO_Init>

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40021000 	.word	0x40021000
 800080c:	40020800 	.word	0x40020800
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	e7fe      	b.n	8000824 <Error_Handler+0x8>
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000866:	2007      	movs	r0, #7
 8000868:	f000 f9be 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89a 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <OTG_FS_IRQHandler+0x10>)
 80008d2:	f000 fb8c 	bl	8000fee <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000002c 	.word	0x2000002c

080008e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800093c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800092e:	f7ff ffd7 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f002 ff15 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000936:	f7ff fdc3 	bl	80004c0 <main>
  bx  lr    
 800093a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000948:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 800094c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000950:	20000330 	.word	0x20000330

08000954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f931 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff ff4c 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f93b 	bl	8000c36 <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f911 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000028 	.word	0x20000028

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000028 	.word	0x20000028

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_Delay+0x44>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff47 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff5c 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffb0 	bl	8000ba4 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	e16b      	b.n	8000f44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f040 815a 	bne.w	8000f3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d130      	bne.n	8000d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	091b      	lsrs	r3, r3, #4
 8000cee:	f003 0201 	and.w	r2, r3, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d017      	beq.n	8000d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d123      	bne.n	8000d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	691a      	ldr	r2, [r3, #16]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	69b9      	ldr	r1, [r7, #24]
 8000d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0203 	and.w	r2, r3, #3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80b4 	beq.w	8000f3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <HAL_GPIO_Init+0x30c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a5f      	ldr	r2, [pc, #380]	; (8000f5c <HAL_GPIO_Init+0x30c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <HAL_GPIO_Init+0x30c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000df2:	4a5b      	ldr	r2, [pc, #364]	; (8000f60 <HAL_GPIO_Init+0x310>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a52      	ldr	r2, [pc, #328]	; (8000f64 <HAL_GPIO_Init+0x314>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x226>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <HAL_GPIO_Init+0x318>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d025      	beq.n	8000e72 <HAL_GPIO_Init+0x222>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a50      	ldr	r2, [pc, #320]	; (8000f6c <HAL_GPIO_Init+0x31c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01f      	beq.n	8000e6e <HAL_GPIO_Init+0x21e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <HAL_GPIO_Init+0x320>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x21a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4e      	ldr	r2, [pc, #312]	; (8000f74 <HAL_GPIO_Init+0x324>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x216>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4d      	ldr	r2, [pc, #308]	; (8000f78 <HAL_GPIO_Init+0x328>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x212>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <HAL_GPIO_Init+0x32c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x20e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4b      	ldr	r2, [pc, #300]	; (8000f80 <HAL_GPIO_Init+0x330>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x20a>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e00e      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	e00c      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e5e:	2306      	movs	r3, #6
 8000e60:	e00a      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e008      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e66:	2304      	movs	r3, #4
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e004      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <HAL_GPIO_Init+0x228>
 8000e76:	2300      	movs	r3, #0
 8000e78:	69fa      	ldr	r2, [r7, #28]
 8000e7a:	f002 0203 	and.w	r2, r2, #3
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4093      	lsls	r3, r2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e88:	4935      	ldr	r1, [pc, #212]	; (8000f60 <HAL_GPIO_Init+0x310>)
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eba:	4a32      	ldr	r2, [pc, #200]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <HAL_GPIO_Init+0x334>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	f67f ae90 	bls.w	8000c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40021c00 	.word	0x40021c00
 8000f84:	40013c00 	.word	0x40013c00

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	400b      	ands	r3, r1
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f002 f876 	bl	80030f6 <USB_GetMode>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 80f6 	bne.w	80011fe <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f002 f85a 	bl	80030d0 <USB_ReadInterrupts>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80ec 	beq.w	80011fc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f002 f851 	bl	80030d0 <USB_ReadInterrupts>
 800102e:	4603      	mov	r3, r0
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001038:	d104      	bne.n	8001044 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001042:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f002 f841 	bl	80030d0 <USB_ReadInterrupts>
 800104e:	4603      	mov	r3, r0
 8001050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001058:	d104      	bne.n	8001064 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001062:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f002 f831 	bl	80030d0 <USB_ReadInterrupts>
 800106e:	4603      	mov	r3, r0
 8001070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001078:	d104      	bne.n	8001084 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001082:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f821 	bl	80030d0 <USB_ReadInterrupts>
 800108e:	4603      	mov	r3, r0
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b02      	cmp	r3, #2
 8001096:	d103      	bne.n	80010a0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2202      	movs	r2, #2
 800109e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 f813 	bl	80030d0 <USB_ReadInterrupts>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010b4:	d11c      	bne.n	80010f0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010be:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80010d0:	2110      	movs	r1, #16
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f001 ff60 	bl	8002f98 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80010d8:	6938      	ldr	r0, [r7, #16]
 80010da:	f001 ff81 	bl	8002fe0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f814 	bl	8003112 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f002 fab9 	bl	8003662 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 ffeb 	bl	80030d0 <USB_ReadInterrupts>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d102      	bne.n	800110c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f001 f98e 	bl	8002428 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f001 ffdd 	bl	80030d0 <USB_ReadInterrupts>
 8001116:	4603      	mov	r3, r0
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b08      	cmp	r3, #8
 800111e:	d106      	bne.n	800112e <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f002 fa82 	bl	800362a <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2208      	movs	r2, #8
 800112c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f001 ffcc 	bl	80030d0 <USB_ReadInterrupts>
 8001138:	4603      	mov	r3, r0
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b10      	cmp	r3, #16
 8001140:	d101      	bne.n	8001146 <HAL_HCD_IRQHandler+0x158>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_HCD_IRQHandler+0x15a>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d012      	beq.n	8001172 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0210 	bic.w	r2, r2, #16
 800115a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 f891 	bl	8002284 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0210 	orr.w	r2, r2, #16
 8001170:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 ffaa 	bl	80030d0 <USB_ReadInterrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001186:	d13a      	bne.n	80011fe <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fffa 	bl	8003186 <USB_HC_ReadInterrupt>
 8001192:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e025      	b.n	80011e6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	fa22 f303 	lsr.w	r3, r2, r3
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d018      	beq.n	80011e0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	015a      	lsls	r2, r3, #5
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011c4:	d106      	bne.n	80011d4 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f836 	bl	800123e <HCD_HC_IN_IRQHandler>
 80011d2:	e005      	b.n	80011e0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fc51 	bl	8001a82 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3d4      	bcc.n	800119a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	e000      	b.n	80011fe <HAL_HCD_IRQHandler+0x210>
      return;
 80011fc:	bf00      	nop
    }
  }
}
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_HCD_Stop+0x16>
 8001216:	2302      	movs	r3, #2
 8001218:	e00d      	b.n	8001236 <HAL_HCD_Stop+0x32>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 f8da 	bl	80033e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	015a      	lsls	r2, r3, #5
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4413      	add	r3, r2
 8001260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b04      	cmp	r3, #4
 800126c:	d119      	bne.n	80012a2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	015a      	lsls	r2, r3, #5
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4413      	add	r3, r2
 8001276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800127a:	461a      	mov	r2, r3
 800127c:	2304      	movs	r3, #4
 800127e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4413      	add	r3, r2
 8001288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	0151      	lsls	r1, r2, #5
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	440a      	add	r2, r1
 8001296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	60d3      	str	r3, [r2, #12]
 80012a0:	e101      	b.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b8:	d12b      	bne.n	8001312 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	015a      	lsls	r2, r3, #5
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c6:	461a      	mov	r2, r3
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	212c      	movs	r1, #44	; 0x2c
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	4413      	add	r3, r2
 80012da:	3361      	adds	r3, #97	; 0x61
 80012dc:	2207      	movs	r2, #7
 80012de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	015a      	lsls	r2, r3, #5
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	0151      	lsls	r1, r2, #5
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	440a      	add	r2, r1
 80012f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f001 ff4c 	bl	80031a8 <USB_HC_Halt>
 8001310:	e0c9      	b.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b20      	cmp	r3, #32
 8001326:	d109      	bne.n	800133c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4413      	add	r3, r2
 8001330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001334:	461a      	mov	r2, r3
 8001336:	2320      	movs	r3, #32
 8001338:	6093      	str	r3, [r2, #8]
 800133a:	e0b4      	b.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4413      	add	r3, r2
 8001344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b08      	cmp	r3, #8
 8001350:	d133      	bne.n	80013ba <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4413      	add	r3, r2
 800135a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	0151      	lsls	r1, r2, #5
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	440a      	add	r2, r1
 8001368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	212c      	movs	r1, #44	; 0x2c
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	3361      	adds	r3, #97	; 0x61
 8001380:	2205      	movs	r2, #5
 8001382:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4413      	add	r3, r2
 800138c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001390:	461a      	mov	r2, r3
 8001392:	2310      	movs	r3, #16
 8001394:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	015a      	lsls	r2, r3, #5
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4413      	add	r3, r2
 800139e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013a2:	461a      	mov	r2, r3
 80013a4:	2308      	movs	r3, #8
 80013a6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fef8 	bl	80031a8 <USB_HC_Halt>
 80013b8:	e075      	b.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d134      	bne.n	800143c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	0151      	lsls	r1, r2, #5
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	440a      	add	r2, r1
 80013e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	212c      	movs	r1, #44	; 0x2c
 80013f8:	fb01 f303 	mul.w	r3, r1, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	3361      	adds	r3, #97	; 0x61
 8001400:	2208      	movs	r2, #8
 8001402:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	015a      	lsls	r2, r3, #5
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4413      	add	r3, r2
 800140c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001410:	461a      	mov	r2, r3
 8001412:	2310      	movs	r3, #16
 8001414:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4413      	add	r3, r2
 800141e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001422:	461a      	mov	r2, r3
 8001424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001428:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f001 feb7 	bl	80031a8 <USB_HC_Halt>
 800143a:	e034      	b.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	2b80      	cmp	r3, #128	; 0x80
 8001450:	d129      	bne.n	80014a6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	0151      	lsls	r1, r2, #5
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	440a      	add	r2, r1
 8001468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	212c      	movs	r1, #44	; 0x2c
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4413      	add	r3, r2
 800147e:	3361      	adds	r3, #97	; 0x61
 8001480:	2206      	movs	r2, #6
 8001482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fe8a 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a0:	461a      	mov	r2, r3
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014bc:	d122      	bne.n	8001504 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	0151      	lsls	r1, r2, #5
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	440a      	add	r2, r1
 80014d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fe5d 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fa:	461a      	mov	r2, r3
 80014fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001500:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001502:	e2ba      	b.n	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4413      	add	r3, r2
 800150c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	f040 811b 	bne.w	8001752 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d019      	beq.n	8001558 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	3348      	adds	r3, #72	; 0x48
 8001532:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	0159      	lsls	r1, r3, #5
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	440b      	add	r3, r1
 800153c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001546:	1ad2      	subs	r2, r2, r3
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	202c      	movs	r0, #44	; 0x2c
 800154e:	fb00 f303 	mul.w	r3, r0, r3
 8001552:	440b      	add	r3, r1
 8001554:	3350      	adds	r3, #80	; 0x50
 8001556:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	3361      	adds	r3, #97	; 0x61
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	335c      	adds	r3, #92	; 0x5c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001588:	461a      	mov	r2, r3
 800158a:	2301      	movs	r3, #1
 800158c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333f      	adds	r3, #63	; 0x3f
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333f      	adds	r3, #63	; 0x3f
 80015b0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d121      	bne.n	80015fa <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	0151      	lsls	r1, r2, #5
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	440a      	add	r2, r1
 80015cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fde1 	bl	80031a8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015f2:	461a      	mov	r2, r3
 80015f4:	2310      	movs	r3, #16
 80015f6:	6093      	str	r3, [r2, #8]
 80015f8:	e066      	b.n	80016c8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	212c      	movs	r1, #44	; 0x2c
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	333f      	adds	r3, #63	; 0x3f
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d127      	bne.n	800165e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	0151      	lsls	r1, r2, #5
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	440a      	add	r2, r1
 8001624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800162c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	212c      	movs	r1, #44	; 0x2c
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	3360      	adds	r3, #96	; 0x60
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	b2d9      	uxtb	r1, r3
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	202c      	movs	r0, #44	; 0x2c
 800164a:	fb00 f303 	mul.w	r3, r0, r3
 800164e:	4413      	add	r3, r2
 8001650:	3360      	adds	r3, #96	; 0x60
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f002 f811 	bl	800367e <HAL_HCD_HC_NotifyURBChange_Callback>
 800165c:	e034      	b.n	80016c8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333f      	adds	r3, #63	; 0x3f
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d12a      	bne.n	80016c8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	212c      	movs	r1, #44	; 0x2c
 8001678:	fb01 f303 	mul.w	r3, r1, r3
 800167c:	4413      	add	r3, r2
 800167e:	3360      	adds	r3, #96	; 0x60
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3354      	adds	r3, #84	; 0x54
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f083 0301 	eor.w	r3, r3, #1
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	3354      	adds	r3, #84	; 0x54
 80016a8:	4602      	mov	r2, r0
 80016aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b2d9      	uxtb	r1, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	202c      	movs	r0, #44	; 0x2c
 80016b6:	fb00 f303 	mul.w	r3, r0, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	3360      	adds	r3, #96	; 0x60
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f001 ffdb 	bl	800367e <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d12b      	bne.n	8001728 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	3348      	adds	r3, #72	; 0x48
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	202c      	movs	r0, #44	; 0x2c
 80016e6:	fb00 f202 	mul.w	r2, r0, r2
 80016ea:	440a      	add	r2, r1
 80016ec:	3240      	adds	r2, #64	; 0x40
 80016ee:	8812      	ldrh	r2, [r2, #0]
 80016f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 81be 	beq.w	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3354      	adds	r3, #84	; 0x54
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2d8      	uxtb	r0, r3
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3354      	adds	r3, #84	; 0x54
 8001722:	4602      	mov	r2, r0
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	e1a8      	b.n	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3354      	adds	r3, #84	; 0x54
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	f083 0301 	eor.w	r3, r3, #1
 800173c:	b2d8      	uxtb	r0, r3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3354      	adds	r3, #84	; 0x54
 800174c:	4602      	mov	r2, r0
 800174e:	701a      	strb	r2, [r3, #0]
}
 8001750:	e193      	b.n	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4413      	add	r3, r2
 800175a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 8106 	bne.w	8001976 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	0151      	lsls	r1, r2, #5
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	440a      	add	r2, r1
 8001780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001784:	f023 0302 	bic.w	r3, r3, #2
 8001788:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3361      	adds	r3, #97	; 0x61
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d109      	bne.n	80017b2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3360      	adds	r3, #96	; 0x60
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e0c9      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3361      	adds	r3, #97	; 0x61
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d109      	bne.n	80017da <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	212c      	movs	r1, #44	; 0x2c
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	3360      	adds	r3, #96	; 0x60
 80017d4:	2205      	movs	r2, #5
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e0b5      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3361      	adds	r3, #97	; 0x61
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d009      	beq.n	8001802 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3361      	adds	r3, #97	; 0x61
 80017fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d150      	bne.n	80018a4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	335c      	adds	r3, #92	; 0x5c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	202c      	movs	r0, #44	; 0x2c
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	440b      	add	r3, r1
 8001820:	335c      	adds	r3, #92	; 0x5c
 8001822:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	335c      	adds	r3, #92	; 0x5c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d912      	bls.n	800185e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	335c      	adds	r3, #92	; 0x5c
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	212c      	movs	r1, #44	; 0x2c
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	4413      	add	r3, r2
 8001856:	3360      	adds	r3, #96	; 0x60
 8001858:	2204      	movs	r2, #4
 800185a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800185c:	e073      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3360      	adds	r3, #96	; 0x60
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4413      	add	r3, r2
 8001878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001886:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800188e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4413      	add	r3, r2
 8001898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80018a2:	e050      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3361      	adds	r3, #97	; 0x61
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d122      	bne.n	80018fe <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3360      	adds	r3, #96	; 0x60
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e023      	b.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	212c      	movs	r1, #44	; 0x2c
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	3361      	adds	r3, #97	; 0x61
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d119      	bne.n	8001946 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	335c      	adds	r3, #92	; 0x5c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	202c      	movs	r0, #44	; 0x2c
 800192a:	fb00 f303 	mul.w	r3, r0, r3
 800192e:	440b      	add	r3, r1
 8001930:	335c      	adds	r3, #92	; 0x5c
 8001932:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	2204      	movs	r2, #4
 8001944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001952:	461a      	mov	r2, r3
 8001954:	2302      	movs	r3, #2
 8001956:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b2d9      	uxtb	r1, r3
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	202c      	movs	r0, #44	; 0x2c
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	3360      	adds	r3, #96	; 0x60
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 fe85 	bl	800367e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001974:	e081      	b.n	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b10      	cmp	r3, #16
 800198a:	d176      	bne.n	8001a7a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	333f      	adds	r3, #63	; 0x3f
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d121      	bne.n	80019e4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	335c      	adds	r3, #92	; 0x5c
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	0151      	lsls	r1, r2, #5
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	440a      	add	r2, r1
 80019c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fbe3 	bl	80031a8 <USB_HC_Halt>
 80019e2:	e041      	b.n	8001a68 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	333f      	adds	r3, #63	; 0x3f
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	333f      	adds	r3, #63	; 0x3f
 8001a06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d12d      	bne.n	8001a68 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	335c      	adds	r3, #92	; 0x5c
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d120      	bne.n	8001a68 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3361      	adds	r3, #97	; 0x61
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	0151      	lsls	r1, r2, #5
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	440a      	add	r2, r1
 8001a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fba0 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	461a      	mov	r2, r3
 8001a76:	2310      	movs	r3, #16
 8001a78:	6093      	str	r3, [r2, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b088      	sub	sp, #32
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d119      	bne.n	8001ae6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	0151      	lsls	r1, r2, #5
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	440a      	add	r2, r1
 8001ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001ae4:	e3ca      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d13e      	bne.n	8001b7a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	333d      	adds	r3, #61	; 0x3d
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 83ac 	bne.w	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	333d      	adds	r3, #61	; 0x3d
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	0151      	lsls	r1, r2, #5
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b62:	f043 0302 	orr.w	r3, r3, #2
 8001b66:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 fb18 	bl	80031a8 <USB_HC_Halt>
}
 8001b78:	e380      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	015a      	lsls	r2, r3, #5
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b90:	d122      	bne.n	8001bd8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	0151      	lsls	r1, r2, #5
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 faf3 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	6093      	str	r3, [r2, #8]
}
 8001bd6:	e351      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d150      	bne.n	8001c90 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	335c      	adds	r3, #92	; 0x5c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d111      	bne.n	8001c3a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	333d      	adds	r3, #61	; 0x3d
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c34:	461a      	mov	r2, r3
 8001c36:	2340      	movs	r3, #64	; 0x40
 8001c38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	0151      	lsls	r1, r2, #5
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	440a      	add	r2, r1
 8001c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fa9f 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	015a      	lsls	r2, r3, #5
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c76:	461a      	mov	r2, r3
 8001c78:	2301      	movs	r3, #1
 8001c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3361      	adds	r3, #97	; 0x61
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
}
 8001c8e:	e2f5      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d13c      	bne.n	8001d20 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3361      	adds	r3, #97	; 0x61
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	212c      	movs	r1, #44	; 0x2c
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	333d      	adds	r3, #61	; 0x3d
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	335c      	adds	r3, #92	; 0x5c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	0151      	lsls	r1, r2, #5
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	440a      	add	r2, r1
 8001cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 fa4e 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2340      	movs	r3, #64	; 0x40
 8001d1c:	6093      	str	r3, [r2, #8]
}
 8001d1e:	e2ad      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d12a      	bne.n	8001d8c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	461a      	mov	r2, r3
 8001d44:	2308      	movs	r3, #8
 8001d46:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	0151      	lsls	r1, r2, #5
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 fa18 	bl	80031a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3361      	adds	r3, #97	; 0x61
 8001d86:	2205      	movs	r2, #5
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	e277      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d150      	bne.n	8001e44 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	335c      	adds	r3, #92	; 0x5c
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	212c      	movs	r1, #44	; 0x2c
 8001dba:	fb01 f303 	mul.w	r3, r1, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3361      	adds	r3, #97	; 0x61
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	333d      	adds	r3, #61	; 0x3d
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d112      	bne.n	8001e00 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	333c      	adds	r3, #60	; 0x3c
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	333d      	adds	r3, #61	; 0x3d
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	0151      	lsls	r1, r2, #5
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	440a      	add	r2, r1
 8001e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 f9bc 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2310      	movs	r3, #16
 8001e40:	6093      	str	r3, [r2, #8]
}
 8001e42:	e21b      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d174      	bne.n	8001f44 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d121      	bne.n	8001ea6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3361      	adds	r3, #97	; 0x61
 8001e70:	2206      	movs	r2, #6
 8001e72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	0151      	lsls	r1, r2, #5
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	440a      	add	r2, r1
 8001e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 f982 	bl	80031a8 <USB_HC_Halt>
 8001ea4:	e044      	b.n	8001f30 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	335c      	adds	r3, #92	; 0x5c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	202c      	movs	r0, #44	; 0x2c
 8001ebe:	fb00 f303 	mul.w	r3, r0, r3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	335c      	adds	r3, #92	; 0x5c
 8001ec6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	335c      	adds	r3, #92	; 0x5c
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d920      	bls.n	8001f1e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	212c      	movs	r1, #44	; 0x2c
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	335c      	adds	r3, #92	; 0x5c
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3360      	adds	r3, #96	; 0x60
 8001efc:	2204      	movs	r2, #4
 8001efe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	202c      	movs	r0, #44	; 0x2c
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f001 fbb1 	bl	800367e <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f1c:	e008      	b.n	8001f30 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3360      	adds	r3, #96	; 0x60
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	6093      	str	r3, [r2, #8]
}
 8001f42:	e19b      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d134      	bne.n	8001fc6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f90e 	bl	80031a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3361      	adds	r3, #97	; 0x61
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	701a      	strb	r2, [r3, #0]
}
 8001fc4:	e15a      	b.n	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	f040 814f 	bne.w	800227c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	0151      	lsls	r1, r2, #5
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff8:	f023 0302 	bic.w	r3, r3, #2
 8001ffc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3361      	adds	r3, #97	; 0x61
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d17d      	bne.n	800210e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3360      	adds	r3, #96	; 0x60
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	333f      	adds	r3, #63	; 0x3f
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d00a      	beq.n	800204e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	333f      	adds	r3, #63	; 0x3f
 8002046:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002048:	2b03      	cmp	r3, #3
 800204a:	f040 8100 	bne.w	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d113      	bne.n	800207e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3355      	adds	r3, #85	; 0x55
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3355      	adds	r3, #85	; 0x55
 800207a:	4602      	mov	r2, r0
 800207c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	f040 80e3 	bne.w	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	334c      	adds	r3, #76	; 0x4c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80d8 	beq.w	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	334c      	adds	r3, #76	; 0x4c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	202c      	movs	r0, #44	; 0x2c
 80020b4:	fb00 f202 	mul.w	r2, r0, r2
 80020b8:	440a      	add	r2, r1
 80020ba:	3240      	adds	r2, #64	; 0x40
 80020bc:	8812      	ldrh	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	3b01      	subs	r3, #1
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	202c      	movs	r0, #44	; 0x2c
 80020c8:	fb00 f202 	mul.w	r2, r0, r2
 80020cc:	440a      	add	r2, r1
 80020ce:	3240      	adds	r2, #64	; 0x40
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80b5 	beq.w	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3355      	adds	r3, #85	; 0x55
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2d8      	uxtb	r0, r3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3355      	adds	r3, #85	; 0x55
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e09f      	b.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3361      	adds	r3, #97	; 0x61
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d109      	bne.n	8002136 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3360      	adds	r3, #96	; 0x60
 8002130:	2202      	movs	r2, #2
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e08b      	b.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3361      	adds	r3, #97	; 0x61
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d109      	bne.n	800215e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3360      	adds	r3, #96	; 0x60
 8002158:	2202      	movs	r2, #2
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e077      	b.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3361      	adds	r3, #97	; 0x61
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d109      	bne.n	8002186 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	2205      	movs	r2, #5
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e063      	b.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d009      	beq.n	80021ae <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d14f      	bne.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	202c      	movs	r0, #44	; 0x2c
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	440b      	add	r3, r1
 80021cc:	335c      	adds	r3, #92	; 0x5c
 80021ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	335c      	adds	r3, #92	; 0x5c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d912      	bls.n	800220a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	335c      	adds	r3, #92	; 0x5c
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e021      	b.n	800224e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002232:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	461a      	mov	r2, r3
 800225c:	2302      	movs	r3, #2
 800225e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	b2d9      	uxtb	r1, r3
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	202c      	movs	r0, #44	; 0x2c
 800226a:	fb00 f303 	mul.w	r3, r0, r3
 800226e:	4413      	add	r3, r2
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f001 fa01 	bl	800367e <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	0c5b      	lsrs	r3, r3, #17
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d004      	beq.n	80022ca <HCD_RXQLVL_IRQHandler+0x46>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	f000 80a9 	beq.w	800241a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80022c8:	e0aa      	b.n	8002420 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a6 	beq.w	800241e <HCD_RXQLVL_IRQHandler+0x19a>
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3344      	adds	r3, #68	; 0x44
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 809b 	beq.w	800241e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3350      	adds	r3, #80	; 0x50
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	441a      	add	r2, r3
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	202c      	movs	r0, #44	; 0x2c
 8002302:	fb00 f303 	mul.w	r3, r0, r3
 8002306:	440b      	add	r3, r1
 8002308:	334c      	adds	r3, #76	; 0x4c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d87a      	bhi.n	8002406 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3344      	adds	r3, #68	; 0x44
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	b292      	uxth	r2, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f000 fe79 	bl	8003020 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3344      	adds	r3, #68	; 0x44
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	441a      	add	r2, r3
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	fb00 f303 	mul.w	r3, r0, r3
 800234c:	440b      	add	r3, r1
 800234e:	3344      	adds	r3, #68	; 0x44
 8002350:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	441a      	add	r2, r3
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	202c      	movs	r0, #44	; 0x2c
 800236c:	fb00 f303 	mul.w	r3, r0, r3
 8002370:	440b      	add	r3, r1
 8002372:	3350      	adds	r3, #80	; 0x50
 8002374:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	0cdb      	lsrs	r3, r3, #19
 8002386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3340      	adds	r3, #64	; 0x40
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d13c      	bne.n	800241e <HCD_RXQLVL_IRQHandler+0x19a>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d039      	beq.n	800241e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023c0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3354      	adds	r3, #84	; 0x54
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2d8      	uxtb	r0, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3354      	adds	r3, #84	; 0x54
 8002400:	4602      	mov	r2, r0
 8002402:	701a      	strb	r2, [r3, #0]
      break;
 8002404:	e00b      	b.n	800241e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	2204      	movs	r2, #4
 8002416:	701a      	strb	r2, [r3, #0]
      break;
 8002418:	e001      	b.n	800241e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800241e:	bf00      	nop
  }
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002454:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10b      	bne.n	8002478 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f001 f8eb 	bl	8003646 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b08      	cmp	r3, #8
 8002480:	d132      	bne.n	80024e8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d126      	bne.n	80024e2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d113      	bne.n	80024c4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a6:	d106      	bne.n	80024b6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fe2f 	bl	8003112 <USB_InitFSLSPClkSel>
 80024b4:	e011      	b.n	80024da <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fe28 	bl	8003112 <USB_InitFSLSPClkSel>
 80024c2:	e00a      	b.n	80024da <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d2:	461a      	mov	r2, r3
 80024d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024d8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f001 f8dd 	bl	800369a <HAL_HCD_PortEnabled_Callback>
 80024e0:	e002      	b.n	80024e8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f001 f8e7 	bl	80036b6 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d103      	bne.n	80024fa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f043 0320 	orr.w	r3, r3, #32
 80024f8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e264      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d075      	beq.n	800261a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800252e:	4ba3      	ldr	r3, [pc, #652]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d00c      	beq.n	8002554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4ba0      	ldr	r3, [pc, #640]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d112      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002546:	4b9d      	ldr	r3, [pc, #628]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002552:	d10b      	bne.n	800256c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05b      	beq.n	8002618 <HAL_RCC_OscConfig+0x108>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d157      	bne.n	8002618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e23f      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x74>
 8002576:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a90      	ldr	r2, [pc, #576]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b8b      	ldr	r3, [pc, #556]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a8a      	ldr	r2, [pc, #552]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xb0>
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a83      	ldr	r2, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fa2c 	bl	8000a24 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fa28 	bl	8000a24 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e204      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xc0>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fa18 	bl	8000a24 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fa14 	bl	8000a24 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1f0      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0xe8>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1c4      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4952      	ldr	r1, [pc, #328]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe f9cd 	bl	8000a24 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe f9c9 	bl	8000a24 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a5      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b46      	ldr	r3, [pc, #280]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4940      	ldr	r1, [pc, #256]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x2b0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe f9ac 	bl	8000a24 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe f9a8 	bl	8000a24 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e184      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b36      	ldr	r3, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d030      	beq.n	800275c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe f98c 	bl	8000a24 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe f988 	bl	8000a24 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e164      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x200>
 800272e:	e015      	b.n	800275c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x2b4>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe f975 	bl	8000a24 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273e:	f7fe f971 	bl	8000a24 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e14d      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a0 	beq.w	80028aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_RCC_OscConfig+0x2b8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f937 	bl	8000a24 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e011      	b.n	80027de <HAL_RCC_OscConfig+0x2ce>
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	42470000 	.word	0x42470000
 80027c4:	42470e80 	.word	0x42470e80
 80027c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe f92a 	bl	8000a24 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e106      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <HAL_RCC_OscConfig+0x4e4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f0>
 80027f2:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	e01c      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d10c      	bne.n	8002822 <HAL_RCC_OscConfig+0x312>
 8002808:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a7a      	ldr	r2, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	4b78      	ldr	r3, [pc, #480]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e00b      	b.n	800283a <HAL_RCC_OscConfig+0x32a>
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a74      	ldr	r2, [pc, #464]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d015      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002842:	f7fe f8ef 	bl	8000a24 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe f8eb 	bl	8000a24 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0c5      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ee      	beq.n	800284a <HAL_RCC_OscConfig+0x33a>
 800286c:	e014      	b.n	8002898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe f8d9 	bl	8000a24 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe f8d5 	bl	8000a24 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0af      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ee      	bne.n	8002876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a55      	ldr	r2, [pc, #340]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 809b 	beq.w	80029ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b4:	4b50      	ldr	r3, [pc, #320]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d05c      	beq.n	800297a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d141      	bne.n	800294c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe f8a9 	bl	8000a24 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe f8a5 	bl	8000a24 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e081      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4937      	ldr	r1, [pc, #220]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe f87e 	bl	8000a24 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe f87a 	bl	8000a24 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e056      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x41c>
 800294a:	e04e      	b.n	80029ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x4ec>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe f867 	bl	8000a24 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe f863 	bl	8000a24 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03f      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296c:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x44a>
 8002978:	e037      	b.n	80029ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e032      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d028      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d11a      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029be:	4293      	cmp	r3, r2
 80029c0:	d111      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40007000 	.word	0x40007000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470060 	.word	0x42470060

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0cc      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b68      	ldr	r3, [pc, #416]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d90c      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d020      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a6c:	4b53      	ldr	r3, [pc, #332]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a78:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d044      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d119      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e067      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4934      	ldr	r1, [pc, #208]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af0:	f7fd ff98 	bl	8000a24 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fd ff94 	bl	8000a24 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e04f      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 020c 	and.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1eb      	bne.n	8002af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d20c      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e032      	b.n	8002bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	490e      	ldr	r1, [pc, #56]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b86:	f000 f821 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	5ccb      	ldrb	r3, [r1, r3]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fef8 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023c00 	.word	0x40023c00
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	080037d0 	.word	0x080037d0
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be4:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d00d      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x40>
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	f200 80bd 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bfe:	e0b7      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c02:	60bb      	str	r3, [r7, #8]
       break;
 8002c04:	e0b7      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c08:	60bb      	str	r3, [r7, #8]
      break;
 8002c0a:	e0b4      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04d      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	ea02 0800 	and.w	r8, r2, r0
 8002c3a:	ea03 0901 	and.w	r9, r3, r1
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	014b      	lsls	r3, r1, #5
 8002c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c50:	0142      	lsls	r2, r0, #5
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	ebb0 0008 	subs.w	r0, r0, r8
 8002c5a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c6c:	0182      	lsls	r2, r0, #6
 8002c6e:	1a12      	subs	r2, r2, r0
 8002c70:	eb63 0301 	sbc.w	r3, r3, r1
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	00d9      	lsls	r1, r3, #3
 8002c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c82:	00d0      	lsls	r0, r2, #3
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	eb12 0208 	adds.w	r2, r2, r8
 8002c8c:	eb43 0309 	adc.w	r3, r3, r9
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0259      	lsls	r1, r3, #9
 8002c9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c9e:	0250      	lsls	r0, r2, #9
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f7fd fa8a 	bl	80001c8 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e04a      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0400 	and.w	r4, r2, r0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d06:	0182      	lsls	r2, r0, #6
 8002d08:	1a12      	subs	r2, r2, r0
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1c:	00d0      	lsls	r0, r2, #3
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d36:	0290      	lsls	r0, r2, #10
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd fa3e 	bl	80001c8 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d72:	60bb      	str	r3, [r7, #8]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d035      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002db8:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dbe:	f7fd fe31 	bl	8000a24 <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002dc6:	f7fd fe2d 	bl	8000a24 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0b0      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd8:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	019a      	lsls	r2, r3, #6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	071b      	lsls	r3, r3, #28
 8002df0:	4955      	ldr	r1, [pc, #340]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002df8:	4b52      	ldr	r3, [pc, #328]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dfe:	f7fd fe11 	bl	8000a24 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e06:	f7fd fe0d 	bl	8000a24 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e090      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8083 	beq.w	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a43      	ldr	r2, [pc, #268]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3e      	ldr	r2, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5a:	f7fd fde3 	bl	8000a24 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fd fddf 	bl	8000a24 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e062      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02f      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea8:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d114      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fd fdad 	bl	8000a24 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd fda9 	bl	8000a24 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e02a      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ee      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efc:	d10d      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f12:	490d      	ldr	r1, [pc, #52]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
 8002f18:	e005      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f24:	6093      	str	r3, [r2, #8]
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	4905      	ldr	r1, [pc, #20]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	42470068 	.word	0x42470068
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470e40 	.word	0x42470e40

08002f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <USB_FlushTxFifo+0x44>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e006      	b.n	8002fd0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	d0f1      	beq.n	8002fb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	00030d40 	.word	0x00030d40

08002fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	; (800301c <USB_FlushRxFifo+0x3c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e006      	b.n	8003010 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b10      	cmp	r3, #16
 800300c:	d0f1      	beq.n	8002ff2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	00030d40 	.word	0x00030d40

08003020 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003020:	b480      	push	{r7}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	b29b      	uxth	r3, r3
 800303c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	e014      	b.n	8003076 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	601a      	str	r2, [r3, #0]
    pDest++;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	3301      	adds	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	3301      	adds	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	3301      	adds	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	3301      	adds	r3, #1
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	6a3a      	ldr	r2, [r7, #32]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	429a      	cmp	r2, r3
 800307c:	d3e6      	bcc.n	800304c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800307e:	8bfb      	ldrh	r3, [r7, #30]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01e      	beq.n	80030c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308e:	461a      	mov	r2, r3
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	701a      	strb	r2, [r3, #0]
      i++;
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	3301      	adds	r3, #1
 80030ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3301      	adds	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80030b6:	8bfb      	ldrh	r3, [r7, #30]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80030bc:	8bfb      	ldrh	r3, [r7, #30]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ea      	bne.n	8003098 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	372c      	adds	r7, #44	; 0x2c
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0301 	and.w	r3, r3, #1
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003130:	f023 0303 	bic.w	r3, r3, #3
 8003134:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800315a:	461a      	mov	r2, r3
 800315c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003160:	6053      	str	r3, [r2, #4]
 8003162:	e009      	b.n	8003178 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d106      	bne.n	8003178 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003170:	461a      	mov	r2, r3
 8003172:	f241 7370 	movw	r3, #6000	; 0x1770
 8003176:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	b29b      	uxth	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0fdb      	lsrs	r3, r3, #31
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d104      	bne.n	8003202 <USB_HC_Halt+0x5a>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e0e8      	b.n	80033d4 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <USB_HC_Halt+0x66>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d173      	bne.n	80032f6 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	440a      	add	r2, r1
 8003224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800322c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 80cb 	bne.w	80033d2 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d143      	bne.n	80032d0 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	440a      	add	r2, r1
 800325e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003266:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	440a      	add	r2, r1
 800327e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003286:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	440a      	add	r2, r1
 800329e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032a6:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b4:	d81d      	bhi.n	80032f2 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032cc:	d0ec      	beq.n	80032a8 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80032ce:	e080      	b.n	80033d2 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80032f0:	e06f      	b.n	80033d2 <USB_HC_Halt+0x22a>
            break;
 80032f2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80032f4:	e06d      	b.n	80033d2 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003314:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d143      	bne.n	80033ae <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	0151      	lsls	r1, r2, #5
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	440a      	add	r2, r1
 800333c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003344:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	440a      	add	r2, r1
 800335c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003364:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003384:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003392:	d81d      	bhi.n	80033d0 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033aa:	d0ec      	beq.n	8003386 <USB_HC_Halt+0x1de>
 80033ac:	e011      	b.n	80033d2 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	0151      	lsls	r1, r2, #5
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	440a      	add	r2, r1
 80033c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e000      	b.n	80033d2 <USB_HC_Halt+0x22a>
          break;
 80033d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3724      	adds	r7, #36	; 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fdc0 	bl	8002f76 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80033f6:	2110      	movs	r1, #16
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fdcd 	bl	8002f98 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fdee 	bl	8002fe0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e01f      	b.n	800344a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003420:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003428:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003430:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b0f      	cmp	r3, #15
 800344e:	d9dc      	bls.n	800340a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e034      	b.n	80034c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800346c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003474:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800347c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	3301      	adds	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349c:	d80c      	bhi.n	80034b8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b4:	d0ec      	beq.n	8003490 <USB_StopHost+0xb0>
 80034b6:	e000      	b.n	80034ba <USB_StopHost+0xda>
        break;
 80034b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	3301      	adds	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d9c7      	bls.n	8003456 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fd39 	bl	8002f54 <USB_EnableGlobalInt>

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f804 	bl	8003510 <USBH_HandleSof>
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b0b      	cmp	r3, #11
 8003520:	d10a      	bne.n	8003538 <USBH_HandleSof+0x28>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8003550:	bf00      	nop
}
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800356c:	bf00      	nop
}
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f883 	bl	80036d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	791b      	ldrb	r3, [r3, #4]
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f80b 	bl	80035ee <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	795b      	ldrb	r3, [r3, #5]
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f805 	bl	80035ee <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	2b0a      	cmp	r3, #10
 80035fe:	d80d      	bhi.n	800361c <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	33e0      	adds	r3, #224	; 0xe0
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	33e0      	adds	r3, #224	; 0xe0
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff57 	bl	80034ec <USBH_LL_IncTimer>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff8f 	bl	8003578 <USBH_LL_Connect>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff98 	bl	80035a6 <USBH_LL_Disconnect>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
 800368a:	4613      	mov	r3, r2
 800368c:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff49 	bl	8003540 <USBH_LL_PortEnabled>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff49 	bl	800355c <USBH_LL_PortDisabled>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fd8b 	bl	8001204 <HAL_HCD_Stop>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f807 	bl	8003708 <USBH_Get_USB_Status>
 80036fa:	4603      	mov	r3, r0
 80036fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80036fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d817      	bhi.n	800374c <USBH_Get_USB_Status+0x44>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <USBH_Get_USB_Status+0x1c>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003735 	.word	0x08003735
 8003728:	0800373b 	.word	0x0800373b
 800372c:	08003741 	.word	0x08003741
 8003730:	08003747 	.word	0x08003747
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	73fb      	strb	r3, [r7, #15]
    break;
 8003738:	e00b      	b.n	8003752 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800373a:	2302      	movs	r3, #2
 800373c:	73fb      	strb	r3, [r7, #15]
    break;
 800373e:	e008      	b.n	8003752 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
    break;
 8003744:	e005      	b.n	8003752 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003746:	2302      	movs	r3, #2
 8003748:	73fb      	strb	r3, [r7, #15]
    break;
 800374a:	e002      	b.n	8003752 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800374c:	2302      	movs	r3, #2
 800374e:	73fb      	strb	r3, [r7, #15]
    break;
 8003750:	bf00      	nop
  }
  return usb_status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	4d0d      	ldr	r5, [pc, #52]	; (8003798 <__libc_init_array+0x38>)
 8003764:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003766:	1b64      	subs	r4, r4, r5
 8003768:	10a4      	asrs	r4, r4, #2
 800376a:	2600      	movs	r6, #0
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	4d0b      	ldr	r5, [pc, #44]	; (80037a0 <__libc_init_array+0x40>)
 8003772:	4c0c      	ldr	r4, [pc, #48]	; (80037a4 <__libc_init_array+0x44>)
 8003774:	f000 f820 	bl	80037b8 <_init>
 8003778:	1b64      	subs	r4, r4, r5
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	2600      	movs	r6, #0
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f855 3b04 	ldr.w	r3, [r5], #4
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	080037e8 	.word	0x080037e8
 800379c:	080037e8 	.word	0x080037e8
 80037a0:	080037e8 	.word	0x080037e8
 80037a4:	080037ec 	.word	0x080037ec

080037a8 <memset>:
 80037a8:	4402      	add	r2, r0
 80037aa:	4603      	mov	r3, r0
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d100      	bne.n	80037b2 <memset+0xa>
 80037b0:	4770      	bx	lr
 80037b2:	f803 1b01 	strb.w	r1, [r3], #1
 80037b6:	e7f9      	b.n	80037ac <memset+0x4>

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
