
Lab3Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000770  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dc1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003175  00000000  00000000  00035e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  00039d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022aef  00000000  00000000  0003a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c1a  00000000  00000000  0005d4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7dc6  00000000  00000000  0006f101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136ec7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003988  00000000  00000000  00136f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006150 	.word	0x08006150

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006150 	.word	0x08006150

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <lcdSend>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void lcdSend(uint8_t isCommand, uint8_t data) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
 RS(isCommand!=0);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf14      	ite	ne
 80004d6:	2301      	movne	r3, #1
 80004d8:	2300      	moveq	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	4852      	ldr	r0, [pc, #328]	; (800062c <lcdSend+0x16c>)
 80004e2:	f000 ff7d 	bl	80013e0 <HAL_GPIO_WritePin>
 HAL_Delay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fca8 	bl	8000e3c <HAL_Delay>
 DH7(((data >> 7) & 1)==1);
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	09db      	lsrs	r3, r3, #7
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	bf14      	ite	ne
 80004fa:	2301      	movne	r3, #1
 80004fc:	2300      	moveq	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	461a      	mov	r2, r3
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	4849      	ldr	r0, [pc, #292]	; (800062c <lcdSend+0x16c>)
 8000508:	f000 ff6a 	bl	80013e0 <HAL_GPIO_WritePin>
 DH6(((data >> 6) & 1)==1);
 800050c:	79bb      	ldrb	r3, [r7, #6]
 800050e:	099b      	lsrs	r3, r3, #6
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	4841      	ldr	r0, [pc, #260]	; (800062c <lcdSend+0x16c>)
 8000528:	f000 ff5a 	bl	80013e0 <HAL_GPIO_WritePin>
 DH5(((data >> 5) & 1)==1);
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	4839      	ldr	r0, [pc, #228]	; (800062c <lcdSend+0x16c>)
 8000548:	f000 ff4a 	bl	80013e0 <HAL_GPIO_WritePin>
 DH4(((data >> 4) & 1)==1);
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	091b      	lsrs	r3, r3, #4
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	4831      	ldr	r0, [pc, #196]	; (800062c <lcdSend+0x16c>)
 8000568:	f000 ff3a 	bl	80013e0 <HAL_GPIO_WritePin>
 EN(1);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000572:	482e      	ldr	r0, [pc, #184]	; (800062c <lcdSend+0x16c>)
 8000574:	f000 ff34 	bl	80013e0 <HAL_GPIO_WritePin>
 HAL_Delay (1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fc5f 	bl	8000e3c <HAL_Delay>
 EN(0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	4829      	ldr	r0, [pc, #164]	; (800062c <lcdSend+0x16c>)
 8000586:	f000 ff2b 	bl	80013e0 <HAL_GPIO_WritePin>
 DH7(((data >> 3) & 1)==1);
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	08db      	lsrs	r3, r3, #3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4821      	ldr	r0, [pc, #132]	; (800062c <lcdSend+0x16c>)
 80005a6:	f000 ff1b 	bl	80013e0 <HAL_GPIO_WritePin>
 DH6(((data >> 2) & 1)==1);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	089b      	lsrs	r3, r3, #2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	4819      	ldr	r0, [pc, #100]	; (800062c <lcdSend+0x16c>)
 80005c6:	f000 ff0b 	bl	80013e0 <HAL_GPIO_WritePin>
 DH5(((data >> 1) & 1)==1);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	085b      	lsrs	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <lcdSend+0x16c>)
 80005e6:	f000 fefb 	bl	80013e0 <HAL_GPIO_WritePin>
 DH4((data & 1)==1);
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <lcdSend+0x16c>)
 8000602:	f000 feed 	bl	80013e0 <HAL_GPIO_WritePin>
 EN(1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <lcdSend+0x16c>)
 800060e:	f000 fee7 	bl	80013e0 <HAL_GPIO_WritePin>
 HAL_Delay (1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fc12 	bl	8000e3c <HAL_Delay>
 EN(0);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <lcdSend+0x16c>)
 8000620:	f000 fede 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <lcdCommand>:

void lcdCommand(uint8_t cmd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
 lcdSend(1, cmd);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4619      	mov	r1, r3
 800063e:	2001      	movs	r0, #1
 8000640:	f7ff ff3e 	bl	80004c0 <lcdSend>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcdChar>:
void lcdChar(const char chr) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
 lcdSend(0, (uint8_t)chr);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4619      	mov	r1, r3
 800065a:	2000      	movs	r0, #0
 800065c:	f7ff ff30 	bl	80004c0 <lcdSend>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <parametrsToggle>:

void setCursor(uint8_t col, uint8_t row)
{
 lcdSend(1,0x80 | (col | row*0x40));
}
void parametrsToggle(uint8_t display,uint8_t cursor,uint8_t blink){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	460b      	mov	r3, r1
 8000674:	71bb      	strb	r3, [r7, #6]
 8000676:	4613      	mov	r3, r2
 8000678:	717b      	strb	r3, [r7, #5]
 uint8_t comm = 0x08;
 800067a:	2308      	movs	r3, #8
 800067c:	73fb      	strb	r3, [r7, #15]
 if(display)comm|=0x04;
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <parametrsToggle+0x24>
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	73fb      	strb	r3, [r7, #15]
 if(cursor)comm|=0x02;
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <parametrsToggle+0x32>
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	73fb      	strb	r3, [r7, #15]
 if(blink)comm|=0x01;
 800069a:	797b      	ldrb	r3, [r7, #5]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <parametrsToggle+0x40>
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 lcdCommand(comm);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffc0 	bl	8000630 <lcdCommand>
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <shiftToggle>:
void shiftToggle(uint8_t rightShift,uint8_t scrollInc){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
 uint8_t comm = 0x04;
 80006c8:	2304      	movs	r3, #4
 80006ca:	73fb      	strb	r3, [r7, #15]
 if(rightShift)comm|=0x02;
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <shiftToggle+0x22>
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
 if(scrollInc)comm|=0x01;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <shiftToggle+0x30>
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 lcdCommand(comm);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffa0 	bl	8000630 <lcdCommand>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <clear>:
}
void scrollLeft(void){
 lcdCommand(0x10|0x08|0x04);
}
void clear(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
 lcdCommand(0x01);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff97 	bl	8000630 <lcdCommand>
 HAL_Delay(2);
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fb9a 	bl	8000e3c <HAL_Delay>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <initLCD>:
 lcdCommand(0x02);
 HAL_Delay(2);
}


void initLCD(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
 HAL_Delay(40);
 8000710:	2028      	movs	r0, #40	; 0x28
 8000712:	f000 fb93 	bl	8000e3c <HAL_Delay>
 lcdCommand(0x02);
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff8a 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fb8d 	bl	8000e3c <HAL_Delay>
 lcdCommand(0x28);
 8000722:	2028      	movs	r0, #40	; 0x28
 8000724:	f7ff ff84 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fb87 	bl	8000e3c <HAL_Delay>
 lcdCommand(0x28);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f7ff ff7e 	bl	8000630 <lcdCommand>
 HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fb81 	bl	8000e3c <HAL_Delay>
 parametrsToggle(1,0,0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff92 	bl	8000668 <parametrsToggle>
 HAL_Delay(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fb79 	bl	8000e3c <HAL_Delay>
 clear();
 800074a:	f7ff ffd5 	bl	80006f8 <clear>
 shiftToggle(1,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ffb1 	bl	80006b8 <shiftToggle>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <lcdString>:

void lcdString(char* str){
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 for(uint8_t i=0;str[i]!='\0';i++){
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e009      	b.n	800077c <lcdString+0x22>
 lcdChar(str[i]);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff6b 	bl	800064c <lcdChar>
 for(uint8_t i=0;str[i]!='\0';i++){
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1ef      	bne.n	8000768 <lcdString+0xe>
 }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <main>:




int main(void)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b090      	sub	sp, #64	; 0x40
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fadd 	bl	8000d58 <HAL_Init>


  initLCD();
 800079e:	f7ff ffb5 	bl	800070c <initLCD>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  char PIP[] = "Burets Valentyn Vasylovych/0";
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <main+0x70>)
 80007a4:	f107 0420 	add.w	r4, r7, #32
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007b2:	c407      	stmia	r4!, {r0, r1, r2}
 80007b4:	7023      	strb	r3, [r4, #0]
  char text[] = "illumination red and green LED";
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <main+0x74>)
 80007b8:	463c      	mov	r4, r7
 80007ba:	461d      	mov	r5, r3
 80007bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007c4:	c407      	stmia	r4!, {r0, r1, r2}
 80007c6:	8023      	strh	r3, [r4, #0]
 80007c8:	3402      	adds	r4, #2
 80007ca:	0c1b      	lsrs	r3, r3, #16
 80007cc:	7023      	strb	r3, [r4, #0]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f81d 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 f8b3 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007d6:	f000 f883 	bl	80008e0 <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80007da:	f005 f8ff 	bl	80059dc <MX_USB_HOST_Init>
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();


    lcdString(PIP);
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffb9 	bl	800075a <lcdString>

    HAL_Delay(5000);
 80007e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ec:	f000 fb26 	bl	8000e3c <HAL_Delay>

    lcdString(text);
 80007f0:	463b      	mov	r3, r7
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffb1 	bl	800075a <lcdString>

    HAL_Delay(5000);
 80007f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007fc:	f000 fb1e 	bl	8000e3c <HAL_Delay>
    lcdString(PIP);
 8000800:	e7ed      	b.n	80007de <main+0x4a>
 8000802:	bf00      	nop
 8000804:	08006168 	.word	0x08006168
 8000808:	08006188 	.word	0x08006188

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 fbc8 	bl	8005fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000880:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088a:	2307      	movs	r3, #7
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fc56 	bl	8003144 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089e:	f000 f93f 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2105      	movs	r1, #5
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 feb7 	bl	8003634 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008cc:	f000 f928 	bl	8000b20 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	; 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C1_Init+0x50>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_I2C1_Init+0x54>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C1_Init+0x50>)
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <MX_I2C1_Init+0x58>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C1_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C1_Init+0x50>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_I2C1_Init+0x50>)
 80008fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000902:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_I2C1_Init+0x50>)
 800091e:	f002 facd 	bl	8002ebc <HAL_I2C_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000928:	f000 f8fa 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000bc 	.word	0x200000bc
 8000934:	40005400 	.word	0x40005400
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b6d      	ldr	r3, [pc, #436]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b66      	ldr	r3, [pc, #408]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b5f      	ldr	r3, [pc, #380]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a5e      	ldr	r2, [pc, #376]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b58      	ldr	r3, [pc, #352]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b51      	ldr	r3, [pc, #324]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a49      	ldr	r2, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <MX_GPIO_Init+0x1d0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 80009fa:	2200      	movs	r2, #0
 80009fc:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8000a00:	4843      	ldr	r0, [pc, #268]	; (8000b10 <MX_GPIO_Init+0x1d4>)
 8000a02:	f000 fced 	bl	80013e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4842      	ldr	r0, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x1d8>)
 8000a0c:	f000 fce8 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a10:	2200      	movs	r2, #0
 8000a12:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a16:	4840      	ldr	r0, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000a18:	f000 fce2 	bl	80013e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
 8000a1c:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8000a20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4836      	ldr	r0, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x1d4>)
 8000a36:	f000 fb37 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4830      	ldr	r0, [pc, #192]	; (8000b14 <MX_GPIO_Init+0x1d8>)
 8000a52:	f000 fb29 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a56:	2308      	movs	r3, #8
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a66:	2305      	movs	r3, #5
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4828      	ldr	r0, [pc, #160]	; (8000b14 <MX_GPIO_Init+0x1d8>)
 8000a72:	f000 fb19 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4824      	ldr	r0, [pc, #144]	; (8000b1c <MX_GPIO_Init+0x1e0>)
 8000a8c:	f000 fb0c 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a90:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a94:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481b      	ldr	r0, [pc, #108]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000aaa:	f000 fafd 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_GPIO_Init+0x1d8>)
 8000acc:	f000 faec 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_GPIO_Init+0x1dc>)
 8000ae4:	f000 fae0 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_GPIO_Init+0x1d4>)
 8000afe:	f000 fad3 	bl	80010a8 <HAL_GPIO_Init>

}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40020000 	.word	0x40020000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f000 fa5a 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_I2C_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <HAL_I2C_MspInit+0x8c>)
 8000bd8:	f000 fa66 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f8d0 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <OTG_FS_IRQHandler+0x10>)
 8000c66:	f000 fe3f 	bl	80018e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200004ec 	.word	0x200004ec

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f005 f94a 	bl	8005f3c <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200000ac 	.word	0x200000ac
 8000cdc:	20000800 	.word	0x20000800

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f005 f909 	bl	8005f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fd2d 	bl	8000794 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d48:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 8000d4c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d50:	20000800 	.word	0x20000800

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f94f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fece 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f967 	bl	800108e <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f92f 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000110 	.word	0x20000110

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000110 	.word	0x20000110

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff29 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff3e 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff31 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffa2 	bl	8000fe0 <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e16b      	b.n	800139c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 815a 	bne.w	8001396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80b4 	beq.w	8001396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b60      	ldr	r3, [pc, #384]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a5b      	ldr	r2, [pc, #364]	; (80013b8 <HAL_GPIO_Init+0x310>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x314>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d02b      	beq.n	80012ce <HAL_GPIO_Init+0x226>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_GPIO_Init+0x318>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d025      	beq.n	80012ca <HAL_GPIO_Init+0x222>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x31c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01f      	beq.n	80012c6 <HAL_GPIO_Init+0x21e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_GPIO_Init+0x320>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0x21a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <HAL_GPIO_Init+0x324>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x216>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <HAL_GPIO_Init+0x328>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x212>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <HAL_GPIO_Init+0x32c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <HAL_GPIO_Init+0x330>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x20a>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00e      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012b2:	2308      	movs	r3, #8
 80012b4:	e00c      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e00a      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x228>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4935      	ldr	r1, [pc, #212]	; (80013b8 <HAL_GPIO_Init+0x310>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <HAL_GPIO_Init+0x334>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_GPIO_Init+0x334>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_GPIO_Init+0x334>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x334>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a12      	ldr	r2, [pc, #72]	; (80013dc <HAL_GPIO_Init+0x334>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f ae90 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40021c00 	.word	0x40021c00
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001414:	b08f      	sub	sp, #60	; 0x3c
 8001416:	af0a      	add	r7, sp, #40	; 0x28
 8001418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e054      	b.n	80014ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f004 fb20 	bl	8005a84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fb40 	bl	8003ae8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	687e      	ldr	r6, [r7, #4]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001482:	e885 0003 	stmia.w	r5, {r0, r1}
 8001486:	1d33      	adds	r3, r6, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	6838      	ldr	r0, [r7, #0]
 800148c:	f002 faba 	bl	8003a04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fb37 	bl	8003b0a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	687e      	ldr	r6, [r7, #4]
 80014a4:	466d      	mov	r5, sp
 80014a6:	f106 0410 	add.w	r4, r6, #16
 80014aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ba:	1d33      	adds	r3, r6, #4
 80014bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f002 fc9e 	bl	8003e00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014d6:	b590      	push	{r4, r7, lr}
 80014d8:	b089      	sub	sp, #36	; 0x24
 80014da:	af04      	add	r7, sp, #16
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	4608      	mov	r0, r1
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70bb      	strb	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_HCD_HC_Init+0x28>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e076      	b.n	80015ec <HAL_HCD_HC_Init+0x116>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	212c      	movs	r1, #44	; 0x2c
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	333d      	adds	r3, #61	; 0x3d
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3338      	adds	r3, #56	; 0x38
 8001526:	787a      	ldrb	r2, [r7, #1]
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	212c      	movs	r1, #44	; 0x2c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3340      	adds	r3, #64	; 0x40
 8001538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800153a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	212c      	movs	r1, #44	; 0x2c
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	4413      	add	r3, r2
 8001548:	3339      	adds	r3, #57	; 0x39
 800154a:	78fa      	ldrb	r2, [r7, #3]
 800154c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	333f      	adds	r3, #63	; 0x3f
 800155c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156a:	b2d0      	uxtb	r0, r2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	333a      	adds	r3, #58	; 0x3a
 8001578:	4602      	mov	r2, r0
 800157a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800157c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da09      	bge.n	8001598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	333b      	adds	r3, #59	; 0x3b
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e008      	b.n	80015aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	333b      	adds	r3, #59	; 0x3b
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	212c      	movs	r1, #44	; 0x2c
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	333c      	adds	r3, #60	; 0x3c
 80015b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	787c      	ldrb	r4, [r7, #1]
 80015c4:	78ba      	ldrb	r2, [r7, #2]
 80015c6:	78f9      	ldrb	r1, [r7, #3]
 80015c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4623      	mov	r3, r4
 80015da:	f002 fd61 	bl	80040a0 <USB_HC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_HCD_HC_Halt+0x1e>
 800160e:	2302      	movs	r3, #2
 8001610:	e00f      	b.n	8001632 <HAL_HCD_HC_Halt+0x3e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 ff9d 	bl	8004562 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	70fb      	strb	r3, [r7, #3]
 800164e:	460b      	mov	r3, r1
 8001650:	70bb      	strb	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333b      	adds	r3, #59	; 0x3b
 8001664:	78ba      	ldrb	r2, [r7, #2]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	fb01 f303 	mul.w	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	333f      	adds	r3, #63	; 0x3f
 8001676:	787a      	ldrb	r2, [r7, #1]
 8001678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800167a:	7c3b      	ldrb	r3, [r7, #16]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	4413      	add	r3, r2
 800168c:	3342      	adds	r3, #66	; 0x42
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	333d      	adds	r3, #61	; 0x3d
 80016a0:	7f3a      	ldrb	r2, [r7, #28]
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e008      	b.n	80016b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3342      	adds	r3, #66	; 0x42
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	f200 80c6 	bhi.w	800184c <HAL_HCD_HC_SubmitRequest+0x210>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	08001839 	.word	0x08001839
 80016d0:	0800173d 	.word	0x0800173d
 80016d4:	080017bb 	.word	0x080017bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016d8:	7c3b      	ldrb	r3, [r7, #16]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	f040 80b8 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e0:	78bb      	ldrb	r3, [r7, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 80b4 	bne.w	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016e8:	8b3b      	ldrh	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3355      	adds	r3, #85	; 0x55
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	3355      	adds	r3, #85	; 0x55
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	3342      	adds	r3, #66	; 0x42
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001726:	e093      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3342      	adds	r3, #66	; 0x42
 8001736:	2202      	movs	r2, #2
 8001738:	701a      	strb	r2, [r3, #0]
      break;
 800173a:	e089      	b.n	8001850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11d      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3355      	adds	r3, #85	; 0x55
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001768:	e073      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e069      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	212c      	movs	r1, #44	; 0x2c
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3354      	adds	r3, #84	; 0x54
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3342      	adds	r3, #66	; 0x42
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
      break;
 80017a4:	e055      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	212c      	movs	r1, #44	; 0x2c
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3342      	adds	r3, #66	; 0x42
 80017b4:	2202      	movs	r2, #2
 80017b6:	701a      	strb	r2, [r3, #0]
      break;
 80017b8:	e04b      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ba:	78bb      	ldrb	r3, [r7, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d11d      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3355      	adds	r3, #85	; 0x55
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3342      	adds	r3, #66	; 0x42
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017e6:	e034      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e02a      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3354      	adds	r3, #84	; 0x54
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3342      	adds	r3, #66	; 0x42
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
      break;
 8001822:	e016      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	212c      	movs	r1, #44	; 0x2c
 800182a:	fb01 f303 	mul.w	r3, r1, r3
 800182e:	4413      	add	r3, r2
 8001830:	3342      	adds	r3, #66	; 0x42
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e00c      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e002      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3344      	adds	r3, #68	; 0x44
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	8b3a      	ldrh	r2, [r7, #24]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	202c      	movs	r0, #44	; 0x2c
 800186c:	fb00 f303 	mul.w	r3, r0, r3
 8001870:	440b      	add	r3, r1
 8001872:	334c      	adds	r3, #76	; 0x4c
 8001874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3360      	adds	r3, #96	; 0x60
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3350      	adds	r3, #80	; 0x50
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3339      	adds	r3, #57	; 0x39
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3361      	adds	r3, #97	; 0x61
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	222c      	movs	r2, #44	; 0x2c
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	3338      	adds	r3, #56	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	18d1      	adds	r1, r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	f002 fcf0 	bl	80042bc <USB_HC_StartXfer>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop

080018e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fa3d 	bl	8003d7e <USB_GetMode>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f040 80f6 	bne.w	8001af8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fa21 	bl	8003d58 <USB_ReadInterrupts>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80ec 	beq.w	8001af6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fa18 	bl	8003d58 <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001932:	d104      	bne.n	800193e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800193c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fa08 	bl	8003d58 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001952:	d104      	bne.n	800195e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 f9f8 	bl	8003d58 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001972:	d104      	bne.n	800197e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800197c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 f9e8 	bl	8003d58 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 f9da 	bl	8003d58 <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019ae:	d11c      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ca:	2110      	movs	r1, #16
 80019cc:	6938      	ldr	r0, [r7, #16]
 80019ce:	f002 f8e9 	bl	8003ba4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019d2:	6938      	ldr	r0, [r7, #16]
 80019d4:	f002 f90a 	bl	8003bec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fac2 	bl	8003f68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f004 f8cb 	bl	8005b80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f9b2 	bl	8003d58 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fe:	d102      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f001 f9e7 	bl	8002dd4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 f9a4 	bl	8003d58 <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d106      	bne.n	8001a28 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f004 f894 	bl	8005b48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2208      	movs	r2, #8
 8001a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 f993 	bl	8003d58 <USB_ReadInterrupts>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d101      	bne.n	8001a40 <HAL_HCD_IRQHandler+0x158>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_HCD_IRQHandler+0x15a>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0210 	bic.w	r2, r2, #16
 8001a54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f001 f8ea 	bl	8002c30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0210 	orr.w	r2, r2, #16
 8001a6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 f971 	bl	8003d58 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a80:	d13a      	bne.n	8001af8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fd5a 	bl	8004540 <USB_HC_ReadInterrupt>
 8001a8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e025      	b.n	8001ae0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d018      	beq.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abe:	d106      	bne.n	8001ace <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f88f 	bl	8001bea <HCD_HC_IN_IRQHandler>
 8001acc:	e005      	b.n	8001ada <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fcaa 	bl	800242e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d4      	bcc.n	8001a94 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	e000      	b.n	8001af8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001af6:	bf00      	nop
    }
  }
}
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_HCD_Start+0x16>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e013      	b.n	8001b3c <HAL_HCD_Start+0x3e>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fa5a 	bl	8003fdc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 ffca 	bl	8003ac6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_HCD_Stop+0x16>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e00d      	b.n	8001b76 <HAL_HCD_Stop+0x32>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 fe54 	bl	8004814 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	3360      	adds	r3, #96	; 0x60
 8001b98:	781b      	ldrb	r3, [r3, #0]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3350      	adds	r3, #80	; 0x50
 8001bc0:	681b      	ldr	r3, [r3, #0]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fa4e 	bl	800407c <USB_GetCurrentFrame>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d119      	bne.n	8001c4e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	461a      	mov	r2, r3
 8001c28:	2304      	movs	r3, #4
 8001c2a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	015a      	lsls	r2, r3, #5
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	0151      	lsls	r1, r2, #5
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	440a      	add	r2, r1
 8001c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	60d3      	str	r3, [r2, #12]
 8001c4c:	e101      	b.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	015a      	lsls	r2, r3, #5
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4413      	add	r3, r2
 8001c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c64:	d12b      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c72:	461a      	mov	r2, r3
 8001c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3361      	adds	r3, #97	; 0x61
 8001c88:	2207      	movs	r2, #7
 8001c8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	0151      	lsls	r1, r2, #5
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	440a      	add	r2, r1
 8001ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fc53 	bl	8004562 <USB_HC_Halt>
 8001cbc:	e0c9      	b.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d109      	bne.n	8001ce8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	6093      	str	r3, [r2, #8]
 8001ce6:	e0b4      	b.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d133      	bne.n	8001d66 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	0151      	lsls	r1, r2, #5
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	440a      	add	r2, r1
 8001d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3361      	adds	r3, #97	; 0x61
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2310      	movs	r3, #16
 8001d40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2308      	movs	r3, #8
 8001d52:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fbff 	bl	8004562 <USB_HC_Halt>
 8001d64:	e075      	b.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	d134      	bne.n	8001de8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	0151      	lsls	r1, r2, #5
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	440a      	add	r2, r1
 8001d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3361      	adds	r3, #97	; 0x61
 8001dac:	2208      	movs	r2, #8
 8001dae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fbbe 	bl	8004562 <USB_HC_Halt>
 8001de6:	e034      	b.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d129      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3361      	adds	r3, #97	; 0x61
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fb91 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e68:	d122      	bne.n	8001eb0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	0151      	lsls	r1, r2, #5
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	440a      	add	r2, r1
 8001e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fb64 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eae:	e2ba      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	f040 811b 	bne.w	80020fe <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d019      	beq.n	8001f04 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	3348      	adds	r3, #72	; 0x48
 8001ede:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0159      	lsls	r1, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	202c      	movs	r0, #44	; 0x2c
 8001efa:	fb00 f303 	mul.w	r3, r0, r3
 8001efe:	440b      	add	r3, r1
 8001f00:	3350      	adds	r3, #80	; 0x50
 8001f02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3361      	adds	r3, #97	; 0x61
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	335c      	adds	r3, #92	; 0x5c
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	2301      	movs	r3, #1
 8001f38:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d121      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fae8 	bl	8004562 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	e066      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	333f      	adds	r3, #63	; 0x3f
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d127      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fd8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3360      	adds	r3, #96	; 0x60
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	202c      	movs	r0, #44	; 0x2c
 8001ff6:	fb00 f303 	mul.w	r3, r0, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f003 fdca 	bl	8005b9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002008:	e034      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	333f      	adds	r3, #63	; 0x3f
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d12a      	bne.n	8002074 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3354      	adds	r3, #84	; 0x54
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2d8      	uxtb	r0, r3
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3354      	adds	r3, #84	; 0x54
 8002054:	4602      	mov	r2, r0
 8002056:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	b2d9      	uxtb	r1, r3
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	202c      	movs	r0, #44	; 0x2c
 8002062:	fb00 f303 	mul.w	r3, r0, r3
 8002066:	4413      	add	r3, r2
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f003 fd94 	bl	8005b9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d12b      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3348      	adds	r3, #72	; 0x48
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	202c      	movs	r0, #44	; 0x2c
 8002092:	fb00 f202 	mul.w	r2, r0, r2
 8002096:	440a      	add	r2, r1
 8002098:	3240      	adds	r2, #64	; 0x40
 800209a:	8812      	ldrh	r2, [r2, #0]
 800209c:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 81be 	beq.w	8002426 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3354      	adds	r3, #84	; 0x54
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3354      	adds	r3, #84	; 0x54
 80020ce:	4602      	mov	r2, r0
 80020d0:	701a      	strb	r2, [r3, #0]
}
 80020d2:	e1a8      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3354      	adds	r3, #84	; 0x54
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2d8      	uxtb	r0, r3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3354      	adds	r3, #84	; 0x54
 80020f8:	4602      	mov	r2, r0
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	e193      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 8106 	bne.w	8002322 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	0151      	lsls	r1, r2, #5
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	440a      	add	r2, r1
 800212c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002130:	f023 0302 	bic.w	r3, r3, #2
 8002134:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3361      	adds	r3, #97	; 0x61
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d109      	bne.n	800215e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3360      	adds	r3, #96	; 0x60
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e0c9      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3361      	adds	r3, #97	; 0x61
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d109      	bne.n	8002186 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	2205      	movs	r2, #5
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e0b5      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d009      	beq.n	80021ae <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d150      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	202c      	movs	r0, #44	; 0x2c
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	440b      	add	r3, r1
 80021cc:	335c      	adds	r3, #92	; 0x5c
 80021ce:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	335c      	adds	r3, #92	; 0x5c
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d912      	bls.n	800220a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	335c      	adds	r3, #92	; 0x5c
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	2204      	movs	r2, #4
 8002206:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002208:	e073      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002232:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800223a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800224e:	e050      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3361      	adds	r3, #97	; 0x61
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d122      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002294:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e023      	b.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3361      	adds	r3, #97	; 0x61
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d119      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	202c      	movs	r0, #44	; 0x2c
 80022d6:	fb00 f303 	mul.w	r3, r0, r3
 80022da:	440b      	add	r3, r1
 80022dc:	335c      	adds	r3, #92	; 0x5c
 80022de:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3360      	adds	r3, #96	; 0x60
 80022ee:	2204      	movs	r2, #4
 80022f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	2302      	movs	r3, #2
 8002302:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	b2d9      	uxtb	r1, r3
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	202c      	movs	r0, #44	; 0x2c
 800230e:	fb00 f303 	mul.w	r3, r0, r3
 8002312:	4413      	add	r3, r2
 8002314:	3360      	adds	r3, #96	; 0x60
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f003 fc3e 	bl	8005b9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002320:	e081      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d176      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	333f      	adds	r3, #63	; 0x3f
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d121      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	440a      	add	r2, r1
 8002374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f002 f8ea 	bl	8004562 <USB_HC_Halt>
 800238e:	e041      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	333f      	adds	r3, #63	; 0x3f
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	333f      	adds	r3, #63	; 0x3f
 80023b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d12d      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	335c      	adds	r3, #92	; 0x5c
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d120      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3361      	adds	r3, #97	; 0x61
 80023e0:	2203      	movs	r2, #3
 80023e2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	0151      	lsls	r1, r2, #5
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	440a      	add	r2, r1
 80023fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f002 f8a7 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2310      	movs	r3, #16
 8002424:	6093      	str	r3, [r2, #8]
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b088      	sub	sp, #32
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d119      	bne.n	8002492 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2304      	movs	r3, #4
 800246e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	0151      	lsls	r1, r2, #5
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	440a      	add	r2, r1
 8002486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002490:	e3ca      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d13e      	bne.n	8002526 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	461a      	mov	r2, r3
 80024b6:	2320      	movs	r3, #32
 80024b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	333d      	adds	r3, #61	; 0x3d
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 83ac 	bne.w	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	333d      	adds	r3, #61	; 0x3d
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3360      	adds	r3, #96	; 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	0151      	lsls	r1, r2, #5
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	440a      	add	r2, r1
 800250a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f002 f81f 	bl	8004562 <USB_HC_Halt>
}
 8002524:	e380      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800253c:	d122      	bne.n	8002584 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fffa 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	461a      	mov	r2, r3
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	6093      	str	r3, [r2, #8]
}
 8002582:	e351      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d150      	bne.n	800263c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	335c      	adds	r3, #92	; 0x5c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d111      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	333d      	adds	r3, #61	; 0x3d
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2340      	movs	r3, #64	; 0x40
 80025e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	0151      	lsls	r1, r2, #5
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	440a      	add	r2, r1
 80025fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f001 ffa6 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	461a      	mov	r2, r3
 8002624:	2301      	movs	r3, #1
 8002626:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3361      	adds	r3, #97	; 0x61
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
}
 800263a:	e2f5      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d13c      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3361      	adds	r3, #97	; 0x61
 8002660:	2204      	movs	r2, #4
 8002662:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	333d      	adds	r3, #61	; 0x3d
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	335c      	adds	r3, #92	; 0x5c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 ff55 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	6093      	str	r3, [r2, #8]
}
 80026ca:	e2ad      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d12a      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2308      	movs	r3, #8
 80026f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	440a      	add	r2, r1
 800270a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f001 ff1f 	bl	8004562 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3361      	adds	r3, #97	; 0x61
 8002732:	2205      	movs	r2, #5
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	e277      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b10      	cmp	r3, #16
 800274c:	d150      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3361      	adds	r3, #97	; 0x61
 800276e:	2203      	movs	r2, #3
 8002770:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	333d      	adds	r3, #61	; 0x3d
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	333c      	adds	r3, #60	; 0x3c
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	333d      	adds	r3, #61	; 0x3d
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 fec3 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	2310      	movs	r3, #16
 80027ec:	6093      	str	r3, [r2, #8]
}
 80027ee:	e21b      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d174      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d121      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	2206      	movs	r2, #6
 800281e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	0151      	lsls	r1, r2, #5
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	440a      	add	r2, r1
 8002836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f001 fe89 	bl	8004562 <USB_HC_Halt>
 8002850:	e044      	b.n	80028dc <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	335c      	adds	r3, #92	; 0x5c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	202c      	movs	r0, #44	; 0x2c
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	440b      	add	r3, r1
 8002870:	335c      	adds	r3, #92	; 0x5c
 8002872:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	335c      	adds	r3, #92	; 0x5c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d920      	bls.n	80028ca <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3360      	adds	r3, #96	; 0x60
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	b2d9      	uxtb	r1, r3
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	202c      	movs	r0, #44	; 0x2c
 80028b6:	fb00 f303 	mul.w	r3, r0, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f003 f96a 	bl	8005b9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028c8:	e008      	b.n	80028dc <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	2202      	movs	r2, #2
 80028da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	6093      	str	r3, [r2, #8]
}
 80028ee:	e19b      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d134      	bne.n	8002972 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	0151      	lsls	r1, r2, #5
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	440a      	add	r2, r1
 800291e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fe15 	bl	8004562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2310      	movs	r3, #16
 8002948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800295c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3361      	adds	r3, #97	; 0x61
 800296c:	2208      	movs	r2, #8
 800296e:	701a      	strb	r2, [r3, #0]
}
 8002970:	e15a      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	f040 814f 	bne.w	8002c28 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	0151      	lsls	r1, r2, #5
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	440a      	add	r2, r1
 80029a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3361      	adds	r3, #97	; 0x61
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d17d      	bne.n	8002aba <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3360      	adds	r3, #96	; 0x60
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	333f      	adds	r3, #63	; 0x3f
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d00a      	beq.n	80029fa <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	333f      	adds	r3, #63	; 0x3f
 80029f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	f040 8100 	bne.w	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3355      	adds	r3, #85	; 0x55
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f083 0301 	eor.w	r3, r3, #1
 8002a16:	b2d8      	uxtb	r0, r3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3355      	adds	r3, #85	; 0x55
 8002a26:	4602      	mov	r2, r0
 8002a28:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 80e3 	bne.w	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	334c      	adds	r3, #76	; 0x4c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80d8 	beq.w	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	202c      	movs	r0, #44	; 0x2c
 8002a60:	fb00 f202 	mul.w	r2, r0, r2
 8002a64:	440a      	add	r2, r1
 8002a66:	3240      	adds	r2, #64	; 0x40
 8002a68:	8812      	ldrh	r2, [r2, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	202c      	movs	r0, #44	; 0x2c
 8002a74:	fb00 f202 	mul.w	r2, r0, r2
 8002a78:	440a      	add	r2, r1
 8002a7a:	3240      	adds	r2, #64	; 0x40
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b5 	beq.w	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3355      	adds	r3, #85	; 0x55
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f083 0301 	eor.w	r3, r3, #1
 8002aa4:	b2d8      	uxtb	r0, r3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3355      	adds	r3, #85	; 0x55
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e09f      	b.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3361      	adds	r3, #97	; 0x61
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d109      	bne.n	8002ae2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3360      	adds	r3, #96	; 0x60
 8002adc:	2202      	movs	r2, #2
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e08b      	b.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3361      	adds	r3, #97	; 0x61
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d109      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e077      	b.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d109      	bne.n	8002b32 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e063      	b.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3361      	adds	r3, #97	; 0x61
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d009      	beq.n	8002b5a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d14f      	bne.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	335c      	adds	r3, #92	; 0x5c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	202c      	movs	r0, #44	; 0x2c
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	440b      	add	r3, r1
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d912      	bls.n	8002bb6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	335c      	adds	r3, #92	; 0x5c
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3360      	adds	r3, #96	; 0x60
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e021      	b.n	8002bfa <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bde:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	461a      	mov	r2, r3
 8002c08:	2302      	movs	r3, #2
 8002c0a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	b2d9      	uxtb	r1, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	202c      	movs	r0, #44	; 0x2c
 8002c16:	fb00 f303 	mul.w	r3, r0, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3360      	adds	r3, #96	; 0x60
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f002 ffba 	bl	8005b9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c28:	bf00      	nop
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	0c5b      	lsrs	r3, r3, #17
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d004      	beq.n	8002c76 <HCD_RXQLVL_IRQHandler+0x46>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	f000 80a9 	beq.w	8002dc6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c74:	e0aa      	b.n	8002dcc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a6 	beq.w	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3344      	adds	r3, #68	; 0x44
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 809b 	beq.w	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3350      	adds	r3, #80	; 0x50
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	202c      	movs	r0, #44	; 0x2c
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	334c      	adds	r3, #76	; 0x4c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d87a      	bhi.n	8002db2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3344      	adds	r3, #68	; 0x44
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f000 ffe7 	bl	8003ca8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3344      	adds	r3, #68	; 0x44
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	441a      	add	r2, r3
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	202c      	movs	r0, #44	; 0x2c
 8002cf4:	fb00 f303 	mul.w	r3, r0, r3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3344      	adds	r3, #68	; 0x44
 8002cfc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3350      	adds	r3, #80	; 0x50
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	441a      	add	r2, r3
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	202c      	movs	r0, #44	; 0x2c
 8002d18:	fb00 f303 	mul.w	r3, r0, r3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3350      	adds	r3, #80	; 0x50
 8002d20:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	0cdb      	lsrs	r3, r3, #19
 8002d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d36:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3340      	adds	r3, #64	; 0x40
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d13c      	bne.n	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d039      	beq.n	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d6c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d74:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3354      	adds	r3, #84	; 0x54
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2d8      	uxtb	r0, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3354      	adds	r3, #84	; 0x54
 8002dac:	4602      	mov	r2, r0
 8002dae:	701a      	strb	r2, [r3, #0]
      break;
 8002db0:	e00b      	b.n	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3360      	adds	r3, #96	; 0x60
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	701a      	strb	r2, [r3, #0]
      break;
 8002dc4:	e001      	b.n	8002dca <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dca:	bf00      	nop
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	; 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e00:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d10b      	bne.n	8002e24 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f002 fea4 	bl	8005b64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d132      	bne.n	8002e94 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d126      	bne.n	8002e8e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d113      	bne.n	8002e70 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e52:	d106      	bne.n	8002e62 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2102      	movs	r1, #2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f884 	bl	8003f68 <USB_InitFSLSPClkSel>
 8002e60:	e011      	b.n	8002e86 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f87d 	bl	8003f68 <USB_InitFSLSPClkSel>
 8002e6e:	e00a      	b.n	8002e86 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e84:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f002 fe96 	bl	8005bb8 <HAL_HCD_PortEnabled_Callback>
 8002e8c:	e002      	b.n	8002e94 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f002 fea0 	bl	8005bd4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d103      	bne.n	8002ea6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f043 0320 	orr.w	r3, r3, #32
 8002ea4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eac:	461a      	mov	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e12b      	b.n	8003126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fe4a 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f20:	f000 fd5c 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a81      	ldr	r2, [pc, #516]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d807      	bhi.n	8002f40 <HAL_I2C_Init+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a80      	ldr	r2, [pc, #512]	; (8003134 <HAL_I2C_Init+0x278>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	bf94      	ite	ls
 8002f38:	2301      	movls	r3, #1
 8002f3a:	2300      	movhi	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e006      	b.n	8002f4e <HAL_I2C_Init+0x92>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a7d      	ldr	r2, [pc, #500]	; (8003138 <HAL_I2C_Init+0x27c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	bf94      	ite	ls
 8002f48:	2301      	movls	r3, #1
 8002f4a:	2300      	movhi	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4a78      	ldr	r2, [pc, #480]	; (800313c <HAL_I2C_Init+0x280>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9b      	lsrs	r3, r3, #18
 8002f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a6a      	ldr	r2, [pc, #424]	; (8003130 <HAL_I2C_Init+0x274>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <HAL_I2C_Init+0xd4>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	e009      	b.n	8002fa4 <HAL_I2C_Init+0xe8>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	4a69      	ldr	r2, [pc, #420]	; (8003140 <HAL_I2C_Init+0x284>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	495c      	ldr	r1, [pc, #368]	; (8003130 <HAL_I2C_Init+0x274>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d819      	bhi.n	8002ff8 <HAL_I2C_Init+0x13c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1e59      	subs	r1, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd2:	1c59      	adds	r1, r3, #1
 8002fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd8:	400b      	ands	r3, r1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Init+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff2:	e051      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	e04f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d111      	bne.n	8003024 <HAL_I2C_Init+0x168>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e012      	b.n	800304a <HAL_I2C_Init+0x18e>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	0099      	lsls	r1, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	fbb0 f3f3 	udiv	r3, r0, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x196>
 800304e:	2301      	movs	r3, #1
 8003050:	e022      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <HAL_I2C_Init+0x1bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e58      	subs	r0, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	440b      	add	r3, r1
 8003068:	fbb0 f3f3 	udiv	r3, r0, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Init+0x1dc>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6809      	ldr	r1, [r1, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6911      	ldr	r1, [r2, #16]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68d2      	ldr	r2, [r2, #12]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	003d08ff 	.word	0x003d08ff
 800313c:	431bde83 	.word	0x431bde83
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e264      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	4ba3      	ldr	r3, [pc, #652]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00c      	beq.n	8003188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4ba0      	ldr	r3, [pc, #640]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d112      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b9d      	ldr	r3, [pc, #628]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b99      	ldr	r3, [pc, #612]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e23f      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x74>
 80031aa:	4b91      	ldr	r3, [pc, #580]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a90      	ldr	r2, [pc, #576]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b8b      	ldr	r3, [pc, #556]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a8a      	ldr	r2, [pc, #552]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a87      	ldr	r2, [pc, #540]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031dc:	4b84      	ldr	r3, [pc, #528]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a83      	ldr	r2, [pc, #524]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b81      	ldr	r3, [pc, #516]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a80      	ldr	r2, [pc, #512]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fd fe12 	bl	8000e24 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fd fe0e 	bl	8000e24 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e204      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xc0>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd fdfe 	bl	8000e24 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fd fdfa 	bl	8000e24 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1f0      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0xe8>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b5c      	ldr	r3, [pc, #368]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c4      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b56      	ldr	r3, [pc, #344]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4952      	ldr	r1, [pc, #328]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b4f      	ldr	r3, [pc, #316]	; (80033f4 <HAL_RCC_OscConfig+0x2b0>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fdb3 	bl	8000e24 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd fdaf 	bl	8000e24 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1a5      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4940      	ldr	r1, [pc, #256]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_OscConfig+0x2b0>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd fd92 	bl	8000e24 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fd fd8e 	bl	8000e24 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e184      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d030      	beq.n	8003390 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_RCC_OscConfig+0x2b4>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fd fd72 	bl	8000e24 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd fd6e 	bl	8000e24 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e164      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x200>
 8003362:	e015      	b.n	8003390 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x2b4>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fd fd5b 	bl	8000e24 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fd fd57 	bl	8000e24 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e14d      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a0 	beq.w	80034de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x2b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d121      	bne.n	800341e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_RCC_OscConfig+0x2b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <HAL_RCC_OscConfig+0x2b8>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fd1d 	bl	8000e24 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e011      	b.n	8003412 <HAL_RCC_OscConfig+0x2ce>
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470000 	.word	0x42470000
 80033f8:	42470e80 	.word	0x42470e80
 80033fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fd fd10 	bl	8000e24 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e106      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b85      	ldr	r3, [pc, #532]	; (8003628 <HAL_RCC_OscConfig+0x4e4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d106      	bne.n	8003434 <HAL_RCC_OscConfig+0x2f0>
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a80      	ldr	r2, [pc, #512]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	e01c      	b.n	800346e <HAL_RCC_OscConfig+0x32a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d10c      	bne.n	8003456 <HAL_RCC_OscConfig+0x312>
 800343c:	4b7b      	ldr	r3, [pc, #492]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a7a      	ldr	r2, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003442:	f043 0304 	orr.w	r3, r3, #4
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	4b78      	ldr	r3, [pc, #480]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a77      	ldr	r2, [pc, #476]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	e00b      	b.n	800346e <HAL_RCC_OscConfig+0x32a>
 8003456:	4b75      	ldr	r3, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a74      	ldr	r2, [pc, #464]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	4b72      	ldr	r3, [pc, #456]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a71      	ldr	r2, [pc, #452]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d015      	beq.n	80034a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fd fcd5 	bl	8000e24 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fd fcd1 	bl	8000e24 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0c5      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCC_OscConfig+0x33a>
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a2:	f7fd fcbf 	bl	8000e24 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fcbb 	bl	8000e24 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0af      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c0:	4b5a      	ldr	r3, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b56      	ldr	r3, [pc, #344]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a55      	ldr	r2, [pc, #340]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 809b 	beq.w	800361e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d05c      	beq.n	80035ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d141      	bne.n	8003580 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <HAL_RCC_OscConfig+0x4ec>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7fd fc8f 	bl	8000e24 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350a:	f7fd fc8b 	bl	8000e24 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e081      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351c:	4b43      	ldr	r3, [pc, #268]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	3b01      	subs	r3, #1
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	4937      	ldr	r1, [pc, #220]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_OscConfig+0x4ec>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fd fc64 	bl	8000e24 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fd fc60 	bl	8000e24 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e056      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	4b2e      	ldr	r3, [pc, #184]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x41c>
 800357e:	e04e      	b.n	800361e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_OscConfig+0x4ec>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fd fc4d 	bl	8000e24 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd fc49 	bl	8000e24 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e03f      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x44a>
 80035ac:	e037      	b.n	800361e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e032      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <HAL_RCC_OscConfig+0x4e8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d028      	beq.n	800361a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d121      	bne.n	800361a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11a      	bne.n	800361a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ea:	4013      	ands	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d111      	bne.n	800361a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d107      	bne.n	800361a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40007000 	.word	0x40007000
 800362c:	40023800 	.word	0x40023800
 8003630:	42470060 	.word	0x42470060

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fd fb7e 	bl	8000e24 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fd fb7a 	bl	8000e24 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fade 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	080061ac 	.word	0x080061ac
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	2300      	movs	r3, #0
 8003812:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003818:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x40>
 8003824:	2b08      	cmp	r3, #8
 8003826:	f200 80bd 	bhi.w	80039a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x34>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x3a>
 8003832:	e0b7      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b61      	ldr	r3, [pc, #388]	; (80039bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003836:	60bb      	str	r3, [r7, #8]
       break;
 8003838:	e0b7      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383a:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800383c:	60bb      	str	r3, [r7, #8]
      break;
 800383e:	e0b4      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4b5d      	ldr	r3, [pc, #372]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384a:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04d      	beq.n	80038f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	ea02 0800 	and.w	r8, r2, r0
 800386e:	ea03 0901 	and.w	r9, r3, r1
 8003872:	4640      	mov	r0, r8
 8003874:	4649      	mov	r1, r9
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	014b      	lsls	r3, r1, #5
 8003880:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003884:	0142      	lsls	r2, r0, #5
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	ebb0 0008 	subs.w	r0, r0, r8
 800388e:	eb61 0109 	sbc.w	r1, r1, r9
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038a0:	0182      	lsls	r2, r0, #6
 80038a2:	1a12      	subs	r2, r2, r0
 80038a4:	eb63 0301 	sbc.w	r3, r3, r1
 80038a8:	f04f 0000 	mov.w	r0, #0
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	00d9      	lsls	r1, r3, #3
 80038b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b6:	00d0      	lsls	r0, r2, #3
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	eb12 0208 	adds.w	r2, r2, r8
 80038c0:	eb43 0309 	adc.w	r3, r3, r9
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	0259      	lsls	r1, r3, #9
 80038ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038d2:	0250      	lsls	r0, r2, #9
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	461a      	mov	r2, r3
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f7fc fc70 	bl	80001c8 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4613      	mov	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e04a      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	461a      	mov	r2, r3
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	ea02 0400 	and.w	r4, r2, r0
 800390a:	ea03 0501 	and.w	r5, r3, r1
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	014b      	lsls	r3, r1, #5
 800391c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003920:	0142      	lsls	r2, r0, #5
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	1b00      	subs	r0, r0, r4
 8003928:	eb61 0105 	sbc.w	r1, r1, r5
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	018b      	lsls	r3, r1, #6
 8003936:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800393a:	0182      	lsls	r2, r0, #6
 800393c:	1a12      	subs	r2, r2, r0
 800393e:	eb63 0301 	sbc.w	r3, r3, r1
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	00d9      	lsls	r1, r3, #3
 800394c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003950:	00d0      	lsls	r0, r2, #3
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	1912      	adds	r2, r2, r4
 8003958:	eb45 0303 	adc.w	r3, r5, r3
 800395c:	f04f 0000 	mov.w	r0, #0
 8003960:	f04f 0100 	mov.w	r1, #0
 8003964:	0299      	lsls	r1, r3, #10
 8003966:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800396a:	0290      	lsls	r0, r2, #10
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	f7fc fc24 	bl	80001c8 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4613      	mov	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	60bb      	str	r3, [r7, #8]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039a6:	60bb      	str	r3, [r7, #8]
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	68bb      	ldr	r3, [r7, #8]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200

080039c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	20000000 	.word	0x20000000

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff0 	bl	80039c4 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	080061bc 	.word	0x080061bc

08003a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a04:	b084      	sub	sp, #16
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	f107 001c 	add.w	r0, r7, #28
 8003a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d122      	bne.n	8003a62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f9a0 	bl	8003d9c <USB_CoreReset>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e01a      	b.n	8003a98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f994 	bl	8003d9c <USB_CoreReset>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
 8003a8a:	e005      	b.n	8003a98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10b      	bne.n	8003ab6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f043 0206 	orr.w	r2, r3, #6
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac2:	b004      	add	sp, #16
 8003ac4:	4770      	bx	lr

08003ac6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 0201 	bic.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b38:	2001      	movs	r0, #1
 8003b3a:	f7fd f97f 	bl	8000e3c <HAL_Delay>
      ms++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f91a 	bl	8003d7e <USB_GetMode>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d01e      	beq.n	8003b8e <USB_SetCurrentMode+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b31      	cmp	r3, #49	; 0x31
 8003b54:	d9f0      	bls.n	8003b38 <USB_SetCurrentMode+0x2e>
 8003b56:	e01a      	b.n	8003b8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7fd f966 	bl	8000e3c <HAL_Delay>
      ms++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f901 	bl	8003d7e <USB_GetMode>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <USB_SetCurrentMode+0x84>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b31      	cmp	r3, #49	; 0x31
 8003b86:	d9f0      	bls.n	8003b6a <USB_SetCurrentMode+0x60>
 8003b88:	e001      	b.n	8003b8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e005      	b.n	8003b9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b32      	cmp	r3, #50	; 0x32
 8003b92:	d101      	bne.n	8003b98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <USB_FlushTxFifo+0x44>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e006      	b.n	8003bdc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d0f1      	beq.n	8003bbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	00030d40 	.word	0x00030d40

08003bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <USB_FlushRxFifo+0x3c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e006      	b.n	8003c1c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d0f1      	beq.n	8003bfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	00030d40 	.word	0x00030d40

08003c2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	71fb      	strb	r3, [r7, #7]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d123      	bne.n	8003c9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c52:	88bb      	ldrh	r3, [r7, #4]
 8003c54:	3303      	adds	r3, #3
 8003c56:	089b      	lsrs	r3, r3, #2
 8003c58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e018      	b.n	8003c92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	031a      	lsls	r2, r3, #12
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	3301      	adds	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3e2      	bcc.n	8003c60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3724      	adds	r7, #36	; 0x24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b08b      	sub	sp, #44	; 0x2c
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	e014      	b.n	8003cfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	3301      	adds	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	623b      	str	r3, [r7, #32]
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3e6      	bcc.n	8003cd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d06:	8bfb      	ldrh	r3, [r7, #30]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d16:	461a      	mov	r2, r3
 8003d18:	f107 0310 	add.w	r3, r7, #16
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	701a      	strb	r2, [r3, #0]
      i++;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	3301      	adds	r3, #1
 8003d36:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d3e:	8bfb      	ldrh	r3, [r7, #30]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ea      	bne.n	8003d20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	372c      	adds	r7, #44	; 0x2c
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <USB_CoreReset+0x60>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e01a      	b.n	8003dee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	daf3      	bge.n	8003da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <USB_CoreReset+0x60>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e006      	b.n	8003dee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d0f1      	beq.n	8003dd0 <USB_CoreReset+0x34>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	00030d40 	.word	0x00030d40

08003e00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e00:	b084      	sub	sp, #16
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	f107 001c 	add.w	r0, r7, #28
 8003e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10a      	bne.n	8003e6e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e014      	b.n	8003e98 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e7c:	f023 0304 	bic.w	r3, r3, #4
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e009      	b.n	8003e98 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e98:	2110      	movs	r1, #16
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fe82 	bl	8003ba4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fea3 	bl	8003bec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e015      	b.n	8003ed8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3e5      	bcc.n	8003eac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <USB_HostInit+0x154>)
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <USB_HostInit+0x158>)
 8003f0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003f10:	e009      	b.n	8003f26 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <USB_HostInit+0x15c>)
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <USB_HostInit+0x160>)
 8003f22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f043 0210 	orr.w	r2, r3, #16
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <USB_HostInit+0x164>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f50:	b004      	add	sp, #16
 8003f52:	4770      	bx	lr
 8003f54:	01000200 	.word	0x01000200
 8003f58:	00e00300 	.word	0x00e00300
 8003f5c:	00600080 	.word	0x00600080
 8003f60:	004000e0 	.word	0x004000e0
 8003f64:	a3200008 	.word	0xa3200008

08003f68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003fb6:	6053      	str	r3, [r2, #4]
 8003fb8:	e009      	b.n	8003fce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d106      	bne.n	8003fce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8003fcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004000:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <USB_DriveVbus+0x44>
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d106      	bne.n	8004020 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800401a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800401e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402a:	d109      	bne.n	8004040 <USB_DriveVbus+0x64>
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800403a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	0c5b      	lsrs	r3, r3, #17
 800406c:	f003 0303 	and.w	r3, r3, #3
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	b29b      	uxth	r3, r3
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70bb      	strb	r3, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	461a      	mov	r2, r3
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80040d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d87e      	bhi.n	80041dc <USB_HC_Init+0x13c>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <USB_HC_Init+0x44>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	0800419f 	.word	0x0800419f
 80040ec:	080040f5 	.word	0x080040f5
 80040f0:	08004161 	.word	0x08004161
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	f240 439d 	movw	r3, #1181	; 0x49d
 8004106:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800410c:	2b00      	cmp	r3, #0
 800410e:	da10      	bge.n	8004132 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	440a      	add	r2, r1
 8004126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800412a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004130:	e057      	b.n	80041e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d051      	beq.n	80041e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	440a      	add	r2, r1
 8004154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004158:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800415c:	60d3      	str	r3, [r2, #12]
      break;
 800415e:	e040      	b.n	80041e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	461a      	mov	r2, r3
 800416e:	f240 639d 	movw	r3, #1693	; 0x69d
 8004172:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004174:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da34      	bge.n	80041e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	440a      	add	r2, r1
 8004192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800419c:	e023      	b.n	80041e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	461a      	mov	r2, r3
 80041ac:	f240 2325 	movw	r3, #549	; 0x225
 80041b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80041b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da17      	bge.n	80041ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80041d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80041da:	e006      	b.n	80041ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
      break;
 80041e0:	e004      	b.n	80041ec <USB_HC_Init+0x14c>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <USB_HC_Init+0x14c>
      break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <USB_HC_Init+0x14c>
      break;
 80041ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	6939      	ldr	r1, [r7, #16]
 8004202:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004206:	4313      	orrs	r3, r2
 8004208:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004216:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da03      	bge.n	8004226 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e001      	b.n	800422a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff ff0f 	bl	800404e <USB_GetHostSpeed>
 8004230:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004236:	2b02      	cmp	r3, #2
 8004238:	d106      	bne.n	8004248 <USB_HC_Init+0x1a8>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d003      	beq.n	8004248 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e001      	b.n	800424c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	059b      	lsls	r3, r3, #22
 8004250:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004254:	78bb      	ldrb	r3, [r7, #2]
 8004256:	02db      	lsls	r3, r3, #11
 8004258:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800425c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800425e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004262:	049b      	lsls	r3, r3, #18
 8004264:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004268:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800426a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800426c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004270:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	0159      	lsls	r1, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	440b      	add	r3, r1
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004288:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800428a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800428e:	2b03      	cmp	r3, #3
 8004290:	d10f      	bne.n	80042b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80042d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d02d      	beq.n	8004342 <USB_HC_StartXfer+0x86>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	791b      	ldrb	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d129      	bne.n	8004342 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d117      	bne.n	8004324 <USB_HC_StartXfer+0x68>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	79db      	ldrb	r3, [r3, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <USB_HC_StartXfer+0x48>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	79db      	ldrb	r3, [r3, #7]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d10f      	bne.n	8004324 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	6a3a      	ldr	r2, [r7, #32]
 8004318:	440a      	add	r2, r1
 800431a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <USB_HC_StartXfer+0x86>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	795b      	ldrb	r3, [r3, #5]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d107      	bne.n	8004342 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	4619      	mov	r1, r3
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa2f 	bl	800479c <USB_DoPing>
      return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e0f8      	b.n	8004534 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d018      	beq.n	800437c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	8912      	ldrh	r2, [r2, #8]
 8004352:	4413      	add	r3, r2
 8004354:	3b01      	subs	r3, #1
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	8912      	ldrh	r2, [r2, #8]
 800435a:	fbb3 f3f2 	udiv	r3, r3, r2
 800435e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004362:	8b7b      	ldrh	r3, [r7, #26]
 8004364:	429a      	cmp	r2, r3
 8004366:	d90b      	bls.n	8004380 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004368:	8b7b      	ldrh	r3, [r7, #26]
 800436a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800436c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	8912      	ldrh	r2, [r2, #8]
 8004372:	fb02 f203 	mul.w	r2, r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	611a      	str	r2, [r3, #16]
 800437a:	e001      	b.n	8004380 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800437c:	2301      	movs	r3, #1
 800437e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	8912      	ldrh	r2, [r2, #8]
 800438e:	fb02 f203 	mul.w	r2, r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	e003      	b.n	80043a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043aa:	04d9      	lsls	r1, r3, #19
 80043ac:	4b63      	ldr	r3, [pc, #396]	; (800453c <USB_HC_StartXfer+0x280>)
 80043ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	7a9b      	ldrb	r3, [r3, #10]
 80043b6:	075b      	lsls	r3, r3, #29
 80043b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043bc:	69f9      	ldr	r1, [r7, #28]
 80043be:	0148      	lsls	r0, r1, #5
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	4401      	add	r1, r0
 80043c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	460a      	mov	r2, r1
 80043e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	440a      	add	r2, r1
 8004414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004418:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800441c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	7e7b      	ldrb	r3, [r7, #25]
 800442e:	075b      	lsls	r3, r3, #29
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	0148      	lsls	r0, r1, #5
 8004434:	6a39      	ldr	r1, [r7, #32]
 8004436:	4401      	add	r1, r0
 8004438:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004456:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	78db      	ldrb	r3, [r3, #3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e003      	b.n	8004472 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004470:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004478:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	461a      	mov	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e04e      	b.n	8004534 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	78db      	ldrb	r3, [r3, #3]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d149      	bne.n	8004532 <USB_HC_StartXfer+0x276>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d045      	beq.n	8004532 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	79db      	ldrb	r3, [r3, #7]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d830      	bhi.n	8004510 <USB_HC_StartXfer+0x254>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <USB_HC_StartXfer+0x1f8>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044e9 	.word	0x080044e9
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	080044e9 	.word	0x080044e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	3303      	adds	r3, #3
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80044ce:	8afa      	ldrh	r2, [r7, #22]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d91c      	bls.n	8004514 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80044e6:	e015      	b.n	8004514 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	3303      	adds	r3, #3
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80044f2:	8afa      	ldrh	r2, [r7, #22]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	429a      	cmp	r2, r3
 8004500:	d90a      	bls.n	8004518 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	619a      	str	r2, [r3, #24]
        }
        break;
 800450e:	e003      	b.n	8004518 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004510:	bf00      	nop
 8004512:	e002      	b.n	800451a <USB_HC_StartXfer+0x25e>
        break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <USB_HC_StartXfer+0x25e>
        break;
 8004518:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	785a      	ldrb	r2, [r3, #1]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	b29b      	uxth	r3, r3
 8004528:	2000      	movs	r0, #0
 800452a:	9000      	str	r0, [sp, #0]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fb7d 	bl	8003c2c <USB_WritePacket>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	; 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	1ff80000 	.word	0x1ff80000

08004540 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	b29b      	uxth	r3, r3
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004562:	b480      	push	{r7}
 8004564:	b089      	sub	sp, #36	; 0x24
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	0c9b      	lsrs	r3, r3, #18
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0fdb      	lsrs	r3, r3, #31
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d104      	bne.n	80045bc <USB_HC_Halt+0x5a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e0e8      	b.n	800478e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <USB_HC_Halt+0x66>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d173      	bne.n	80046b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	0151      	lsls	r1, r2, #5
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	440a      	add	r2, r1
 80045de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 80cb 	bne.w	800478c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d143      	bne.n	800468a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	440a      	add	r2, r1
 8004618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800461c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004620:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004640:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	440a      	add	r2, r1
 8004658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004660:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3301      	adds	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800466e:	d81d      	bhi.n	80046ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004686:	d0ec      	beq.n	8004662 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004688:	e080      	b.n	800478c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046aa:	e06f      	b.n	800478c <USB_HC_Halt+0x22a>
            break;
 80046ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046ae:	e06d      	b.n	800478c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d143      	bne.n	8004768 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4413      	add	r3, r2
 8004708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	440a      	add	r2, r1
 8004716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800471e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	440a      	add	r2, r1
 8004736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800473a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800473e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474c:	d81d      	bhi.n	800478a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004764:	d0ec      	beq.n	8004740 <USB_HC_Halt+0x1de>
 8004766:	e011      	b.n	800478c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	440a      	add	r2, r1
 800477e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e000      	b.n	800478c <USB_HC_Halt+0x22a>
          break;
 800478a:	bf00      	nop
    }
  }

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3724      	adds	r7, #36	; 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80047b0:	2301      	movs	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	04da      	lsls	r2, r3, #19
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <USB_DoPing+0x74>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	1ff80000 	.word	0x1ff80000

08004814 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff f95f 	bl	8003ae8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800482a:	2110      	movs	r1, #16
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff f9b9 	bl	8003ba4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff f9da 	bl	8003bec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e01f      	b.n	800487e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004854:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800485c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004864:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d9dc      	bls.n	800483e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e034      	b.n	80048f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048be:	461a      	mov	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3301      	adds	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d0:	d80c      	bhi.n	80048ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e8:	d0ec      	beq.n	80048c4 <USB_StopHost+0xb0>
 80048ea:	e000      	b.n	80048ee <USB_StopHost+0xda>
        break;
 80048ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3301      	adds	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b0f      	cmp	r3, #15
 80048f8:	d9c7      	bls.n	800488a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f8d8 	bl	8003ac6 <USB_EnableGlobalInt>

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b089      	sub	sp, #36	; 0x24
 8004924:	af04      	add	r7, sp, #16
 8004926:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004928:	2301      	movs	r3, #1
 800492a:	2202      	movs	r2, #2
 800492c:	2102      	movs	r1, #2
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fc66 	bl	8005200 <USBH_FindInterface>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2bff      	cmp	r3, #255	; 0xff
 800493c:	d002      	beq.n	8004944 <USBH_CDC_InterfaceInit+0x24>
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d901      	bls.n	8004948 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004944:	2302      	movs	r3, #2
 8004946:	e13d      	b.n	8004bc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fc3b 	bl	80051c8 <USBH_SelectInterface>
 8004952:	4603      	mov	r3, r0
 8004954:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004956:	7bbb      	ldrb	r3, [r7, #14]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800495c:	2302      	movs	r3, #2
 800495e:	e131      	b.n	8004bc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004966:	2050      	movs	r0, #80	; 0x50
 8004968:	f001 fb12 	bl	8005f90 <malloc>
 800496c:	4603      	mov	r3, r0
 800496e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004980:	2302      	movs	r3, #2
 8004982:	e11f      	b.n	8004bc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004984:	2250      	movs	r2, #80	; 0x50
 8004986:	2100      	movs	r1, #0
 8004988:	68b8      	ldr	r0, [r7, #8]
 800498a:	f001 fb11 	bl	8005fb0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	211a      	movs	r1, #26
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	da15      	bge.n	80049d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	211a      	movs	r1, #26
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	211a      	movs	r1, #26
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 ff9c 	bl	8005916 <USBH_AllocPipe>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	7819      	ldrb	r1, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	7858      	ldrb	r0, [r3, #1]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	8952      	ldrh	r2, [r2, #10]
 80049fe:	9202      	str	r2, [sp, #8]
 8004a00:	2203      	movs	r2, #3
 8004a02:	9201      	str	r2, [sp, #4]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4623      	mov	r3, r4
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 ff54 	bl	80058b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2200      	movs	r2, #0
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 fa17 	bl	8005e4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2200      	movs	r2, #0
 8004a22:	210a      	movs	r1, #10
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fbeb 	bl	8005200 <USBH_FindInterface>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2bff      	cmp	r3, #255	; 0xff
 8004a32:	d002      	beq.n	8004a3a <USBH_CDC_InterfaceInit+0x11a>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d901      	bls.n	8004a3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0c2      	b.n	8004bc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	211a      	movs	r1, #26
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da16      	bge.n	8004a84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	211a      	movs	r1, #26
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	211a      	movs	r1, #26
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a7c:	881a      	ldrh	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	835a      	strh	r2, [r3, #26]
 8004a82:	e015      	b.n	8004ab0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	211a      	movs	r1, #26
 8004a8a:	fb01 f303 	mul.w	r3, r1, r3
 8004a8e:	4413      	add	r3, r2
 8004a90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	211a      	movs	r1, #26
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	211a      	movs	r1, #26
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	da16      	bge.n	8004af6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	211a      	movs	r1, #26
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	211a      	movs	r1, #26
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	835a      	strh	r2, [r3, #26]
 8004af4:	e015      	b.n	8004b22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	211a      	movs	r1, #26
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	211a      	movs	r1, #26
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	7b9b      	ldrb	r3, [r3, #14]
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fef4 	bl	8005916 <USBH_AllocPipe>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	7bdb      	ldrb	r3, [r3, #15]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 feea 	bl	8005916 <USBH_AllocPipe>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	7b59      	ldrb	r1, [r3, #13]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	7b98      	ldrb	r0, [r3, #14]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	8b12      	ldrh	r2, [r2, #24]
 8004b62:	9202      	str	r2, [sp, #8]
 8004b64:	2202      	movs	r2, #2
 8004b66:	9201      	str	r2, [sp, #4]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fea2 	bl	80058b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	7b19      	ldrb	r1, [r3, #12]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	7bd8      	ldrb	r0, [r3, #15]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	8b52      	ldrh	r2, [r2, #26]
 8004b8c:	9202      	str	r2, [sp, #8]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	9201      	str	r2, [sp, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4623      	mov	r3, r4
 8004b96:	4602      	mov	r2, r0
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fe8d 	bl	80058b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	7b5b      	ldrb	r3, [r3, #13]
 8004baa:	2200      	movs	r2, #0
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f001 f94c 	bl	8005e4c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	7b1b      	ldrb	r3, [r3, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 f945 	bl	8005e4c <USBH_LL_SetToggle>

  return USBH_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}

08004bcc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fe82 	bl	80058f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fead 	bl	8005958 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	7b1b      	ldrb	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00e      	beq.n	8004c2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	7b1b      	ldrb	r3, [r3, #12]
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fe6f 	bl	80058f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	7b1b      	ldrb	r3, [r3, #12]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fe9a 	bl	8005958 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	7b5b      	ldrb	r3, [r3, #13]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	7b5b      	ldrb	r3, [r3, #13]
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fe5c 	bl	80058f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	7b5b      	ldrb	r3, [r3, #13]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fe87 	bl	8005958 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 f99b 	bl	8005fa0 <free>
    phost->pActiveClass->pData = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c70:	2200      	movs	r2, #0
 8004c72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3340      	adds	r3, #64	; 0x40
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8b1 	bl	8004dfe <GetLineCoding>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004cac:	2102      	movs	r1, #2
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d877      	bhi.n	8004dd0 <USBH_CDC_Process+0x114>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <USBH_CDC_Process+0x2c>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cfd 	.word	0x08004cfd
 8004cec:	08004d03 	.word	0x08004d03
 8004cf0:	08004d33 	.word	0x08004d33
 8004cf4:	08004da7 	.word	0x08004da7
 8004cf8:	08004db5 	.word	0x08004db5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e06d      	b.n	8004dde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f897 	bl	8004e3c <SetLineCoding>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004d20:	e058      	b.n	8004dd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004d22:	7bbb      	ldrb	r3, [r7, #14]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d055      	beq.n	8004dd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004d30:	e050      	b.n	8004dd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3340      	adds	r3, #64	; 0x40
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f860 	bl	8004dfe <GetLineCoding>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d126      	bne.n	8004d96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	791b      	ldrb	r3, [r3, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d13b      	bne.n	8004dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d133      	bne.n	8004dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d12b      	bne.n	8004dd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d124      	bne.n	8004dd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f958 	bl	8005044 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004d94:	e020      	b.n	8004dd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d01d      	beq.n	8004dd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004da4:	e018      	b.n	8004dd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f867 	bl	8004e7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8da 	bl	8004f66 <CDC_ProcessReception>
      break;
 8004db2:	e014      	b.n	8004dde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004db4:	2100      	movs	r1, #0
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb08 	bl	80053cc <USBH_ClrFeature>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8004dce:	e005      	b.n	8004ddc <USBH_CDC_Process+0x120>

    default:
      break;
 8004dd0:	bf00      	nop
 8004dd2:	e004      	b.n	8004dde <USBH_CDC_Process+0x122>
      break;
 8004dd4:	bf00      	nop
 8004dd6:	e002      	b.n	8004dde <USBH_CDC_Process+0x122>
      break;
 8004dd8:	bf00      	nop
 8004dda:	e000      	b.n	8004dde <USBH_CDC_Process+0x122>
      break;
 8004ddc:	bf00      	nop

  }

  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	22a1      	movs	r2, #161	; 0xa1
 8004e0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2221      	movs	r2, #33	; 0x21
 8004e12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2207      	movs	r2, #7
 8004e24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2207      	movs	r2, #7
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 faf1 	bl	8005414 <USBH_CtlReq>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2221      	movs	r2, #33	; 0x21
 8004e4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2207      	movs	r2, #7
 8004e62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2207      	movs	r2, #7
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fad2 	bl	8005414 <USBH_CtlReq>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d002      	beq.n	8004ea0 <CDC_ProcessTransmission+0x26>
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d023      	beq.n	8004ee6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004e9e:	e05e      	b.n	8004f5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	8b12      	ldrh	r2, [r2, #24]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d90b      	bls.n	8004ec4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69d9      	ldr	r1, [r3, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8b1a      	ldrh	r2, [r3, #24]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	7b5b      	ldrb	r3, [r3, #13]
 8004eb8:	2001      	movs	r0, #1
 8004eba:	9000      	str	r0, [sp, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fcb8 	bl	8005832 <USBH_BulkSendData>
 8004ec2:	e00b      	b.n	8004edc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	7b5b      	ldrb	r3, [r3, #13]
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	9000      	str	r0, [sp, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fcab 	bl	8005832 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004ee4:	e03b      	b.n	8004f5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	7b5b      	ldrb	r3, [r3, #13]
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 ff83 	bl	8005df8 <USBH_LL_GetURBState>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d128      	bne.n	8004f4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	8b12      	ldrh	r2, [r2, #24]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d90e      	bls.n	8004f26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	8b12      	ldrh	r2, [r2, #24]
 8004f10:	1a9a      	subs	r2, r3, r2
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	8b12      	ldrh	r2, [r2, #24]
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	61da      	str	r2, [r3, #28]
 8004f24:	e002      	b.n	8004f2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004f3c:	e00e      	b.n	8004f5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f868 	bl	800501c <USBH_CDC_TransmitCallback>
      break;
 8004f4c:	e006      	b.n	8004f5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d103      	bne.n	8004f5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004f5c:	bf00      	nop
  }
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d002      	beq.n	8004f8c <CDC_ProcessReception+0x26>
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00e      	beq.n	8004fa8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004f8a:	e043      	b.n	8005014 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	6a19      	ldr	r1, [r3, #32]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	8b5a      	ldrh	r2, [r3, #26]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	7b1b      	ldrb	r3, [r3, #12]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fc6f 	bl	800587c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004fa6:	e035      	b.n	8005014 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	7b1b      	ldrb	r3, [r3, #12]
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 ff22 	bl	8005df8 <USBH_LL_GetURBState>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d129      	bne.n	8005012 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	7b1b      	ldrb	r3, [r3, #12]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fe85 	bl	8005cd4 <USBH_LL_GetLastXferSize>
 8004fca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d016      	beq.n	8005004 <CDC_ProcessReception+0x9e>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	8b5b      	ldrh	r3, [r3, #26]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d910      	bls.n	8005004 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1ad2      	subs	r2, r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	441a      	add	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005002:	e006      	b.n	8005012 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f80f 	bl	8005030 <USBH_CDC_ReceiveCallback>
      break;
 8005012:	bf00      	nop
  }
}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800506c:	2302      	movs	r3, #2
 800506e:	e029      	b.n	80050c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	79fa      	ldrb	r2, [r7, #7]
 8005074:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f81f 	bl	80050cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fd97 	bl	8005bf0 <USBH_LL_Init>

  return USBH_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e009      	b.n	80050f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	33e0      	adds	r3, #224	; 0xe0
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	2200      	movs	r2, #0
 80050ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b0e      	cmp	r3, #14
 80050f6:	d9f2      	bls.n	80050de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e009      	b.n	8005112 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d3f1      	bcc.n	80050fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2240      	movs	r2, #64	; 0x40
 800513e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10e      	bne.n	80051b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005198:	1c59      	adds	r1, r3, #1
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	33de      	adds	r3, #222	; 0xde
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	e004      	b.n	80051ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80051b0:	2302      	movs	r3, #2
 80051b2:	73fb      	strb	r3, [r7, #15]
 80051b4:	e001      	b.n	80051ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80051b6:	2302      	movs	r3, #2
 80051b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d204      	bcs.n	80051ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80051ec:	e001      	b.n	80051f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80051ee:	2302      	movs	r3, #2
 80051f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	70fb      	strb	r3, [r7, #3]
 8005212:	460b      	mov	r3, r1
 8005214:	70bb      	strb	r3, [r7, #2]
 8005216:	4613      	mov	r3, r2
 8005218:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005228:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800522a:	e025      	b.n	8005278 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	221a      	movs	r2, #26
 8005230:	fb02 f303 	mul.w	r3, r2, r3
 8005234:	3308      	adds	r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	3302      	adds	r3, #2
 800523c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	795b      	ldrb	r3, [r3, #5]
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	429a      	cmp	r2, r3
 8005246:	d002      	beq.n	800524e <USBH_FindInterface+0x4e>
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	d111      	bne.n	8005272 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005252:	78ba      	ldrb	r2, [r7, #2]
 8005254:	429a      	cmp	r2, r3
 8005256:	d002      	beq.n	800525e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005258:	78bb      	ldrb	r3, [r7, #2]
 800525a:	2bff      	cmp	r3, #255	; 0xff
 800525c:	d109      	bne.n	8005272 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005262:	787a      	ldrb	r2, [r7, #1]
 8005264:	429a      	cmp	r2, r3
 8005266:	d002      	beq.n	800526e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	2bff      	cmp	r3, #255	; 0xff
 800526c:	d101      	bne.n	8005272 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	e006      	b.n	8005280 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	3301      	adds	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d9d6      	bls.n	800522c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800527e:	23ff      	movs	r3, #255	; 0xff
}
 8005280:	4618      	mov	r0, r3
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fce7 	bl	8005c68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fdbe 	bl	8005e1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f804 	bl	80052ee <USBH_HandleSof>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b0b      	cmp	r3, #11
 80052fe:	d10a      	bne.n	8005316 <USBH_HandleSof+0x28>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
  }
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800532e:	bf00      	nop
}
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800534a:	bf00      	nop
}
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fc7a 	bl	8005c9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	791b      	ldrb	r3, [r3, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fad1 	bl	8005958 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	795b      	ldrb	r3, [r3, #5]
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 facb 	bl	8005958 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	789b      	ldrb	r3, [r3, #2]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d10f      	bne.n	8005400 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005400:	2200      	movs	r2, #0
 8005402:	2100      	movs	r1, #0
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f805 	bl	8005414 <USBH_CtlReq>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d002      	beq.n	8005434 <USBH_CtlReq+0x20>
 800542e:	2b02      	cmp	r3, #2
 8005430:	d00f      	beq.n	8005452 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005432:	e027      	b.n	8005484 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2202      	movs	r2, #2
 800544a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	e018      	b.n	8005484 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f81c 	bl	8005490 <USBH_HandleControl>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <USBH_CtlReq+0x54>
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d106      	bne.n	8005476 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	761a      	strb	r2, [r3, #24]
      break;
 8005474:	e005      	b.n	8005482 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d102      	bne.n	8005482 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	709a      	strb	r2, [r3, #2]
      break;
 8005482:	bf00      	nop
  }
  return status;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800549c:	2300      	movs	r3, #0
 800549e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	2b0a      	cmp	r3, #10
 80054a8:	f200 8156 	bhi.w	8005758 <USBH_HandleControl+0x2c8>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <USBH_HandleControl+0x24>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054fb 	.word	0x080054fb
 80054bc:	08005565 	.word	0x08005565
 80054c0:	0800558b 	.word	0x0800558b
 80054c4:	080055c3 	.word	0x080055c3
 80054c8:	080055ed 	.word	0x080055ed
 80054cc:	0800563f 	.word	0x0800563f
 80054d0:	08005661 	.word	0x08005661
 80054d4:	0800569d 	.word	0x0800569d
 80054d8:	080056c3 	.word	0x080056c3
 80054dc:	08005701 	.word	0x08005701
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 0110 	add.w	r1, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	795b      	ldrb	r3, [r3, #5]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f943 	bl	8005778 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	761a      	strb	r2, [r3, #24]
      break;
 80054f8:	e139      	b.n	800576e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	795b      	ldrb	r3, [r3, #5]
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fc79 	bl	8005df8 <USBH_LL_GetURBState>
 8005506:	4603      	mov	r3, r0
 8005508:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800550a:	7bbb      	ldrb	r3, [r7, #14]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d11e      	bne.n	800554e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7c1b      	ldrb	r3, [r3, #16]
 8005514:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005518:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8adb      	ldrh	r3, [r3, #22]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005522:	7b7b      	ldrb	r3, [r7, #13]
 8005524:	2b80      	cmp	r3, #128	; 0x80
 8005526:	d103      	bne.n	8005530 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2203      	movs	r2, #3
 800552c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800552e:	e115      	b.n	800575c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2205      	movs	r2, #5
 8005534:	761a      	strb	r2, [r3, #24]
      break;
 8005536:	e111      	b.n	800575c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8005538:	7b7b      	ldrb	r3, [r7, #13]
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d103      	bne.n	8005546 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2209      	movs	r2, #9
 8005542:	761a      	strb	r2, [r3, #24]
      break;
 8005544:	e10a      	b.n	800575c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2207      	movs	r2, #7
 800554a:	761a      	strb	r2, [r3, #24]
      break;
 800554c:	e106      	b.n	800575c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d003      	beq.n	800555c <USBH_HandleControl+0xcc>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	2b02      	cmp	r3, #2
 8005558:	f040 8100 	bne.w	800575c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	220b      	movs	r2, #11
 8005560:	761a      	strb	r2, [r3, #24]
      break;
 8005562:	e0fb      	b.n	800575c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6899      	ldr	r1, [r3, #8]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	899a      	ldrh	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	791b      	ldrb	r3, [r3, #4]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f93a 	bl	80057f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2204      	movs	r2, #4
 8005586:	761a      	strb	r2, [r3, #24]
      break;
 8005588:	e0f1      	b.n	800576e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	791b      	ldrb	r3, [r3, #4]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fc31 	bl	8005df8 <USBH_LL_GetURBState>
 8005596:	4603      	mov	r3, r0
 8005598:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d102      	bne.n	80055a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2209      	movs	r2, #9
 80055a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80055a6:	7bbb      	ldrb	r3, [r7, #14]
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d102      	bne.n	80055b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80055ac:	2303      	movs	r3, #3
 80055ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80055b0:	e0d6      	b.n	8005760 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	f040 80d3 	bne.w	8005760 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	220b      	movs	r2, #11
 80055be:	761a      	strb	r2, [r3, #24]
      break;
 80055c0:	e0ce      	b.n	8005760 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6899      	ldr	r1, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	899a      	ldrh	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	795b      	ldrb	r3, [r3, #5]
 80055ce:	2001      	movs	r0, #1
 80055d0:	9000      	str	r0, [sp, #0]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8ea 	bl	80057ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2206      	movs	r2, #6
 80055e8:	761a      	strb	r2, [r3, #24]
      break;
 80055ea:	e0c0      	b.n	800576e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	795b      	ldrb	r3, [r3, #5]
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fc00 	bl	8005df8 <USBH_LL_GetURBState>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d103      	bne.n	800560a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2207      	movs	r2, #7
 8005606:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005608:	e0ac      	b.n	8005764 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	2b05      	cmp	r3, #5
 800560e:	d105      	bne.n	800561c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	220c      	movs	r2, #12
 8005614:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005616:	2303      	movs	r3, #3
 8005618:	73fb      	strb	r3, [r7, #15]
      break;
 800561a:	e0a3      	b.n	8005764 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800561c:	7bbb      	ldrb	r3, [r7, #14]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d103      	bne.n	800562a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2205      	movs	r2, #5
 8005626:	761a      	strb	r2, [r3, #24]
      break;
 8005628:	e09c      	b.n	8005764 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800562a:	7bbb      	ldrb	r3, [r7, #14]
 800562c:	2b04      	cmp	r3, #4
 800562e:	f040 8099 	bne.w	8005764 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	220b      	movs	r2, #11
 8005636:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005638:	2302      	movs	r3, #2
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e092      	b.n	8005764 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8d5 	bl	80057f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2208      	movs	r2, #8
 800565c:	761a      	strb	r2, [r3, #24]

      break;
 800565e:	e086      	b.n	800576e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	791b      	ldrb	r3, [r3, #4]
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbc6 	bl	8005df8 <USBH_LL_GetURBState>
 800566c:	4603      	mov	r3, r0
 800566e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005670:	7bbb      	ldrb	r3, [r7, #14]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	220d      	movs	r2, #13
 800567a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005680:	e072      	b.n	8005768 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d103      	bne.n	8005690 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	220b      	movs	r2, #11
 800568c:	761a      	strb	r2, [r3, #24]
      break;
 800568e:	e06b      	b.n	8005768 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d168      	bne.n	8005768 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8005696:	2303      	movs	r3, #3
 8005698:	73fb      	strb	r3, [r7, #15]
      break;
 800569a:	e065      	b.n	8005768 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	795b      	ldrb	r3, [r3, #5]
 80056a0:	2201      	movs	r2, #1
 80056a2:	9200      	str	r2, [sp, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2100      	movs	r1, #0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f87f 	bl	80057ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	220a      	movs	r2, #10
 80056be:	761a      	strb	r2, [r3, #24]
      break;
 80056c0:	e055      	b.n	800576e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	795b      	ldrb	r3, [r3, #5]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb95 	bl	8005df8 <USBH_LL_GetURBState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d105      	bne.n	80056e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	220d      	movs	r2, #13
 80056e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80056e2:	e043      	b.n	800576c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d103      	bne.n	80056f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2209      	movs	r2, #9
 80056ee:	761a      	strb	r2, [r3, #24]
      break;
 80056f0:	e03c      	b.n	800576c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80056f2:	7bbb      	ldrb	r3, [r7, #14]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d139      	bne.n	800576c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	220b      	movs	r2, #11
 80056fc:	761a      	strb	r2, [r3, #24]
      break;
 80056fe:	e035      	b.n	800576c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7e5b      	ldrb	r3, [r3, #25]
 8005704:	3301      	adds	r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	765a      	strb	r2, [r3, #25]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7e5b      	ldrb	r3, [r3, #25]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d806      	bhi.n	8005722 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005720:	e025      	b.n	800576e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005728:	2106      	movs	r1, #6
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	795b      	ldrb	r3, [r3, #5]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f90c 	bl	8005958 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	791b      	ldrb	r3, [r3, #4]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f906 	bl	8005958 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005752:	2302      	movs	r3, #2
 8005754:	73fb      	strb	r3, [r7, #15]
      break;
 8005756:	e00a      	b.n	800576e <USBH_HandleControl+0x2de>

    default:
      break;
 8005758:	bf00      	nop
 800575a:	e008      	b.n	800576e <USBH_HandleControl+0x2de>
      break;
 800575c:	bf00      	nop
 800575e:	e006      	b.n	800576e <USBH_HandleControl+0x2de>
      break;
 8005760:	bf00      	nop
 8005762:	e004      	b.n	800576e <USBH_HandleControl+0x2de>
      break;
 8005764:	bf00      	nop
 8005766:	e002      	b.n	800576e <USBH_HandleControl+0x2de>
      break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <USBH_HandleControl+0x2de>
      break;
 800576c:	bf00      	nop
  }

  return status;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af04      	add	r7, sp, #16
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005786:	79f9      	ldrb	r1, [r7, #7]
 8005788:	2300      	movs	r3, #0
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	2308      	movs	r3, #8
 800578e:	9302      	str	r3, [sp, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	2300      	movs	r3, #0
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fafa 	bl	8005d96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af04      	add	r7, sp, #16
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	460b      	mov	r3, r1
 80057bc:	80fb      	strh	r3, [r7, #6]
 80057be:	4613      	mov	r3, r2
 80057c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80057d0:	7979      	ldrb	r1, [r7, #5]
 80057d2:	7e3b      	ldrb	r3, [r7, #24]
 80057d4:	9303      	str	r3, [sp, #12]
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	9302      	str	r3, [sp, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2301      	movs	r3, #1
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	2200      	movs	r2, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fad5 	bl	8005d96 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af04      	add	r7, sp, #16
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	4611      	mov	r1, r2
 8005802:	461a      	mov	r2, r3
 8005804:	460b      	mov	r3, r1
 8005806:	80fb      	strh	r3, [r7, #6]
 8005808:	4613      	mov	r3, r2
 800580a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800580c:	7979      	ldrb	r1, [r7, #5]
 800580e:	2300      	movs	r3, #0
 8005810:	9303      	str	r3, [sp, #12]
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	9302      	str	r3, [sp, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	2301      	movs	r3, #1
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	2300      	movs	r3, #0
 8005820:	2201      	movs	r2, #1
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fab7 	bl	8005d96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8005828:	2300      	movs	r3, #0

}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b088      	sub	sp, #32
 8005836:	af04      	add	r7, sp, #16
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	4611      	mov	r1, r2
 800583e:	461a      	mov	r2, r3
 8005840:	460b      	mov	r3, r1
 8005842:	80fb      	strh	r3, [r7, #6]
 8005844:	4613      	mov	r3, r2
 8005846:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005856:	7979      	ldrb	r1, [r7, #5]
 8005858:	7e3b      	ldrb	r3, [r7, #24]
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	2301      	movs	r3, #1
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2302      	movs	r3, #2
 800586a:	2200      	movs	r2, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fa92 	bl	8005d96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af04      	add	r7, sp, #16
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	460b      	mov	r3, r1
 800588c:	80fb      	strh	r3, [r7, #6]
 800588e:	4613      	mov	r3, r2
 8005890:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005892:	7979      	ldrb	r1, [r7, #5]
 8005894:	2300      	movs	r3, #0
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	9302      	str	r3, [sp, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	2301      	movs	r3, #1
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2302      	movs	r3, #2
 80058a6:	2201      	movs	r2, #1
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fa74 	bl	8005d96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af04      	add	r7, sp, #16
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	70fb      	strb	r3, [r7, #3]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70bb      	strb	r3, [r7, #2]
 80058ce:	4613      	mov	r3, r2
 80058d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80058d2:	7878      	ldrb	r0, [r7, #1]
 80058d4:	78ba      	ldrb	r2, [r7, #2]
 80058d6:	78f9      	ldrb	r1, [r7, #3]
 80058d8:	8b3b      	ldrh	r3, [r7, #24]
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	7d3b      	ldrb	r3, [r7, #20]
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	7c3b      	ldrb	r3, [r7, #16]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	4603      	mov	r3, r0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa07 	bl	8005cfa <USBH_LL_OpenPipe>

  return USBH_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fa26 	bl	8005d58 <USBH_LL_ClosePipe>

  return USBH_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f836 	bl	8005994 <USBH_GetFreePipe>
 8005928:	4603      	mov	r3, r0
 800592a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800592c:	89fb      	ldrh	r3, [r7, #14]
 800592e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005932:	4293      	cmp	r3, r2
 8005934:	d00a      	beq.n	800594c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	33e0      	adds	r3, #224	; 0xe0
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800594c:	89fb      	ldrh	r3, [r7, #14]
 800594e:	b2db      	uxtb	r3, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	2b0a      	cmp	r3, #10
 8005968:	d80d      	bhi.n	8005986 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	33e0      	adds	r3, #224	; 0xe0
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	78fb      	ldrb	r3, [r7, #3]
 8005978:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	33e0      	adds	r3, #224	; 0xe0
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	e00f      	b.n	80059c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	33e0      	adds	r3, #224	; 0xe0
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	e007      	b.n	80059d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	3301      	adds	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b0a      	cmp	r3, #10
 80059ca:	d9ec      	bls.n	80059a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80059cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80059e0:	2201      	movs	r2, #1
 80059e2:	490e      	ldr	r1, [pc, #56]	; (8005a1c <MX_USB_HOST_Init+0x40>)
 80059e4:	480e      	ldr	r0, [pc, #56]	; (8005a20 <MX_USB_HOST_Init+0x44>)
 80059e6:	f7ff fb37 	bl	8005058 <USBH_Init>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80059f0:	f7fb f896 	bl	8000b20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80059f4:	490b      	ldr	r1, [pc, #44]	; (8005a24 <MX_USB_HOST_Init+0x48>)
 80059f6:	480a      	ldr	r0, [pc, #40]	; (8005a20 <MX_USB_HOST_Init+0x44>)
 80059f8:	f7ff fbbc 	bl	8005174 <USBH_RegisterClass>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8005a02:	f7fb f88d 	bl	8000b20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005a06:	4806      	ldr	r0, [pc, #24]	; (8005a20 <MX_USB_HOST_Init+0x44>)
 8005a08:	f7ff fc40 	bl	800528c <USBH_Start>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8005a12:	f7fb f885 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08005a29 	.word	0x08005a29
 8005a20:	20000114 	.word	0x20000114
 8005a24:	2000000c 	.word	0x2000000c

08005a28 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d819      	bhi.n	8005a70 <USBH_UserProcess+0x48>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <USBH_UserProcess+0x1c>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a71 	.word	0x08005a71
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a71 	.word	0x08005a71
 8005a50:	08005a69 	.word	0x08005a69
 8005a54:	08005a59 	.word	0x08005a59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <USBH_UserProcess+0x58>)
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	701a      	strb	r2, [r3, #0]
  break;
 8005a5e:	e008      	b.n	8005a72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <USBH_UserProcess+0x58>)
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
  break;
 8005a66:	e004      	b.n	8005a72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <USBH_UserProcess+0x58>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
  break;
 8005a6e:	e000      	b.n	8005a72 <USBH_UserProcess+0x4a>

  default:
  break;
 8005a70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	200000b0 	.word	0x200000b0

08005a84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa4:	d147      	bne.n	8005b36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b22      	ldr	r3, [pc, #136]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	481b      	ldr	r0, [pc, #108]	; (8005b44 <HAL_HCD_MspInit+0xc0>)
 8005ad8:	f7fb fae6 	bl	80010a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005adc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aea:	2300      	movs	r3, #0
 8005aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005aee:	230a      	movs	r3, #10
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	4619      	mov	r1, r3
 8005af8:	4812      	ldr	r0, [pc, #72]	; (8005b44 <HAL_HCD_MspInit+0xc0>)
 8005afa:	f7fb fad5 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	4a0f      	ldr	r2, [pc, #60]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	6353      	str	r3, [r2, #52]	; 0x34
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b18:	6453      	str	r3, [r2, #68]	; 0x44
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <HAL_HCD_MspInit+0xbc>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	2043      	movs	r0, #67	; 0x43
 8005b2c:	f7fb fa85 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005b30:	2043      	movs	r0, #67	; 0x43
 8005b32:	f7fb fa9e 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005b36:	bf00      	nop
 8005b38:	3728      	adds	r7, #40	; 0x28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40020000 	.word	0x40020000

08005b48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fbb7 	bl	80052ca <USBH_LL_IncTimer>
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fbef 	bl	8005356 <USBH_LL_Connect>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fbf8 	bl	8005384 <USBH_LL_Disconnect>
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fba9 	bl	800531e <USBH_LL_PortEnabled>
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fba9 	bl	800533a <USBH_LL_PortDisabled>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d12a      	bne.n	8005c58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005c02:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c2e:	2202      	movs	r2, #2
 8005c30:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005c38:	480a      	ldr	r0, [pc, #40]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c3a:	f7fb fbea 	bl	8001412 <HAL_HCD_Init>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8005c44:	f7fa ff6c 	bl	8000b20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005c48:	4806      	ldr	r0, [pc, #24]	; (8005c64 <USBH_LL_Init+0x74>)
 8005c4a:	f7fb ffc0 	bl	8001bce <HAL_HCD_GetCurrentFrame>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fb2a 	bl	80052ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200004ec 	.word	0x200004ec

08005c68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fb ff3d 	bl	8001afe <HAL_HCD_Start>
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f90e 	bl	8005eac <USBH_Get_USB_Status>
 8005c90:	4603      	mov	r3, r0
 8005c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb ff45 	bl	8001b44 <HAL_HCD_Stop>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f8f3 	bl	8005eac <USBH_Get_USB_Status>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fb ff5b 	bl	8001ba6 <HAL_HCD_HC_GetXferCount>
 8005cf0:	4603      	mov	r3, r0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005cfa:	b590      	push	{r4, r7, lr}
 8005cfc:	b089      	sub	sp, #36	; 0x24
 8005cfe:	af04      	add	r7, sp, #16
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	461a      	mov	r2, r3
 8005d08:	4603      	mov	r3, r0
 8005d0a:	70fb      	strb	r3, [r7, #3]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70bb      	strb	r3, [r7, #2]
 8005d10:	4613      	mov	r3, r2
 8005d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005d22:	787c      	ldrb	r4, [r7, #1]
 8005d24:	78ba      	ldrb	r2, [r7, #2]
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4623      	mov	r3, r4
 8005d3a:	f7fb fbcc 	bl	80014d6 <HAL_HCD_HC_Init>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 f8b1 	bl	8005eac <USBH_Get_USB_Status>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}

08005d58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fb fc3c 	bl	80015f4 <HAL_HCD_HC_Halt>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f892 	bl	8005eac <USBH_Get_USB_Status>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005d96:	b590      	push	{r4, r7, lr}
 8005d98:	b089      	sub	sp, #36	; 0x24
 8005d9a:	af04      	add	r7, sp, #16
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	461a      	mov	r2, r3
 8005da4:	4603      	mov	r3, r0
 8005da6:	70fb      	strb	r3, [r7, #3]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70bb      	strb	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8005dbe:	787c      	ldrb	r4, [r7, #1]
 8005dc0:	78ba      	ldrb	r2, [r7, #2]
 8005dc2:	78f9      	ldrb	r1, [r7, #3]
 8005dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dc8:	9303      	str	r3, [sp, #12]
 8005dca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dcc:	9302      	str	r3, [sp, #8]
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4623      	mov	r3, r4
 8005dda:	f7fb fc2f 	bl	800163c <HAL_HCD_HC_SubmitRequest>
 8005dde:	4603      	mov	r3, r0
 8005de0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f861 	bl	8005eac <USBH_Get_USB_Status>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd90      	pop	{r4, r7, pc}

08005df8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fb feb5 	bl	8001b7e <HAL_HCD_HC_GetURBState>
 8005e14:	4603      	mov	r3, r0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	460b      	mov	r3, r1
 8005e28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d103      	bne.n	8005e3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f864 	bl	8005f04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8005e3c:	20c8      	movs	r0, #200	; 0xc8
 8005e3e:	f7fa fffd 	bl	8000e3c <HAL_Delay>
  return USBH_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	70fb      	strb	r3, [r7, #3]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005e62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	212c      	movs	r1, #44	; 0x2c
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	333b      	adds	r3, #59	; 0x3b
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	212c      	movs	r1, #44	; 0x2c
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	3354      	adds	r3, #84	; 0x54
 8005e86:	78ba      	ldrb	r2, [r7, #2]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e008      	b.n	8005e9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3355      	adds	r3, #85	; 0x55
 8005e9a:	78ba      	ldrb	r2, [r7, #2]
 8005e9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d817      	bhi.n	8005ef0 <USBH_Get_USB_Status+0x44>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <USBH_Get_USB_Status+0x1c>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005edf 	.word	0x08005edf
 8005ed0:	08005ee5 	.word	0x08005ee5
 8005ed4:	08005eeb 	.word	0x08005eeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
    break;
 8005edc:	e00b      	b.n	8005ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8005ee2:	e008      	b.n	8005ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ee8:	e005      	b.n	8005ef6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005eea:	2302      	movs	r3, #2
 8005eec:	73fb      	strb	r3, [r7, #15]
    break;
 8005eee:	e002      	b.n	8005ef6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ef4:	bf00      	nop
  }
  return usb_status;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
 8005f1c:	e001      	b.n	8005f22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	461a      	mov	r2, r3
 8005f26:	2101      	movs	r1, #1
 8005f28:	4803      	ldr	r0, [pc, #12]	; (8005f38 <MX_DriverVbusFS+0x34>)
 8005f2a:	f7fb fa59 	bl	80013e0 <HAL_GPIO_WritePin>
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40020800 	.word	0x40020800

08005f3c <__errno>:
 8005f3c:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <__errno+0x8>)
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000002c 	.word	0x2000002c

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4d0d      	ldr	r5, [pc, #52]	; (8005f80 <__libc_init_array+0x38>)
 8005f4c:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f4e:	1b64      	subs	r4, r4, r5
 8005f50:	10a4      	asrs	r4, r4, #2
 8005f52:	2600      	movs	r6, #0
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	4d0b      	ldr	r5, [pc, #44]	; (8005f88 <__libc_init_array+0x40>)
 8005f5a:	4c0c      	ldr	r4, [pc, #48]	; (8005f8c <__libc_init_array+0x44>)
 8005f5c:	f000 f8f8 	bl	8006150 <_init>
 8005f60:	1b64      	subs	r4, r4, r5
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	2600      	movs	r6, #0
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	080061cc 	.word	0x080061cc
 8005f84:	080061cc 	.word	0x080061cc
 8005f88:	080061cc 	.word	0x080061cc
 8005f8c:	080061d0 	.word	0x080061d0

08005f90 <malloc>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <malloc+0xc>)
 8005f92:	4601      	mov	r1, r0
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f000 b863 	b.w	8006060 <_malloc_r>
 8005f9a:	bf00      	nop
 8005f9c:	2000002c 	.word	0x2000002c

08005fa0 <free>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <free+0xc>)
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	f000 b80b 	b.w	8005fc0 <_free_r>
 8005faa:	bf00      	nop
 8005fac:	2000002c 	.word	0x2000002c

08005fb0 <memset>:
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d100      	bne.n	8005fba <memset+0xa>
 8005fb8:	4770      	bx	lr
 8005fba:	f803 1b01 	strb.w	r1, [r3], #1
 8005fbe:	e7f9      	b.n	8005fb4 <memset+0x4>

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d048      	beq.n	8006058 <_free_r+0x98>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f000 f8ad 	bl	8006134 <__malloc_lock>
 8005fda:	4a20      	ldr	r2, [pc, #128]	; (800605c <_free_r+0x9c>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	b933      	cbnz	r3, 8005ff2 <_free_r+0x32>
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	6014      	str	r4, [r2, #0]
 8005fe8:	b003      	add	sp, #12
 8005fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fee:	f000 b8a7 	b.w	8006140 <__malloc_unlock>
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	d90b      	bls.n	800600e <_free_r+0x4e>
 8005ff6:	6821      	ldr	r1, [r4, #0]
 8005ff8:	1862      	adds	r2, r4, r1
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	bf04      	itt	eq
 8005ffe:	681a      	ldreq	r2, [r3, #0]
 8006000:	685b      	ldreq	r3, [r3, #4]
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	bf04      	itt	eq
 8006006:	1852      	addeq	r2, r2, r1
 8006008:	6022      	streq	r2, [r4, #0]
 800600a:	602c      	str	r4, [r5, #0]
 800600c:	e7ec      	b.n	8005fe8 <_free_r+0x28>
 800600e:	461a      	mov	r2, r3
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b10b      	cbz	r3, 8006018 <_free_r+0x58>
 8006014:	42a3      	cmp	r3, r4
 8006016:	d9fa      	bls.n	800600e <_free_r+0x4e>
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	1855      	adds	r5, r2, r1
 800601c:	42a5      	cmp	r5, r4
 800601e:	d10b      	bne.n	8006038 <_free_r+0x78>
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	4421      	add	r1, r4
 8006024:	1854      	adds	r4, r2, r1
 8006026:	42a3      	cmp	r3, r4
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	d1dd      	bne.n	8005fe8 <_free_r+0x28>
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6053      	str	r3, [r2, #4]
 8006032:	4421      	add	r1, r4
 8006034:	6011      	str	r1, [r2, #0]
 8006036:	e7d7      	b.n	8005fe8 <_free_r+0x28>
 8006038:	d902      	bls.n	8006040 <_free_r+0x80>
 800603a:	230c      	movs	r3, #12
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	e7d3      	b.n	8005fe8 <_free_r+0x28>
 8006040:	6825      	ldr	r5, [r4, #0]
 8006042:	1961      	adds	r1, r4, r5
 8006044:	428b      	cmp	r3, r1
 8006046:	bf04      	itt	eq
 8006048:	6819      	ldreq	r1, [r3, #0]
 800604a:	685b      	ldreq	r3, [r3, #4]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	bf04      	itt	eq
 8006050:	1949      	addeq	r1, r1, r5
 8006052:	6021      	streq	r1, [r4, #0]
 8006054:	6054      	str	r4, [r2, #4]
 8006056:	e7c7      	b.n	8005fe8 <_free_r+0x28>
 8006058:	b003      	add	sp, #12
 800605a:	bd30      	pop	{r4, r5, pc}
 800605c:	200000b4 	.word	0x200000b4

08006060 <_malloc_r>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	1ccd      	adds	r5, r1, #3
 8006064:	f025 0503 	bic.w	r5, r5, #3
 8006068:	3508      	adds	r5, #8
 800606a:	2d0c      	cmp	r5, #12
 800606c:	bf38      	it	cc
 800606e:	250c      	movcc	r5, #12
 8006070:	2d00      	cmp	r5, #0
 8006072:	4606      	mov	r6, r0
 8006074:	db01      	blt.n	800607a <_malloc_r+0x1a>
 8006076:	42a9      	cmp	r1, r5
 8006078:	d903      	bls.n	8006082 <_malloc_r+0x22>
 800607a:	230c      	movs	r3, #12
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	2000      	movs	r0, #0
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006082:	f000 f857 	bl	8006134 <__malloc_lock>
 8006086:	4921      	ldr	r1, [pc, #132]	; (800610c <_malloc_r+0xac>)
 8006088:	680a      	ldr	r2, [r1, #0]
 800608a:	4614      	mov	r4, r2
 800608c:	b99c      	cbnz	r4, 80060b6 <_malloc_r+0x56>
 800608e:	4f20      	ldr	r7, [pc, #128]	; (8006110 <_malloc_r+0xb0>)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b923      	cbnz	r3, 800609e <_malloc_r+0x3e>
 8006094:	4621      	mov	r1, r4
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f83c 	bl	8006114 <_sbrk_r>
 800609c:	6038      	str	r0, [r7, #0]
 800609e:	4629      	mov	r1, r5
 80060a0:	4630      	mov	r0, r6
 80060a2:	f000 f837 	bl	8006114 <_sbrk_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d123      	bne.n	80060f2 <_malloc_r+0x92>
 80060aa:	230c      	movs	r3, #12
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 f846 	bl	8006140 <__malloc_unlock>
 80060b4:	e7e3      	b.n	800607e <_malloc_r+0x1e>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	1b5b      	subs	r3, r3, r5
 80060ba:	d417      	bmi.n	80060ec <_malloc_r+0x8c>
 80060bc:	2b0b      	cmp	r3, #11
 80060be:	d903      	bls.n	80060c8 <_malloc_r+0x68>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	441c      	add	r4, r3
 80060c4:	6025      	str	r5, [r4, #0]
 80060c6:	e004      	b.n	80060d2 <_malloc_r+0x72>
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	42a2      	cmp	r2, r4
 80060cc:	bf0c      	ite	eq
 80060ce:	600b      	streq	r3, [r1, #0]
 80060d0:	6053      	strne	r3, [r2, #4]
 80060d2:	4630      	mov	r0, r6
 80060d4:	f000 f834 	bl	8006140 <__malloc_unlock>
 80060d8:	f104 000b 	add.w	r0, r4, #11
 80060dc:	1d23      	adds	r3, r4, #4
 80060de:	f020 0007 	bic.w	r0, r0, #7
 80060e2:	1ac2      	subs	r2, r0, r3
 80060e4:	d0cc      	beq.n	8006080 <_malloc_r+0x20>
 80060e6:	1a1b      	subs	r3, r3, r0
 80060e8:	50a3      	str	r3, [r4, r2]
 80060ea:	e7c9      	b.n	8006080 <_malloc_r+0x20>
 80060ec:	4622      	mov	r2, r4
 80060ee:	6864      	ldr	r4, [r4, #4]
 80060f0:	e7cc      	b.n	800608c <_malloc_r+0x2c>
 80060f2:	1cc4      	adds	r4, r0, #3
 80060f4:	f024 0403 	bic.w	r4, r4, #3
 80060f8:	42a0      	cmp	r0, r4
 80060fa:	d0e3      	beq.n	80060c4 <_malloc_r+0x64>
 80060fc:	1a21      	subs	r1, r4, r0
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f808 	bl	8006114 <_sbrk_r>
 8006104:	3001      	adds	r0, #1
 8006106:	d1dd      	bne.n	80060c4 <_malloc_r+0x64>
 8006108:	e7cf      	b.n	80060aa <_malloc_r+0x4a>
 800610a:	bf00      	nop
 800610c:	200000b4 	.word	0x200000b4
 8006110:	200000b8 	.word	0x200000b8

08006114 <_sbrk_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_sbrk_r+0x1c>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fa fda8 	bl	8000c74 <_sbrk>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_sbrk_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_sbrk_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	200007f0 	.word	0x200007f0

08006134 <__malloc_lock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_lock+0x8>)
 8006136:	f000 b809 	b.w	800614c <__retarget_lock_acquire_recursive>
 800613a:	bf00      	nop
 800613c:	200007f8 	.word	0x200007f8

08006140 <__malloc_unlock>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__malloc_unlock+0x8>)
 8006142:	f000 b804 	b.w	800614e <__retarget_lock_release_recursive>
 8006146:	bf00      	nop
 8006148:	200007f8 	.word	0x200007f8

0800614c <__retarget_lock_acquire_recursive>:
 800614c:	4770      	bx	lr

0800614e <__retarget_lock_release_recursive>:
 800614e:	4770      	bx	lr

08006150 <_init>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr

0800615c <_fini>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr
